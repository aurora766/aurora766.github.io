<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aurora🥝</title>
  
  
  <link href="https://www.fomal.cc/atom.xml" rel="self"/>
  
  <link href="https://www.fomal.cc/"/>
  <updated>2024-10-02T07:56:03.732Z</updated>
  <id>https://www.fomal.cc/</id>
  
  <author>
    <name>Aurora 🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>🍉6、控制器Controller资源</title>
    <link href="https://www.fomal.cc/posts/64ee6901.html"/>
    <id>https://www.fomal.cc/posts/64ee6901.html</id>
    <published>2024-10-02T06:34:20.000Z</published>
    <updated>2024-10-02T07:56:03.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="控制器-Controller资源">控制器 Controller资源</h2><h3 id="1、控制器作用"><strong>1、控制器作用</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.pod类型的资源，删除pod后，不会重建</span><br><span class="line">2.替用户监视并保证相应的节点上始终有用户所期望的副本数量的pod在运行</span><br><span class="line">3.如果所运行的pod副本数超过了用户期望的，那么控制器就会屾掉，直到和用户期望的一致</span><br><span class="line">4.如果所运行的pod副本数低于用户期望的，那么控制器就会创建，直到和用户期望的一致</span><br></pre></td></tr></table></figure><h3 id="2、控制器的类型"><strong>2、控制器的类型</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1) Replicacontroller:Rc  <span class="string">&quot;已经淘汰掉了&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#常用的</span></span><br><span class="line">2) Replicaset Rs:按用户期望的副本创建pod,并始终保持相应数量副本</span><br><span class="line"></span><br><span class="line">3) Deployment:</span><br><span class="line">Deployment通过控制RS来保证POD始终保持相应的数量副本支持滚动更新，回滚，回滚默认保留10个版本提供声明式配置，支持动态修改管理无状态应用最理想的控制器node节点可能会运行0个或多个POD</span><br><span class="line"></span><br><span class="line">4)Deamonset:</span><br><span class="line">一个节点只运行一个，必须是始终运行的状态</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个用的比较少</span></span><br><span class="line">5)statefulset:     </span><br><span class="line">有状态应用</span><br></pre></td></tr></table></figure><h3 id="3、ReplicaSet-Rs-控制器"><strong>3、ReplicaSet     Rs 控制器</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: <span class="string">&quot;apps/v1&quot;</span>        <span class="comment">#RS控制器的接口</span></span><br><span class="line">kind: <span class="string">&quot;ReplicaSet&quot;</span>           <span class="comment">#RS控制器的类型</span></span><br><span class="line">metadata:                    <span class="comment">#RS控制器的元数据</span></span><br><span class="line"><span class="comment">#metadata里面的name是这个资源的name,这个name是给Rs控制器起的名</span></span><br><span class="line">  name: nginx-rs             <span class="comment">#RS控制器的名字</span></span><br><span class="line"><span class="comment">#labes不需要打，因为service资源找的是Pod资源的标签，所以控制器的标签没必要打</span></span><br><span class="line">  namespace: default         <span class="comment">#RS控制器启动在default名称空间  </span></span><br><span class="line">spec:                        <span class="comment">#RS控制器关联Pod</span></span><br><span class="line"><span class="comment">#最小的准备时间，给控制器一个就绪时间，一般不需要写，不需要约束</span></span><br><span class="line">  <span class="comment">#minReadySeconds: integer</span></span><br><span class="line"><span class="comment">#期望的副本，比如说起5个nginx副本</span></span><br><span class="line">  replicas: 5                <span class="comment">#pod副本数量</span></span><br><span class="line"><span class="comment">#匹配标签的，有2种写法，一个是拿正则匹配，一个精确匹配</span></span><br><span class="line">  selector:                  <span class="comment">#标签选择器</span></span><br><span class="line">    matchLabels:             <span class="comment">#匹配的标签</span></span><br><span class="line">    <span class="comment">#标签能让控制器找到pod,所以这里写pod的标签,一会pod里面要打的标签一定要和这个一样</span></span><br><span class="line">      app: nginx             <span class="comment">#控制器匹配的Pod标签</span></span><br><span class="line">  template:                  <span class="comment">#Pod资源信息</span></span><br><span class="line">    metadata:                <span class="comment">#Pod的元数据</span></span><br><span class="line">      name: nginx-rs-pod       <span class="comment">#Pod的名字</span></span><br><span class="line">      labels:                  <span class="comment">#POD打标签</span></span><br><span class="line">        app: nginx             <span class="comment">#POD打标签</span></span><br><span class="line">    spec:                      <span class="comment">#容器相关信息</span></span><br><span class="line">      containers:              <span class="comment">#容器信息</span></span><br><span class="line">      - name: nginx-web-containers     <span class="comment">#容器名</span></span><br><span class="line">        image: nginx:alpine            <span class="comment">#镜像</span></span><br><span class="line">        imagePullPolicy: IfNotPresent  <span class="comment">#拉取规则</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">其实Rs控制器就是把之前的Pod资源包含起来</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5CMac%5CDesktop%5Casm_blog%5Chexo-theme-Fomalhaut%5Csource%5Cimage%5Cstudy_img%5Cimage-20240923164211035.png" alt="image-20240923164211035"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1、编写Rs控制器的资源清单</span><br><span class="line">[root@master01 kubernetes]# vim nginx-rs.yml</span><br><span class="line">apiVersion: <span class="string">&quot;apps/v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;ReplicaSet&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-rs</span><br><span class="line">  namespace: default</span><br><span class="line">spec: </span><br><span class="line">  replicas: 5</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">    <span class="comment">#控制器匹配的pod标签</span></span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx-rs-pod</span><br><span class="line">      labels:</span><br><span class="line">    <span class="comment">#Pod的标签被Rs控制器匹配</span></span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx-web-containers</span><br><span class="line">        image: nginx:alpine</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">  </span><br><span class="line">2、运行，并查看，运行的Pod是轮询在node1、2、3的</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx-rs.yml</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -owide| grep nginx-rs</span><br><span class="line">nginx-rs-4z82q   1/1     Running   0      6m13s   10.2.2.9    node02</span><br><span class="line">nginx-rs-d5mhz   1/1     Running   0      6m13s   10.2.2.10   node02</span><br><span class="line">nginx-rs-qv5l6   1/1     Running   0      6m13s   10.2.3.62   node03</span><br><span class="line">nginx-rs-t8hz6   1/1     Running   0      6m13s   10.2.1.16   node01</span><br><span class="line">nginx-rs-tksxm   1/1     Running   0      6m13s   10.2.1.17   node01</span><br><span class="line"></span><br><span class="line">Pod的名字在资源清单中加nginx-pod,但是不按pod名字来，是根具控制器name: nginx-rs这个加上随机字符串</span><br></pre></td></tr></table></figure><p>1、rs资源的操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1、查看</span><br><span class="line">[root@master01 kubernetes]# kubectl get replicasets</span><br><span class="line"> <span class="comment">#                  期望数量   当前数量</span></span><br><span class="line">NAME               DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-5f5d9d69c4   1         1         1       5d2h</span><br><span class="line">nginx-65cc99f84f   0         0         0       5d8h</span><br><span class="line">nginx-rs           5         5         5       11m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl get rs -owide</span><br><span class="line">[root@master01 kubernetes]# kubectl get replicasets -owide</span><br><span class="line">NAME               DESIRED   CURRENT   READY   AGE    CONTAINERS             IMAGES         SELECTOR  </span><br><span class="line">nginx-rs           5         5         5       13m    nginx-web-containers   nginx:alpine   app=nginx  <span class="comment">#标签选择器选择带app=nginx这个标签的 </span></span><br><span class="line"></span><br><span class="line">2、#查看详细信息</span><br><span class="line">[root@master01 kubernetes]# kubectl describe rs nginx-rs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、#持续输出</span><br><span class="line">当前窗口A</span><br><span class="line">[root@master01 kubernetes]# kubectl get rs -w</span><br><span class="line">再打开一个master新窗口B，</span><br><span class="line">[root@master01 ~]# kubectl get pod -w</span><br><span class="line"></span><br><span class="line">再打开一个master新窗口C，删除一个pod,旧窗口有输出信息</span><br><span class="line">[root@master01 ~]# kubectl delete pod nginx-rs-4z82q</span><br><span class="line"></span><br><span class="line">窗口A、B会有输出信息，窗口B会标记删除Terminating(此时只是标记，并没有真删除)，然后为了保证你的期望，会赶紧创建一个新的Pending，然后初始化容器ContainerCreating，之后在删除Terminating，新容器运行之后，才彻底被删除掉</span><br><span class="line"></span><br><span class="line">4、#删除POD（只能删除rs控制器，否则会自动拉起）</span><br><span class="line">当我们不需要这个pod，delete pod是删不掉的，删了就会重新起来，所以删rs控制器才彻底删除</span><br><span class="line">kubectl delete 控制器 控制器名</span><br><span class="line">[root@master01 kubernetes]# kubectl delete rs nginx-rs</span><br></pre></td></tr></table></figure><p>2、Rs资源手动扩缩容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方法一：</span></span><br><span class="line">1、编辑资源清单，根据自己的需求修改副本数量</span><br><span class="line">[root@master01 kubernetes]# vim nginx-rs.yml </span><br><span class="line">replicas: 8</span><br><span class="line"></span><br><span class="line">2、运行，查看</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx-rs.yml</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod</span><br><span class="line">[root@master01 kubernetes]# kubectl get rs </span><br><span class="line">NAME               DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-rs           8         8         8       10s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二：  使用内置的edit命令去修改资源清单</span></span><br><span class="line">1、编辑控制器的资源清单，根据自己的需求修改副本数量   如果是放到其他名称空间，后面要加 -n 指定名称空间</span><br><span class="line">[root@master01 kubernetes]# kubectl edit rs nginx-rs </span><br><span class="line">replicas: 4</span><br><span class="line">修改之后直接查看，不需要apply,直接生效</span><br><span class="line">[root@master01 kubernetes]# kubectl get rs</span><br><span class="line">NAME               DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-rs           4         4         4       5m56s</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法三：   使用专门的命令修改配置，扩缩容，升级</span></span><br><span class="line">[root@master01 kubernetes]# kubectl scale rs nginx-rs --replicas=7</span><br><span class="line"></span><br><span class="line">scale：手动扩缩容</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl get pod</span><br><span class="line">[root@master01 kubernetes]# kubectl get rs</span><br><span class="line">NAME               DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-rs           7         7         7       13m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#专业一点是根据物理机的资源占用情况来做一个计算，如果抗不住了就自动缩容</span></span><br></pre></td></tr></table></figure><h3 id="4、Deployment-控制器"><strong>4、Deployment 控制器</strong></h3><p>1、Deployment控制器的功能和关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deployment通过控制RS来保证Pod始终保持相对于的数量副本</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240923200104784.png" alt="image-20240923200104784"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RS控制器他会达到你的期望副本，缺陷不能做版本升级</span><br><span class="line">Deployment之所以要控制RS控制器是因为要保留RS控制器的功能，保证用户期望的副本数量一直存在</span><br><span class="line"></span><br><span class="line">支持滚动更新，回滚，回滚默认保留10个版本(也就默认保留10个RS控制器)</span><br><span class="line">提供声明式配置，支持动态修改</span><br><span class="line">管理无状态应用最理想的控制器</span><br><span class="line">node节点可能运行0个或多个pod</span><br></pre></td></tr></table></figure><p>2、Deployment控制器的资源清单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1、编写资源清单</span><br><span class="line">[root@master01 kubernetes]# <span class="built_in">cp</span> nginx-rs.yml nginx-dp.yml </span><br><span class="line">[root@master01 kubernetes]# vim nginx-dp.yml </span><br><span class="line">apiVersion: <span class="string">&quot;apps/v1&quot;</span></span><br><span class="line"><span class="comment">#就修改这里控制器的名字，然后再修改一下下面的标签</span></span><br><span class="line">kind: <span class="string">&quot;Deployment&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-dp</span><br><span class="line">  namespace: default</span><br><span class="line">spec: </span><br><span class="line">  replicas: 8</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx-dp</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx-dp-pod</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx-dp</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx-web-containers</span><br><span class="line">        image: nginx:alpine</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line"></span><br><span class="line">2、运行并查看</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx-dp.yml </span><br><span class="line">[root@master01 kubernetes]# kubectl get pod</span><br><span class="line">[root@master01 kubernetes]# kubectl get deployments.apps </span><br><span class="line">NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-dp   8/8     8            8           39s</span><br><span class="line"></span><br><span class="line">3、查看控制器的详细信息</span><br><span class="line">[root@master01 kubernetes]# kubectl describe deployments.apps nginx-dp </span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240923202757305.png" alt="image-20240923202757305"></p><p>3、Deployment的扩缩容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方法一：</span></span><br><span class="line">1、编辑资源清单，根据自己的需求修改副本数量</span><br><span class="line">[root@master01 kubernetes]# vim nginx-dp.yml </span><br><span class="line">replicas: 6</span><br><span class="line"></span><br><span class="line">2、运行，查看</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx-dp.yml</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod</span><br><span class="line">[root@master01 kubernetes]# kubectl get deployments.apps </span><br><span class="line">NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-dp   6/6     6            6           69m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二：  使用内置的edit命令去修改资源清单</span></span><br><span class="line">1、编辑控制器的资源清单，根据自己的需求修改副本数量   如果是放到其他名称空间，后面要加 -n 指定名称空间</span><br><span class="line">[root@master01 kubernetes]# kubectl edit deployments.apps nginx-dp </span><br><span class="line">replicas: 10</span><br><span class="line">修改之后直接查看，不需要apply,直接生效</span><br><span class="line">[root@master01 kubernetes]# kubectl get deployments.apps </span><br><span class="line">NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-dp   10/10   10           10          71m</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法三：   使用专门的命令修改配置，扩缩容</span></span><br><span class="line">[root@master01 kubernetes]# kubectl scale deployment nginx-dp --replicas=4</span><br><span class="line">scale：手动扩缩容</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl get pod</span><br><span class="line">[root@master01 kubernetes]# kubectl get deployments.apps </span><br><span class="line">NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-dp   4/4     4            4           73m</span><br></pre></td></tr></table></figure><p>4、Deployment更新版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方法一：</span></span><br><span class="line">1、编辑资源清单，根据自己的需求修改版本</span><br><span class="line">[root@master01 kubernetes]# vim nginx-dp.yml </span><br><span class="line">image: nginx:alpine 改成 image: nginx:1.20.1</span><br><span class="line"></span><br><span class="line">2、运行，查看</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx-dp.yml</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod</span><br><span class="line">[root@master01 kubernetes]# kubectl get deployments.apps </span><br><span class="line">NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-dp   6/6     6            6           69m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二：  使用内置的edit命令去修改资源清单</span></span><br><span class="line">1、编辑控制器的资源清单，根据自己的需求修改版本   如果是放到其他名称空间，后面要加 -n 指定名称空间</span><br><span class="line">[root@master01 kubernetes]# kubectl edit deployments.apps nginx-dp </span><br><span class="line">- image: nginx:alpine 改成 - image: nginx:1.20.1</span><br><span class="line"></span><br><span class="line">修改之后直接查看，不需要apply,直接生效</span><br><span class="line">[root@master01 kubernetes]# kubectl get rs</span><br><span class="line">NAME                  DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-dp-6447db69d8   0         0         0       79m</span><br><span class="line">nginx-dp-7b88fc7dff   6         6         6       2m8s</span><br><span class="line"></span><br><span class="line">这个版本是没有直接显示，可以查看</span><br><span class="line">[root@master01 kubernetes]# kubectl describe rs nginx-dp-7b88fc7dff| grep -n <span class="string">&#x27;.*&#x27;</span></span><br><span class="line">17行    Image:        nginx:1.20.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法三：   使用专门的命令升级</span></span><br><span class="line">kubectl <span class="built_in">set</span> image -f 资源清单 容器名=镜像:版本</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">set</span> image -f nginx-dp.yml nginx-web-containers=nginx:1.16.0</span><br><span class="line"></span><br><span class="line">查看保留的几个版本</span><br><span class="line">[root@master01 kubernetes]# kubectl get rs</span><br></pre></td></tr></table></figure><p>滚动更新示意图：</p><p><img src="../image/study_img/image-20240923115022973.png" alt="image-20240923115022973"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看版本滚动的状态是否成功</span></span><br><span class="line">[root@master01 kubernetes]# kubectl rollout status deployment nginx-dp </span><br><span class="line">deployment <span class="string">&quot;nginx-dp&quot;</span> successfully rolled out</span><br></pre></td></tr></table></figure><p>5、Deployment回滚到上一个版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#回滚其实和上面的更新方法一样的，改版本号</span></span><br><span class="line"><span class="comment">#方法一：</span></span><br><span class="line">1、编辑资源清单，根据自己的需求修改版本</span><br><span class="line">[root@master01 kubernetes]# vim nginx-dp.yml </span><br><span class="line">image: nginx:alpine 改成 image: nginx:1.20.1</span><br><span class="line"></span><br><span class="line">2、运行，查看</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx-dp.yml</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod</span><br><span class="line">[root@master01 kubernetes]# kubectl get deployments.apps </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二：  使用内置的edit命令去修改资源清单</span></span><br><span class="line">1、编辑控制器的资源清单，根据自己的需求修改版本   如果是放到其他名称空间，后面要加 -n 指定名称空间</span><br><span class="line">[root@master01 kubernetes]# kubectl edit deployments.apps nginx-dp </span><br><span class="line">- image: nginx:alpine 改成 - image: nginx:1.20.1</span><br><span class="line"></span><br><span class="line">修改之后直接查看，不需要apply,直接生效</span><br><span class="line">[root@master01 kubernetes]# kubectl get rs</span><br><span class="line"></span><br><span class="line">这个版本是没有直接显示，可以查看</span><br><span class="line">[root@master01 kubernetes]# kubectl describe rs nginx-dp-7b88fc7dff| grep -n <span class="string">&#x27;.*&#x27;</span></span><br><span class="line">17行    Image:        nginx:1.20.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法三：   使用专门的命令升级</span></span><br><span class="line">kubectl <span class="built_in">set</span> image -f 资源清单 容器名=镜像:版本</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">set</span> image -f nginx-dp.yml nginx-web-containers=nginx:1.16.0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看历史版本</span></span><br><span class="line">[root@master01 kubernetes]# kubectl rollout <span class="built_in">history</span> deployment nginx-dp </span><br><span class="line">deployment.apps/nginx-dp </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         &lt;none&gt;</span><br><span class="line">2         &lt;none&gt;</span><br><span class="line">3         &lt;none&gt;</span><br><span class="line">保留10个，现在只要3个</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看指定历史版本的信息</span></span><br><span class="line">[root@master01 kubernetes]# kubectl rollout <span class="built_in">history</span> deployment nginx-dp --revision=1</span><br><span class="line">第7行可以看到版本信息</span><br><span class="line">Image:      nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="comment">#看完版本后，就可以回滚到指定版本</span></span><br><span class="line">[root@master01 kubernetes]# kubectl rollout undo deployment nginx-dp --to-revision=1</span><br><span class="line">[root@master01 kubernetes]# kubectl get rs</span><br><span class="line">NAME                  DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-dp-57fb845d6d   0         0         0       3m45s</span><br><span class="line">nginx-dp-6447db69d8   6         6         6       109m</span><br><span class="line">nginx-dp-6c696f4449   0         0         0       22m</span><br><span class="line">nginx-dp-7b88fc7dff   0         0         0       31m</span><br><span class="line">[root@master01 kubernetes]# kubectl describe rs nginx-dp-6447db69d8</span><br><span class="line">查看已经回到alpine版本</span><br><span class="line">    Image:        nginx:alpine</span><br></pre></td></tr></table></figure><p>小技巧  使用–record在历史版本中记录命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看历史版本</span></span><br><span class="line">[root@master01 kubernetes]# kubectl rollout <span class="built_in">history</span> deployment nginx-dp </span><br><span class="line">deployment.apps/nginx-dp </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         &lt;none&gt;</span><br><span class="line">2         &lt;none&gt;</span><br><span class="line">3         &lt;none&gt;</span><br><span class="line"></span><br><span class="line">当前版本信息为&lt;none&gt;，当使用命令去更改的使用，可以在最后面加上选项--record,可以记录这条执行的命令，如果资源清单加上版本号，也是可以显示，用法如下</span><br><span class="line"><span class="comment">#方法一：</span></span><br><span class="line">1、修改资源清单，改一下里面的版本</span><br><span class="line">[root@master01 kubernetes]# vim nginx-dp.yml </span><br><span class="line">image: nginx:1.17.4</span><br><span class="line"></span><br><span class="line">2、运行资源清单</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx-dp.yml --record</span><br><span class="line">[root@master01 kubernetes]# kubectl rollout <span class="built_in">history</span> deployment nginx-dp </span><br><span class="line">deployment.apps/nginx-dp </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">2         &lt;none&gt;</span><br><span class="line">3         &lt;none&gt;</span><br><span class="line">4         &lt;none&gt;</span><br><span class="line">5         &lt;none&gt;</span><br><span class="line">6         kubectl apply --filename=nginx-dp.yml --record=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二：</span></span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">set</span> image -f nginx-dp.yml nginx-web-containers=nginx:1.18.4 --record</span><br><span class="line">deployment.apps/nginx-dp image updated</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl rollout <span class="built_in">history</span> deployment nginx-dp </span><br><span class="line">deployment.apps/nginx-dp </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">2         &lt;none&gt;</span><br><span class="line">3         &lt;none&gt;</span><br><span class="line">4         &lt;none&gt;</span><br><span class="line">5         &lt;none&gt;</span><br><span class="line">6         kubectl apply --filename=nginx-dp.yml --record=<span class="literal">true</span></span><br><span class="line">7         kubectl <span class="built_in">set</span> image nginx-web-containers=nginx:1.18.4 --filename=nginx-dp.yml --record=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="5、DaemonSet-控制器"><strong>5、DaemonSet 控制器</strong></h3><p>1、DaemonSet类型介绍   应用场景：每一个节点有且只起一个pod，像zabbix-agent,flannel</p><p><img src="../image/study_img/image-20240923120503080.png" alt="image-20240923120503080"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">简单来说就是每个节点部署一个POD副本</span><br><span class="line">常见的应用场景：</span><br><span class="line">监控容器</span><br><span class="line">日志收集容器</span><br></pre></td></tr></table></figure><p>2、DaemonSet的资源清单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1、编写资源清单</span><br><span class="line">[root@master01 kubernetes]# <span class="built_in">cp</span> nginx-dp.yml nginx-ds.yml</span><br><span class="line">[root@master01 kubernetes]# vim nginx-ds.yml</span><br><span class="line">apiVersion: <span class="string">&quot;apps/v1&quot;</span></span><br><span class="line"><span class="comment">#修改一下控制器类型</span></span><br><span class="line">kind: <span class="string">&quot;DaemonSet&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ds</span><br><span class="line">  namespace: default</span><br><span class="line">spec: </span><br><span class="line">  <span class="comment">#replicas: 6  这行不要</span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx-ds</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx-ds-pod</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx-ds</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx-web-containers</span><br><span class="line">        image: nginx:alpine</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line"></span><br><span class="line">2、运行资源清单，并查看</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -owide| grep nginx-ds</span><br><span class="line">nginx-ds-7gpkh              1/1     Running            0          3m21s   10.2.1.38   node01</span><br><span class="line">nginx-ds-9r2hz              1/1     Running            0          3m21s   10.2.2.34   node02</span><br><span class="line">nginx-ds-vmjsj              1/1     Running            0          3m21s   10.2.3.81   node03</span><br><span class="line">[root@master01 kubernetes]# kubectl get ds</span><br><span class="line">NAME       DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE</span><br><span class="line">nginx-ds   3         3         3       3            3   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#不需要扩缩容，一台机器只能起一个，除非加node</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这几个控制器，以后看你起什么样的服务，去决定你用什么类型的控制器，除了客户端类型的，大部分都是Deplament</span><br><span class="line"></span><br><span class="line">StatefulSet控制器</span><br><span class="line">mysql主从复制 ，kepalived</span><br><span class="line">这个用的少，如果需要可以从网上搜索K8smysql主从复制</span><br></pre></td></tr></table></figure><p>小练习：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1、## 使用控制器起wordpress</span><br><span class="line">一：wordpress镜像</span><br><span class="line">在一个POD里启动两个容器</span><br><span class="line">- wordpress</span><br><span class="line">- mysql5.7</span><br><span class="line">1.就绪性探针</span><br><span class="line">2.存活性探针</span><br><span class="line">3.启动钩子</span><br><span class="line">4.停止钩子</span><br><span class="line">5.初始化容器</span><br><span class="line">二：尝试 wordpress 启动一个POD</span><br><span class="line">MySQL单独启动在一个POD里</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、## 了解HPA 自动扩缩容</span><br><span class="line">3、## 写一个MySQL主从复制的资源清单</span><br></pre></td></tr></table></figure><p>一、使用控制器起wordpress</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: <span class="string">&quot;apps/v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Deployment&quot;</span></span><br><span class="line">metadata:</span><br><span class="line"><span class="comment">#给Deployment资源起的名字</span></span><br><span class="line">  name: wp-dp</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line"><span class="comment">#起2个，数据也是2个，除非把数据分开，所以现在只能起1个</span></span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: wp</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: wp-pod</span><br><span class="line">      namespace: default</span><br><span class="line">      labels:</span><br><span class="line">        app: wp</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: mysql-data</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /data/mysql</span><br><span class="line">      - name: wp-data</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /data/wp</span><br><span class="line">      containers:</span><br><span class="line">      - name: wp-container</span><br><span class="line">        image: wordpress</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        livenessProbe:</span><br><span class="line">          tcpSocket:</span><br><span class="line">            port: 80</span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          periodSeconds: 3</span><br><span class="line">          timeoutSeconds: 3</span><br><span class="line">          failureThreshold: 3</span><br><span class="line">        readinessProbe:</span><br><span class="line">          tcpSocket:</span><br><span class="line">            port: 3306</span><br><span class="line">          initialDelaySeconds: 3</span><br><span class="line">          timeoutSeconds: 1</span><br><span class="line">          periodSeconds: 2</span><br><span class="line">          successThreshold: 3</span><br><span class="line">          failureThreshold: 3</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: WORDPRESS_DB_HOST</span><br><span class="line">          value: <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_USER</span><br><span class="line">          value: <span class="string">&#x27;wp_user&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_NAME</span><br><span class="line">          value: <span class="string">&#x27;wp_db&#x27;</span></span><br><span class="line">        </span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: wp-data</span><br><span class="line">          mountPath: /var/www/html/</span><br><span class="line">    </span><br><span class="line">      - name: mysql-container</span><br><span class="line">        image: mysql:5.7</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        args:</span><br><span class="line">        - --character-set-server=utf8</span><br><span class="line">        - --collation-server=utf8_general_ci</span><br><span class="line">        livenessProbe:</span><br><span class="line">          <span class="built_in">exec</span>:</span><br><span class="line">            <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;mysqladmin -uroot -p123 ping&quot;</span>]</span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          periodSeconds: 3</span><br><span class="line">          timeoutSeconds: 3</span><br><span class="line">          failureThreshold: 3</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        - name: MYSQL_DATABASE</span><br><span class="line">          value: <span class="string">&#x27;wp_db&#x27;</span></span><br><span class="line">        - name: MYSQL_USER</span><br><span class="line">          value: <span class="string">&#x27;wp_user&#x27;</span></span><br><span class="line">        - name: MYSQL_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: mysql-data</span><br><span class="line">          mountPath: /var/lib/mysql</span><br><span class="line">          </span><br><span class="line">目前的资源清单还是有缺陷</span><br><span class="line">1、对外提供服务的问题</span><br><span class="line">2、数据容器和wordpress容器在同一个pod里，正常应该分开起在不同pod</span><br><span class="line">3、自动扩缩容</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文会讲解k8s的3种控制器</summary>
    
    
    
    <category term="k8s" scheme="https://www.fomal.cc/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>🍉7、自动扩缩容HPA</title>
    <link href="https://www.fomal.cc/posts/276654d0.html"/>
    <id>https://www.fomal.cc/posts/276654d0.html</id>
    <published>2024-10-02T06:32:59.000Z</published>
    <updated>2024-10-02T07:56:03.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自动扩缩容HPA">自动扩缩容HPA</h2><h3 id="1、HPA的介绍"><strong>1、HPA的介绍</strong></h3><p>HorizontalPodAutoscaler（简称 HPA ） 自动更新工作负载资源（例如 Deployment 或者StatefulSet）， 目的是自动扩缩工作负载以满足需求。<br>水平扩缩意味着对增加的负载的响应是部署更多的 Pod。 这与“垂直（Vertical）”扩缩不同，对于Kubernetes， 垂直扩缩意味着将更多资源（例如：内存或 CPU）分配给已经为工作负载运行的 Pod。<br>如果负载减少，并且 Pod 的数量高于配置的最小值， HorizontalPodAutoscaler 会指示工作负载资源（Deployment、StatefulSet 或其他类似资源）缩减。<br>本文档将引导你完成启用 HorizontalPodAutoscaler 以自动管理示例 Web 应用程序的扩缩的示例。 此示例工作负载是运行一些 PHP 代码的 Apache httpd</p><p><font color=red>总结：HPA可根据系统负载情况(CPU、内存、磁盘、平均负载)，对控制器(Deployment、statefulset、ReplicaSet)进行操作，修改副本数量，达到扩缩容的目的</font>&gt;</p><h3 id="2、Metrics-Service介绍"><strong>2、Metrics Service介绍</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Metrics：指标的意思</span><br><span class="line">什么情况下扩容量：负载高</span><br><span class="line">缩容：Pod 的数量高于配置的最小值</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看node资源的使用情况</span></span><br><span class="line">[root@master01 ~]# kubectl top node</span><br><span class="line">error: Metrics API not available</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">官方文档地址：https://kubernetes.io/zh-cn/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/</span><br><span class="line"></span><br><span class="line">HPA怎么知道系统负载的情况？</span><br><span class="line">需要有Metrics service服务</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240924084519004.png" alt="image-20240924084519004"></p><p><img src="../image/study_img/image-20240924085953555.png" alt="image-20240924085953555"></p><p><img src="../image/study_img/image-20240924141858256.png" alt="image-20240924141858256"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Metrics Server是Kubernetes内置自动缩放管道的可扩展、高效的容器资源度量源。</span><br><span class="line">Metrics Server从Kubelets收集资源度量，并通过Metrics API在Kubernetes apiserver中公开这些度量，供Horizontal Pod Autoscaler和Vertical Pod Autocaler使用。kubectl top还可以访问度量API，从而更容易地调试自动缩放管道</span><br></pre></td></tr></table></figure><p>版本的选择：</p><table><thead><tr><th>Metrics Server</th><th>Metrics APl group/version</th><th>Supported Kubernetes version</th></tr></thead><tbody><tr><td>0.7.x</td><td><a href="http://metrics.k8s.io/v1beta1">metrics.k8s.io/v1beta1</a></td><td>1.19+</td></tr><tr><td>0.6.x</td><td><a href="http://metrics.k8s.io/v1beta1">metrics.k8s.io/v1beta1</a></td><td>1.19+</td></tr><tr><td>0.5.x</td><td><a href="http://metrics.k8s.io/v1beta1">metrics.k8s.io/v1beta1</a></td><td>*1.8+</td></tr><tr><td>0.4.x</td><td><a href="http://metrics.k8s.io/v1beta1">metrics.k8s.io/v1beta1</a></td><td>*1.8+</td></tr><tr><td>0.3.x</td><td><a href="http://metrics.k8s.io/v1beta1">metrics.k8s.io/v1beta1</a></td><td>1.8-1.21</td></tr></tbody></table><h3 id="3、部署Metics-Server"><strong>3、部署Metics Server</strong></h3><p>1、部署Metics Server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">registry.k8s.io/metrics-server/metrics-server:v0.7.2是谷歌内部镜像站下载，但是无法下载，需要手段，可以从如下地址下载</span><br><span class="line">http://test.driverzeng.com/HPA/metrics-server.tar，资源清单和镜像都有</span><br><span class="line"></span><br><span class="line">1、查看当前k8s版本</span><br><span class="line">[root@master01 service]#  kubectl version | grep <span class="string">&quot;GitVersion:&quot;</span></span><br><span class="line">GitVersion:<span class="string">&quot;v1.19.3&quot;</span></span><br><span class="line"></span><br><span class="line">2、建议每个node都下载镜像</span><br><span class="line">wget http://test.driverzeng.com/HPA/metrics-server.tar</span><br><span class="line">wget http://test.driverzeng.com/HPA/components.yaml</span><br><span class="line"></span><br><span class="line">3、每个node导入镜像</span><br><span class="line">[root@node01 ~]# docker load &lt; metrics-server.tar</span><br><span class="line"></span><br><span class="line">4、修改资源清单</span><br><span class="line"></span><br><span class="line">[root@node01 ~]# <span class="built_in">mv</span> components.yaml.1 components.yaml</span><br><span class="line">[root@node01 ~]# vim components.yaml</span><br><span class="line">①、删除这几行</span><br><span class="line">122   strategy:</span><br><span class="line">123     rollingUpdate:</span><br><span class="line">124       maxUnavailable: 0</span><br><span class="line">②、修改控制器资源，为了保证每台起一个所以要修改</span><br><span class="line">112 将kind: Deployment 改为kind: DaemonSet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、启动，并查看</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f components.yaml</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -n kube-system -owide</span><br><span class="line">NAME                  READY   STATUS    RE         AGE     </span><br><span class="line">metrics-server-9kcvb  1/1     Running   0      5h40m 10.0.0.202   node02  </span><br><span class="line">metrics-server-nltkh  1/1     Running   0          5h40m 10.0.0.201   node01  </span><br><span class="line">metrics-server-v28cw  1/1     Running   0          5h40m 10.0.0.203   node03  </span><br><span class="line"></span><br><span class="line">6、查看node节点资源的占用情况            </span><br><span class="line">[root@master01 kubernetes]# kubectl top node</span><br><span class="line">NAME       CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   </span><br><span class="line">master01   167m         16%    1248Mi          71%       </span><br><span class="line">node01     70m          7%     507Mi           29%       </span><br><span class="line">node02     73m          7%     615Mi           35%       </span><br><span class="line">node03     110m         5%     688Mi           20% </span><br><span class="line"></span><br><span class="line">7、查看pod资源的占用情况  </span><br><span class="line">[root@master01 kubernetes]# kubectl top pod</span><br><span class="line">NAME                            CPU(cores)   MEMORY(bytes)   </span><br><span class="line">c7-nginx                        0m           1Mi             </span><br><span class="line">nginx-deploy-545f948568-4tgvd   0m           2Mi             </span><br><span class="line">nginx-deploy-545f948568-7jnbf   0m           2Mi             </span><br><span class="line">nginx-deploy-545f948568-v5v82   0m           2Mi             </span><br><span class="line">nginx-ds-7gpkh                  0m           1Mi             </span><br><span class="line">nginx-ds-9r2hz                  0m           1Mi             </span><br><span class="line">nginx-ds-vmjsj                  0m           2Mi </span><br><span class="line"></span><br><span class="line">HPA就是掉node的接口获取资源信息</span><br></pre></td></tr></table></figure><p>2、生成测试镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1、每个node编写php代码，创建测试首页</span><br><span class="line"><span class="built_in">cat</span> &gt; index.php &lt;&lt; <span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&lt;?php</span><br><span class="line">  <span class="variable">$x</span> = 0.0001;</span><br><span class="line">  <span class="keyword">for</span> (<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt;= 1000000; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$x</span> += sqrt(<span class="variable">$x</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;OK!&quot;</span>;</span><br><span class="line">?&gt;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">一般做计算是cpu计算，实际上就是在压你的cpu，计算100亿次</span><br><span class="line"></span><br><span class="line">2、每个node创建Dockerfile</span><br><span class="line"><span class="built_in">cat</span> &gt; dockerfile &lt;&lt; <span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">FROM php:5-apache</span><br><span class="line">ADD index.php /var/www/html/index.php</span><br><span class="line">RUN <span class="built_in">chmod</span> a+rx index.php</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、每个node构建镜像</span><br><span class="line">docker build -t php:v1 .</span><br></pre></td></tr></table></figure><p>3、编写资源清单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">1、编写资源清单    kubectl run php-apache --image=php:v1 --requests=cpu=200m --expose --port=80</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# vim php-dp.yml</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: php-apache</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      run: php-apache</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        run: php-apache</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: php:v1</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        name: php-apache</span><br><span class="line"><span class="comment">#现在CPU最多使用200毫核 0.2核</span></span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 200m</span><br><span class="line">  </span><br><span class="line">2、运行，并查看</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f php-dp.yml</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -owide</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE     IP          NODE</span><br><span class="line">php-apache-869dfddb74-qgffj     1/1     Running   0          53s     10.2.3.90   node03</span><br><span class="line">[root@master01 kubernetes]# curl 10.2.3.90 </span><br><span class="line">OK!</span><br><span class="line"></span><br><span class="line">3、目前还没有部署HPA,</span><br><span class="line">[root@master01 kubernetes]# kubectl get hpa</span><br><span class="line">No resources found <span class="keyword">in</span> default namespace.</span><br><span class="line"></span><br><span class="line">4、刚刚部署了Metics Server，hpa才是扩容的东西，所以现在编写资源清单</span><br><span class="line">编写HPA监控资源扩容php的Deployment</span><br><span class="line">kubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# vim php-hpa.yml</span><br><span class="line">apiVersion: <span class="string">&quot;autoscaling/v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;HorizontalPodAutoscaler&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: php-apache</span><br><span class="line">  namespace: default</span><br><span class="line">spec: </span><br><span class="line">  <span class="comment">#自动扩容最大扩到多少</span></span><br><span class="line">  maxReplicas: 8</span><br><span class="line">  <span class="comment">#自动扩容最大扩到多少</span></span><br><span class="line">  minReplicas: 1</span><br><span class="line">  scaleTargetRef:</span><br><span class="line">    apiVersion: apps/v1</span><br><span class="line">    kind: Deployment</span><br><span class="line">    name: php-apache</span><br><span class="line">  targetCPUUtilizationPercentage: 50</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">5、启动hpa资源</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f php-hpa.yml</span><br><span class="line">[root@master01 kubernetes]# kubectl get hpa</span><br><span class="line">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   0%/50%    1         8         1          16s</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#你想让哪个Deployment控制器自动扩缩容，就要谁的HPA资源清单，wordpress自动扩缩容，就要写wordpress的HPA资源监控wordpress</span></span><br><span class="line"></span><br><span class="line">apiVersion: <span class="string">&quot;autoscaling/v1&quot;</span>           <span class="comment">#HPA接口</span></span><br><span class="line">kind: <span class="string">&quot;HorizontalPodAutoscaler&quot;</span>        <span class="comment">#HPA资源类型</span></span><br><span class="line">metadata:                              <span class="comment">#HPA元数据</span></span><br><span class="line">  name: php-apache                     <span class="comment">#HPA资源名</span></span><br><span class="line">  namespace: default                   <span class="comment">#名称空间</span></span><br><span class="line">spec:                                  <span class="comment">#HPA控制信息</span></span><br><span class="line">  maxReplicas: 8                       <span class="comment">#最多扩容8个副本         </span></span><br><span class="line">  minReplicas: 1                       <span class="comment">#最少扩容1个副本</span></span><br><span class="line">  scaleTargetRef:                      <span class="comment">#HPA关联控制器</span></span><br><span class="line">    apiVersion: apps/v1                <span class="comment">#控制器的接口</span></span><br><span class="line">    kind: Deployment                   <span class="comment">#控制器类型</span></span><br><span class="line">    name: php-apache                   <span class="comment">#控制器名字</span></span><br><span class="line">  targetCPUUtilizationPercentage: 50   <span class="comment">#CPU使用率达到50%则扩容</span></span><br></pre></td></tr></table></figure><p>4、压测</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1、查看需要压测的pod的ip</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -owide</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE     IP          NODE</span><br><span class="line">php-apache-869dfddb74-qgffj     1/1     Running   0          28m     10.2.3.90   node03</span><br><span class="line"></span><br><span class="line">2、写循环脚本压测</span><br><span class="line">打开2个窗口，执行如下命令，压测效果就比较明显</span><br><span class="line">[root@master01 kubernetes]# <span class="keyword">while</span> <span class="literal">true</span> ;<span class="keyword">do</span> curl 10.2.3.90;<span class="built_in">sleep</span> 0.2;<span class="keyword">done</span></span><br><span class="line">OK!OK!OK!OK!OK!OK!OK!OK!OK</span><br><span class="line"></span><br><span class="line">3、再开一个master窗口，查看cup的使用率，需要等待一下下，才可以看到cpu变化</span><br><span class="line">[root@master01 ~]# kubectl get hpa -w</span><br><span class="line">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   0%/50%    1         8         1          6m37s</span><br><span class="line">php-apache   Deployment/php-apache   386%/50%   1         8         1          8m38s</span><br><span class="line">php-apache   Deployment/php-apache   386%/50%   1         8         4          8m53s</span><br><span class="line">php-apache   Deployment/php-apache   386%/50%   1         8         8          9m9s</span><br><span class="line">php-apache   Deployment/php-apache   103%/50%   1         8         8          9m39s</span><br><span class="line"></span><br><span class="line">4、再开一个窗口，查看pod的副本数量，可以看到，cpu使用率增加，pod的副本增加，此时已经增加到8个了</span><br><span class="line">[root@master01 ~]# kubectl get pod</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">php-apache-869dfddb74-2x25m     1/1     Running   0          64s</span><br><span class="line">php-apache-869dfddb74-884jw     1/1     Running   0          79s</span><br><span class="line">php-apache-869dfddb74-m6vb7     1/1     Running   0          64s</span><br><span class="line">php-apache-869dfddb74-mck7s     1/1     Running   0          64s</span><br><span class="line">php-apache-869dfddb74-mg9pf     1/1     Running   0          79s</span><br><span class="line">php-apache-869dfddb74-qgffj     1/1     Running   0          35m</span><br><span class="line">php-apache-869dfddb74-t49wf     1/1     Running   0          64s</span><br><span class="line">php-apache-869dfddb74-xdtv6     1/1     Running   0          79s</span><br><span class="line"></span><br><span class="line">5、停止压测命令，稍等一会，查看pod的副本数量，可以看到，cpu使用率减少，pod数量减少，变成1个pod</span><br><span class="line">[root@master01 ~]# kubectl get pod</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">php-apache-869dfddb74-884jw     1/1     Running   0          8m54s</span><br><span class="line"></span><br><span class="line">压力减小没有立马缩容，就像搞大活动618，用户量有一部分买完产品了，如果突然又上了产品就不会缩容。这个设计很合理的，他会觉得没有什么大流量，就会缩容</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文档将引导你完成启 HPA以自动管理示例 Web 应用程序的扩缩案例</summary>
    
    
    
    <category term="k8s" scheme="https://www.fomal.cc/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>🍉8、Service资源</title>
    <link href="https://www.fomal.cc/posts/b92e2a5d.html"/>
    <id>https://www.fomal.cc/posts/b92e2a5d.html</id>
    <published>2024-10-02T06:32:47.000Z</published>
    <updated>2024-10-02T07:56:03.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Service资源">Service资源</h2><p>没有service资源，想要访问服务，需要在防火墙做端口转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">1、起一个pod资源</span><br><span class="line">[root@master01 kubernetes]# vim nginx.yml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-test</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container-v2</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="comment">#端口映射</span></span><br><span class="line">    ports:</span><br><span class="line">    - name: http-port</span><br><span class="line">    <span class="comment">#容器的80端口映射到宿主机的8081端口</span></span><br><span class="line">      containerPort: 80</span><br><span class="line">      hostPort: 8081</span><br><span class="line"></span><br><span class="line">2、运行</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx.yml </span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -owide</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE     IP          NODE  </span><br><span class="line">nginx-test                    1/1     Running   0          46s     10.2.3.96   node03</span><br><span class="line"></span><br><span class="line">3、pod起来了，并且运行在node03节点上，查看node03的端口，看不到8081端口，可以浏览器直接访问，能够访问到nginx主页面</span><br><span class="line">10.0.0.203:8081</span><br><span class="line"></span><br><span class="line">4、因为防火墙在底层做了端口转发，是看不到的，只要访问到node03的8081端口，会自动转发转发到容器里的80端口</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果如上端口转发一般不使用，映射的端口看不到</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用控制器启动POD时，无法多个POD绑定同一个端口，而且每次pod起来，ip会发生变化</span></span><br><span class="line">[root@master01 kubernetes]# <span class="built_in">cat</span> nginx-dp.yaml</span><br><span class="line">apiVersion: <span class="string">&quot;apps/v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Deployment&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-dp</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  replicas: 10</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      run: nginx-dp</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx-pod</span><br><span class="line">      namespace: default</span><br><span class="line">      labels:</span><br><span class="line">        run: nginx-dp</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx-container</span><br><span class="line">        image: nginx:alpine</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - name: http-port</span><br><span class="line">          containerPort: 80</span><br><span class="line">          hostPort: 8081</span><br><span class="line"></span><br><span class="line"><span class="comment">#报错端口被占用</span></span><br><span class="line">[root@master01 kubernetes]# kubectl describe pod nginx-dp-69c9d4dbc5-9xp64</span><br><span class="line">Warning FailedScheduling 44s default-scheduler 0/4 nodes are available: 1 node(s) had taint &#123;node-role.kubernetes.io/master: &#125;, that the pod didn<span class="string">&#x27;t tolerate, 3 node(s) didn&#x27;</span>t have free ports <span class="keyword">for</span> the requested pod ports.</span><br><span class="line">Warning FailedScheduling 44s default-scheduler 0/4 nodes are available: 1 node(s) had taint &#123;node-role.kubernetes.io/master: &#125;, that the pod didn<span class="string">&#x27;t tolerate, 3 node(s) didn&#x27;</span>t have free ports <span class="keyword">for</span> the requested pod ports.</span><br></pre></td></tr></table></figure><h3 id="1、Service资源介绍"><strong>1、Service资源介绍</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   通过前面的实验我们已经掌握了使用Pod控制器来管理Pod，我们也会发现，Pod的生命周期非常短暂，每次镜像升级都会销毁以及创建，而我们知道每个Pod都拥有自己的IP地址，并且随着Pod删除和创建，这个IP是会变化的。</span><br><span class="line">当我们的Pod数量非常多的时候前端的入口服务该怎么知道后面都有哪些Pod呢？</span><br><span class="line">为了解决这个问题k8s提供了一个对象Service和三种IP，创建的Service资源通过标签可以动态的知道后端的Pod的IP地址，在PodIP之上设计一个固定的IP，也就是ClusterIP，然后使用NodePort来对外暴露端口提供访问。</span><br><span class="line">接下来我们先认识一下K8s里的三种IP及其作用。</span><br></pre></td></tr></table></figure><p><strong>K8s使用的三种IP</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、nodes IP：宿主机的IP</span><br><span class="line">2、Pod IP：容器的IP地址</span><br><span class="line">3、Cluster IP：容器的负载均衡IP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Service资源涉及到的IP和网络</span></span><br><span class="line">ClusterIP：IP地址</span><br><span class="line">NodePort：端口</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240924175240230.png" alt="image-20240924175240230"></p><h3 id="2、ClusterIP的资源"><strong>2、ClusterIP的资源</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果要起一个service资源，就必须先起一个Pod,再给POD打上Cluster IP</span></span><br><span class="line"></span><br><span class="line">1、需要先起一个Deployment控制器资源</span><br><span class="line">[root@master01 service]# vim nginx-dp.yaml</span><br><span class="line">apiVersion: <span class="string">&quot;apps/v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Deployment&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deploy</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      run: nginx-deploy</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx-pod</span><br><span class="line">      namespace: default</span><br><span class="line">      labels:</span><br><span class="line">        run: nginx-deploy</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx-container</span><br><span class="line">        image: nginx:alpine</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line"></span><br><span class="line">[root@master01 service]# kubectl apply -f nginx-dp.yaml</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deploy-545f948568-66bjf   1/1     Running   0          5s</span><br><span class="line">nginx-deploy-545f948568-f5mhc   1/1     Running   0          5s</span><br><span class="line">nginx-deploy-545f948568-vmkpz   1/1     Running   0          5s</span><br><span class="line"><span class="comment">#现在访问，就相当于访问web01、web02、web03，但是前面没有加lb01,接下来就写Cluster资源清单，就相当于lb01</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、写Cluster资源清单,这个资源清单要给上面的3个pod打一个负载均衡的Cluster IP</span><br><span class="line">[root@master01 service]# vim nginx-svc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-svc</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line"><span class="comment">#你的service起的cluster IP要给哪个pod绑定，就相当于标签选择器，这里的标签要和pod的标签一样</span></span><br><span class="line">  selector:</span><br><span class="line">    run: nginx-deploy</span><br><span class="line">  ports:</span><br><span class="line">  - name: http-nginx</span><br><span class="line">  <span class="comment">#宿主机里映射的端口</span></span><br><span class="line">    port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    <span class="comment">#容器的的端口</span></span><br><span class="line">    targetPort: 80</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master01 service]# kubectl apply -f nginx-svc.yaml</span><br><span class="line"></span><br><span class="line">3、查看svc详细信息</span><br><span class="line">[root@master01 kubernetes]# kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubernetes   ClusterIP   10.1.0.1       &lt;none&gt;        443/TCP   11d  <span class="comment">#这个是k8s创建的svc</span></span><br><span class="line">nginx-svc    ClusterIP   10.1.168.150   &lt;none&gt;        80/TCP    8h</span><br><span class="line">[root@master01 kubernetes]# curl 10.1.168.150</span><br><span class="line">curl 一下，如果通了，这个负载均衡就做好了</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意，如果curl不通，不要着急，先curl一下POd的ip是否能通，通过可以通，那就是svc的请求无法到达pod,可能是iptables防火墙阻止了，可以在前面加ingress，如果在浏览器里面可以访问，那么ingress能正常对外提供服务，就没问题</span></span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl describe svc nginx-svc</span><br><span class="line">Name:              nginx-svc</span><br><span class="line">Namespace:         default</span><br><span class="line">Labels:            &lt;none&gt;</span><br><span class="line">Annotations:       &lt;none&gt;</span><br><span class="line">Selector:          run=nginx-deploy</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP:                10.1.168.150     <span class="comment">#serivice资源的ip</span></span><br><span class="line">Port:              http-nginx  80/TCP</span><br><span class="line">TargetPort:        80/TCP</span><br><span class="line">Endpoints:         10.2.1.52:80,10.2.2.46:80,10.2.3.111:80</span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240925231650457.png" alt="image-20240925231650457"></p><p>同一个名称空间通信的方法：通过ping server资源名 进行通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">4、随便起一个有ping命令的pod，并进入pod</span><br><span class="line">[root@master01 kubernetes]# vim c7.yml </span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Pod&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: c7-nginx</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: c7-container</span><br><span class="line">    image: centos:7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;tail -f /etc/hosts&quot;</span>]</span><br><span class="line">    </span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f c7.yml </span><br><span class="line"></span><br><span class="line">5、连接进入容器,ping serivice资源的ip和serivice资源的名字</span><br><span class="line">[root@master01 service]# kubectl <span class="built_in">exec</span> -it c7-nginx -c c7-container -- /bin/bash</span><br><span class="line">[root@c7-nginx /]# ping  10.1.189.201</span><br><span class="line">[root@c7-nginx /]# ping  nginx-svc</span><br><span class="line">可以ping</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240924195940632.png" alt="image-20240924195940632"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 prometheus]# kubectl get pod -n kube-system</span><br><span class="line">NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-6d56c8448f-85k2r           1/1     Running   2          13d</span><br><span class="line">coredns-6d56c8448f-h697m           1/1     Running   2          8d</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">#流程梳理：</span></span><br><span class="line">1、因为我们有2个coredns服务器，他会帮我们做一个域名解析</span><br><span class="line">2、啥时候做域名解析呢？</span><br><span class="line">当你apply起一个svc时，当svc起来了后，他会把10.1.189.201  nginx-svc(serivice资源的ip和serivice资源的名字)绑定到那2个dns服务器里面，做一个域名解析</span><br><span class="line"></span><br><span class="line">起了一个pod，pod里面有dns的配置，里面有一个ip,是service的ip,这个起在kube-system名称空间里面的</span><br><span class="line"></span><br><span class="line">[root@master01 prometheus]# kubectl get svc -n kube-system</span><br><span class="line">NAME             TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">kube-dns         ClusterIP   10.1.0.10     &lt;none&gt;        53/UDP,53/TCP,9153/TCP   13d</span><br><span class="line">metrics-server   ClusterIP   10.1.11.158   &lt;none&gt;        443/TCP                  2d13h</span><br><span class="line">[root@master01 kubernetes]# kubectl describe svc -n kube-system kube-dns</span><br><span class="line">Name:              kube-dns</span><br><span class="line">Namespace:         kube-system</span><br><span class="line">Labels:            k8s-app=kube-dns</span><br><span class="line">                   kubernetes.io/cluster-service=<span class="literal">true</span></span><br><span class="line">                   kubernetes.io/name=KubeDNS</span><br><span class="line">Annotations:       prometheus.io/port: 9153</span><br><span class="line">                   prometheus.io/scrape: <span class="literal">true</span></span><br><span class="line">Selector:          k8s-app=kube-dns</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP:                10.1.0.10</span><br><span class="line">Port:              dns  53/UDP</span><br><span class="line">TargetPort:        53/UDP</span><br><span class="line">Endpoints:         10.2.1.5:53,10.2.2.7:53</span><br><span class="line">Port:              dns-tcp  53/TCP</span><br><span class="line">TargetPort:        53/TCP</span><br><span class="line">Endpoints:         10.2.1.5:53,10.2.2.7:53</span><br><span class="line">Port:              metrics  9153/TCP</span><br><span class="line">TargetPort:        9153/TCP</span><br><span class="line">Endpoints:         10.2.1.5:9153,10.2.2.7:9153</span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240926232750951.png" alt="image-20240926232750951"></p><p><img src="../image/study_img/image-20240926233119633.png" alt="image-20240926233119633"></p><p>不名称空间通信的方法：ping service的名字.service的名称空间.svc.cluster.local</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1、随便起一个有ping命令的pod，并进入pod</span><br><span class="line">[root@master01 kubernetes]# vim c7.yml </span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Pod&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: c7-test</span><br><span class="line">  <span class="comment">#这里指定一个名称空间</span></span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: c7-container</span><br><span class="line">    image: centos:7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;tail -f /etc/hosts&quot;</span>]</span><br><span class="line">    </span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f c7.yml </span><br><span class="line"></span><br><span class="line">5、连接进入容器,ping serivice资源的ip和serivice资源的名字</span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it c7-test -n  kube-system -- /bin/bash</span><br><span class="line">[root@c7-test /]# ping nginx-svc</span><br><span class="line">ping: nginx-svc: Name or service not known</span><br><span class="line"><span class="comment">#ping资源名，无法通，说明不在同一个名称空间是做网络隔离的，不在同一个pod不能用service通信</span></span><br><span class="line"></span><br><span class="line">[root@c7-nginx /]# ping  10.1.189.201</span><br><span class="line">ip可以通，但是ip通没啥用，ip会发生变化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果有时候，就是想要不同名称空间的通信，就像阿里云买机器，把网络打通内网的需求，打通内外这种事，k8s也能做</span></span><br><span class="line">ping service的名字.service的名称空间.svc.cluster.local</span><br><span class="line"> </span><br><span class="line">[root@c7-test /]# ping nginx-svc.default.svc.cluster.local</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#原理：</span></span><br><span class="line">1、首先起了一个c7-test的pod，里面有dns服务器的配置</span><br><span class="line">[root@c7-test /]# <span class="built_in">cat</span> /etc/resolv.conf</span><br><span class="line">nameserver 10.1.0.10</span><br><span class="line">search kube-system.svc.cluster.local svc.cluster.local cluster.local</span><br><span class="line">options ndots:5</span><br><span class="line"></span><br><span class="line">2、10.1.0.10这个ip是一个svc的ip,不过这个svc起在kube-system这个名称空间里</span><br><span class="line">[root@master01 prometheus]# kubectl get svc -n kube-system</span><br><span class="line">NAME             TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">kube-dns         ClusterIP   10.1.0.10     &lt;none&gt;        53/UDP,53/TCP,9153/TCP   13d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl describe svc -n kube-system kube-dns</span><br><span class="line">Name:              kube-dns</span><br><span class="line">Namespace:         kube-system</span><br><span class="line">Labels:            k8s-app=kube-dns</span><br><span class="line">                   kubernetes.io/cluster-service=<span class="literal">true</span></span><br><span class="line">                   kubernetes.io/name=KubeDNS</span><br><span class="line">Annotations:       prometheus.io/port: 9153</span><br><span class="line">                   prometheus.io/scrape: <span class="literal">true</span></span><br><span class="line">Selector:          k8s-app=kube-dns</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP:                10.1.0.10</span><br><span class="line">Port:              dns  53/UDP</span><br><span class="line">TargetPort:        53/UDP</span><br><span class="line">Endpoints:         10.2.1.5:53,10.2.2.7:53</span><br><span class="line">Port:              dns-tcp  53/TCP</span><br><span class="line">TargetPort:        53/TCP</span><br><span class="line">Endpoints:         10.2.1.5:53,10.2.2.7:53</span><br><span class="line">Port:              metrics  9153/TCP</span><br><span class="line">TargetPort:        9153/TCP</span><br><span class="line">Endpoints:         10.2.1.5:9153,10.2.2.7:9153</span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br></pre></td></tr></table></figure><p>以后pod与pod的通信流程图</p><p><img src="../image/study_img/image-20240927194820715.png" alt="image-20240927194820715"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">但是现在光用Cluster ip是没啥用的，会发现Cluster ip的ip在浏览器无法访问，因为他是一个内网ip,想要这个ip能够访问，还需要在宿主机上做一个NodePort 端口映射，映射到clusterip</span><br></pre></td></tr></table></figure><h3 id="3、NodePort资源-做端口映射"><strong>3、NodePort资源    做端口映射</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果要起一个service资源，就必须先起一个Pod,再给POD打上NodePort</span></span><br><span class="line"></span><br><span class="line">1、需要先起一个Deployment控制器资源</span><br><span class="line">[root@master01 service]# vim nginx-dp.yaml</span><br><span class="line">apiVersion: <span class="string">&quot;apps/v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Deployment&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deploy</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      run: nginx-deploy</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx-pod</span><br><span class="line">      namespace: default</span><br><span class="line">      labels:</span><br><span class="line">        run: nginx-deploy</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx-container</span><br><span class="line">        image: nginx:alpine</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx-dp.yml</span><br><span class="line"></span><br><span class="line">2、编写nodeport资源清单   写发和clusterip一样，就把后面的<span class="built_in">type</span>换一下</span><br><span class="line">[root@master01 service]# vim nginx-svc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-svc</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    run: nginx-deploy</span><br><span class="line">  ports:</span><br><span class="line">  - name: http-nginx</span><br><span class="line">    port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">    <span class="comment">#映射到宿主机30000的端口</span></span><br><span class="line">    nodePort: 30000</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  </span><br><span class="line">3、删除上一个实验的nginx-svc资源，运行本次编写的资源清单  </span><br><span class="line">[root@master01 service]# kubectl delete service nginx-svc</span><br><span class="line">service <span class="string">&quot;nginx-svc&quot;</span> deleted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master01 service]# kubectl apply -f nginx-svc.yml </span><br><span class="line">[root@master01 service]# kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP   10.1.0.1      &lt;none&gt;        443/TCP        11d</span><br><span class="line">nginx-svc    NodePort    10.1.171.27   &lt;none&gt;        80:30000/TCP   63s</span><br><span class="line"><span class="comment">#把cluster ip的80端口，映射到宿主机的30000</span></span><br><span class="line">他起NodePort也帮你起一个cluster ip,也就是说NodePort也包含cluster ip,所以以后起的时候就不需要单独起cluster ip的资源了</span><br><span class="line"></span><br><span class="line">3、连接进入容器,ping serivice资源的名字,可以ping通</span><br><span class="line">[root@master01 service]# kubectl <span class="built_in">exec</span> -it c7-nginx -c c7-container -- /bin/bash</span><br><span class="line">[root@c7-nginx /]# ping  nginx-svc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#将拥有同一个标签的pod分为一组 对外映射端口（30000-65535） 进行负载 </span></span><br><span class="line">宿主机 30000 --- &gt; serIP:80 -----&gt; podip:80</span><br><span class="line"></span><br><span class="line"><span class="comment">## NodePort端口范围：30000-32767</span></span><br><span class="line">The Service <span class="string">&quot;nginx-svc&quot;</span> is invalid: spec.ports[0].nodePort: Invalid value: 80:provided port is not <span class="keyword">in</span> the valid range. The range of valid ports is 30000-32767</span><br><span class="line"></span><br><span class="line">现在使用浏览器访问，可以访问到nginx主页面</span><br><span class="line">10.0.0.200:30000</span><br><span class="line">10.0.0.201:30000</span><br><span class="line">10.0.0.202:30000</span><br><span class="line">10.0.0.203:30000</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个和k8s的组件kube-proxy有关，只要有kube-proxy的机器都会做端口映射出来，底层做一个转发，kube-proxy在启动的时候使用的是DaemonSet，每个机器都会起</span></span><br><span class="line">kube-proxy提供的30000端口</span><br><span class="line">[root@master01 kubernetes]# netstat -lntup|grep 30000</span><br><span class="line">tcp        0      0 0.0.0.0:30000           0.0.0.0:*               LISTEN      96411/kube-proxy </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：</span></span><br><span class="line">端口范围是30000~32767，不太好用，所以以后不行NodePort，写cluster ip就可以，不要NodePort，就可以不用kube-proxy，我们会用ingress取代</span><br></pre></td></tr></table></figure><h3 id="4、Ingress资源介绍"><strong>4、Ingress资源介绍</strong></h3><p>NodePort的缺点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.没有ingress之前，pod对外提供服务只能通过NodeIP:NodePort的形式，但是这种形式有缺点，一个节点上的Port不能重复利用。比如某个服务占用了80端口，那么其他服务就不能在用这个端口了。</span><br><span class="line"></span><br><span class="line">2.NodePort是4层代理，不能解析7层的http，不能通过域名区分流量</span><br><span class="line"></span><br><span class="line">3.为了解决这个问题，我们需要用到资源控制器叫Ingress，作用就是提供一个统一的访问入口。工作在7层</span><br><span class="line"></span><br><span class="line">4.虽然我们可以使用nginx/haproxy来实现类似的效果，但是传统部署不能动态的发现我们新创建的资源，必须手动修改配置文件并重启。</span><br><span class="line"></span><br><span class="line">5.适用于k8s的ingress控制器主流的有nginx-ingress、traefik、haproxy-ingress</span><br></pre></td></tr></table></figure><p>Ingress控制器<br>1）[AKS 应用网关Ingres控制器] 使用 Azure应用程序网关启用AKS集群ingress。<br>2）mbassador API网关，一个基于Envoy的Ingress控制器，有着来自社区的支持和来自Datawire的商业支持。<br>3）AppsCode Inc 为最广泛使用的基于HAproxy的Ingress控制器Voyager提供自持和维护。<br>4）AWS ALB Ingress控制器，通过AWS应用Load Balancer启用Ingress。<br>5）Contour是一个基于Envoy的Ingress控制器，它由VMware提供和支持。<br>6）Citrix为其硬件（MPX），虚拟化（VPX）和免费容器化（CPX）ADC提供了一个Ingress控制器，用于裸金属和云部署。<br>7）F5 Networks为用于Kubernetes的F5 BIG-IP控制器提供支持和维护。<br>8）Gloo是一个开源的基于Envoy的Ingress控制器，它提供了API网关功能，有着来自solo.io的企业级支持。<br>9）HAproxy Ingress是HAproxy高度可定制的、由社区驱动的Ingress控制器。<br>10）HAproxy Technologies为用于Kubernetes的HAproxy Ingress控制器提供支持和维护，具体信息请参考官方文档。<br>11）基于Istio的ingress控制器，控制Ingress流量。<br>12）Kong为用于Kubernetes的Kong Ingress控制器提供社区或商业支持和维护。<br>14）Nginx 为用于Kubernetes的Nginx Ingress控制器提供支持和维护<br>15）Traefik（小蜜蜂）是一个全功能的Ingress控制器。（Let’s Encrypt，secrets，http2，websocket）并且它也有Traefik Labs的商业支持</p><p><img src="../image/study_img/image-20240924121232376.png" alt="image-20240924121232376"></p><p>1、部署nginx-ingress</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/kubeguide</span><br><span class="line">权威指南的资源清单网址：https://github.com/kubeguide/K8sDefinitiveGuide-V5-Sourcecode/blob/main/Chapter04/4.6.1%20nginx-ingress-controller.yaml</span><br><span class="line"></span><br><span class="line">1、下载权威指南的资源清单 ingress资源清单</span><br><span class="line">[root@master01 service]# vim nginx-ingress.yaml</span><br><span class="line">把复制的资源清单粘贴</span><br><span class="line">135行： kind: Deployment 改为 kind: DaemonSet</span><br><span class="line">130行：  删除 data:</span><br><span class="line">140行：  删除 replicas: 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#这2行是给node打标签的，只有打了标签才装在node上面，要么注释这两行，要么给node打标签     节点标签选择器</span></span><br><span class="line">147行：      nodeSelector:</span><br><span class="line">148行：        role: ingress-nginx-controller</span><br><span class="line"></span><br><span class="line"><span class="comment">#建议复制之后粘贴在VScode里面，格式不会出错</span></span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240924213753073.png" alt="image-20240924213753073"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">2、给node节点打上标签</span><br><span class="line">[root@master01 kubernetes]# kubectl label node node01 role=ingress-nginx-controller</span><br><span class="line">node/node01 labeled</span><br><span class="line">[root@master01 kubernetes]# kubectl label node node02 role=ingress-nginx-controller</span><br><span class="line">node/node02 labeled</span><br><span class="line">[root@master01 kubernetes]# kubectl label node node03 role=ingress-nginx-controller</span><br><span class="line">node/node03 labeled</span><br><span class="line"></span><br><span class="line">3、运行资源清单</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx-ingress.yaml</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -n nginx-ingress -owide</span><br><span class="line">NAME                  READY   STATUS    RESTARTS   AGE     IP          NODE  </span><br><span class="line">nginx-ingress-hrn5v   1/1     Running   0          2m16s   10.2.3.98   node03</span><br><span class="line">nginx-ingress-hsvgc   1/1     Running   0          2m16s   10.2.1.45   node01</span><br><span class="line">nginx-ingress-tzsht   1/1     Running   0          2m16s   10.2.2.40   node02</span><br></pre></td></tr></table></figure><p>2、使用ingress启动自己的站点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">1、为避免数据库有脏数据，先删除节点上之前映射的数据库目录</span><br><span class="line">[root@node01 ~]#  <span class="built_in">rm</span> -rf /data/</span><br><span class="line">[root@node02 ~]#  <span class="built_in">rm</span> -rf /data/</span><br><span class="line">[root@node03 ~]#  <span class="built_in">rm</span> -rf /data/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、# wordpress pod    起Deployment资源</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f wp-dp-v1.yml </span><br><span class="line">apiVersion: <span class="string">&quot;apps/v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Deployment&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: wp-dp</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line"><span class="comment">#起2个，数据也是2个，除非把数据分开</span></span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">    <span class="comment">#这里的标签一定要和svc的标签一样，不然会连接不到</span></span><br><span class="line">      app: wp</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: wp-pod</span><br><span class="line">      namespace: default</span><br><span class="line">      labels:</span><br><span class="line">        app: wp</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: mysql-data</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /data/mysql</span><br><span class="line">      - name: wp-data</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /data/wp</span><br><span class="line"></span><br><span class="line">      containers:</span><br><span class="line">      - name: wp-container</span><br><span class="line">        image: wordpress</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        <span class="comment">#livenessProbe:</span></span><br><span class="line">        <span class="comment">#  tcpSocket:</span></span><br><span class="line">        <span class="comment">#    port: 80</span></span><br><span class="line">        <span class="comment">#  initialDelaySeconds: 10</span></span><br><span class="line">        <span class="comment">#  periodSeconds: 3</span></span><br><span class="line">        <span class="comment">#  timeoutSeconds: 3</span></span><br><span class="line">        <span class="comment">#  failureThreshold: 3</span></span><br><span class="line">        readinessProbe:</span><br><span class="line">          tcpSocket:</span><br><span class="line">            port: 3306</span><br><span class="line">          initialDelaySeconds: 3</span><br><span class="line">          timeoutSeconds: 1</span><br><span class="line">          periodSeconds: 2</span><br><span class="line">          successThreshold: 3</span><br><span class="line">          failureThreshold: 3</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: WORDPRESS_DB_HOST</span><br><span class="line">          value: <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_USER</span><br><span class="line">          value: <span class="string">&#x27;wp_user&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_NAME</span><br><span class="line">          value: <span class="string">&#x27;wp_db&#x27;</span></span><br><span class="line">        </span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: wp-data</span><br><span class="line">          mountPath: /var/www/html/</span><br><span class="line">    </span><br><span class="line">      - name: mysql-container</span><br><span class="line">        image: mysql:5.7</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        args:</span><br><span class="line">        - --character-set-server=utf8</span><br><span class="line">        - --collation-server=utf8_general_ci</span><br><span class="line">        livenessProbe:</span><br><span class="line">          <span class="built_in">exec</span>:</span><br><span class="line">            <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;mysqladmin -uroot -p123 ping&quot;</span>]</span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          periodSeconds: 3</span><br><span class="line">          timeoutSeconds: 3</span><br><span class="line">          failureThreshold: 3</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        - name: MYSQL_DATABASE</span><br><span class="line">          value: <span class="string">&#x27;wp_db&#x27;</span></span><br><span class="line">        - name: MYSQL_USER</span><br><span class="line">          value: <span class="string">&#x27;wp_user&#x27;</span></span><br><span class="line">        - name: MYSQL_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: mysql-data</span><br><span class="line">          mountPath: /var/lib/mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、# wordpress service</span><br><span class="line">[root@master01 kubernetes]# vim wp-svc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: wordpress-svc</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">  <span class="comment">#这里的标签一定要和pod-dp的标签一样，不然会连接不到</span></span><br><span class="line">    app: wp</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP</span><br><span class="line">  </span><br><span class="line">3、# 对外提供服务的wordpress ingress</span><br><span class="line">[root@master01 kubernetes]# vim wp-ingress.yaml</span><br><span class="line">---</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: wordpress-ingress</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  <span class="comment">#站点的域名</span></span><br><span class="line">  - host: blog.wp.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        pathType: ImplementationSpecific</span><br><span class="line">        <span class="comment">#backend之前的都是网站相关配置</span></span><br><span class="line">        <span class="comment">##从backend之后的都是ingress关联ClusterIP</span></span><br><span class="line">        backend:</span><br><span class="line">          service:</span><br><span class="line">          <span class="comment">#这里必须要写svc网站的名字</span></span><br><span class="line">            name: wordpress-svc</span><br><span class="line">            port:</span><br><span class="line">              number: 80</span><br><span class="line">              </span><br><span class="line">4、运行</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f wp-ingress.yml </span><br><span class="line">ingress.networking.k8s.io/wordpress-ingress created</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f wp-dp-v1.yml  </span><br><span class="line">pod/wp-pod created</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f wp-svc.yml </span><br><span class="line">service/wordpress-svc created</span><br><span class="line"></span><br><span class="line">5、查看</span><br><span class="line">[root@master01 kubernetes]# kubectl get ingress</span><br><span class="line">Warning: extensions/v1beta1 Ingress is deprecated <span class="keyword">in</span> v1.14+, unavailable <span class="keyword">in</span> v1.22+; use networking.k8s.io/v1 Ingress</span><br><span class="line">NAME                CLASS    HOSTS         ADDRESS   PORTS   AGE</span><br><span class="line">wordpress-ingress   &lt;none&gt;   blog.wp.com             80      13s</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl get svc</span><br><span class="line">wordpress-svc   ClusterIP   10.1.42.145    &lt;none&gt;        80/TCP         25s</span><br><span class="line">[root@master01 kubernetes]# kubectl describe svc wordpress-svc </span><br><span class="line">Name:              wordpress-svc</span><br><span class="line">Namespace:         default</span><br><span class="line">Labels:            &lt;none&gt;</span><br><span class="line">Annotations:       &lt;none&gt;</span><br><span class="line">Selector:          app=wp</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP:                10.1.84.160</span><br><span class="line">Port:              http  80/TCP</span><br><span class="line">TargetPort:        80/TCP</span><br><span class="line">Endpoints:         10.2.3.118:80  <span class="comment">#显示找到了pod ip</span></span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -owide</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE   IP           NODE  </span><br><span class="line">wp-dp-9d48b944b-z6snw           2/2     Running   0          22m   10.2.3.118   node03</span><br></pre></td></tr></table></figure><p>3、测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、本地机器做域名解析，ingress起在node节点上的，node节点的ip做谁的域名解析都可以</span><br><span class="line">10.0.0.201  blog.wp.com</span><br><span class="line"></span><br><span class="line">2、使用域名在浏览器访问成功，这就是ingress的相关，而且还是80端口，以后不管起多少个网站，都走80端口，但是node节点上看不到80端口的，只是在底层的防火墙做的转发</span><br><span class="line">blog.wp.com</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;3、iptables -F这个命令千万不要执行，他会清空iptables所有的转发配置&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240927230958071.png" alt="image-20240927230958071"></p><p><img src="../image/study_img/image-20240927231602977.png" alt="image-20240927231602977"></p><p>将域名解析改到其他node，也可以使用域名访问成功</p><p><img src="../image/study_img/image-20240927231929202.png" alt="image-20240927231929202"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">他到node节点的机器，转发到cluster ip上，cluster ip去访问pod，但我们的pod就一个pod，所以暂时没有日志显示是哪台机器转发的</span><br><span class="line"></span><br><span class="line">解析到哪，取决于哪些机器安装了ingress</span><br></pre></td></tr></table></figure><p>3、ingress资源解析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">spec:                                          <span class="comment">#转发规则</span></span><br><span class="line">  rules:                                       <span class="comment">#转发规则</span></span><br><span class="line">  <span class="comment">#站点的域名</span></span><br><span class="line">  - host: blog.wp.com                          <span class="comment">#匹配的域名</span></span><br><span class="line">    http:                                      <span class="comment">#基于http协议解析</span></span><br><span class="line">      paths:                                   <span class="comment">#基于路径进行匹配</span></span><br><span class="line">      - path: /                                <span class="comment">#匹配/路径</span></span><br><span class="line">        pathType: ImplementationSpecific       <span class="comment">#路径类型</span></span><br><span class="line">        backend:                               <span class="comment">#匹配后跳转的后端服务</span></span><br><span class="line">          service:                       <span class="comment">#设置后端跳转到Service的配置</span></span><br><span class="line">            name: wordpress-svc          <span class="comment">#跳转到名为wordpress-svc的ClusterIP</span></span><br><span class="line">            port:                              <span class="comment">#跳转到的端口</span></span><br><span class="line">              number: 80                       <span class="comment">#Service端口号</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># pathType路径类型支持的类型：</span></span><br><span class="line">ImplementationSpecific 系统默认，由IngressClass控制器提供</span><br><span class="line">Exact 精确匹配URL路径，区分大小写  相当于nginx配置文件的 location = /  ~ * 这种</span><br><span class="line">Prefix 匹配URL路径的前缀，区分大小写</span><br></pre></td></tr></table></figure><h3 id="5、Service服务发现"><strong>5、Service服务发现</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在k8s中，一个service对应的“后端”由Pod的IP和容器端口号组成，即一个完整的<span class="string">&quot;IP:Port&quot;</span>访问地址，这在k8s里叫做Endpoint。通过查看Service的详细信息可以看到后端Endpoint的列表。</span><br><span class="line">[root©node1 ~]# kubectl describe svc my-nginx</span><br><span class="line">Endpoints:  10.2.1.24:80,10.2.1.26:80,10.2.1.27:89 more...</span><br><span class="line"></span><br><span class="line">把一个pod删掉后，自动起来的就会自动加到cluster ip里</span><br></pre></td></tr></table></figure><p>我们也可以使用DNS域名的形式访问Service，如果在同一个命名空间里甚至可以直接使用service名来访问服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">servicename.namespace.svc.cluster.local</span><br><span class="line">servicename.namespace</span><br><span class="line">servicename</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240927183355537.png" alt="image-20240927183355537"></p>]]></content>
    
    
    <summary type="html">Service资源和k8s的三种IP</summary>
    
    
    
    <category term="k8s" scheme="https://www.fomal.cc/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>🍉9、Kubernetes持久化储存</title>
    <link href="https://www.fomal.cc/posts/a288ff46.html"/>
    <id>https://www.fomal.cc/posts/a288ff46.html</id>
    <published>2024-10-02T06:32:31.000Z</published>
    <updated>2024-10-02T07:56:03.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kubernetes持久化储存">Kubernetes持久化储存</h2><h3 id="1、K8s持久化储存介绍"><strong>1、K8s持久化储存介绍</strong></h3><p>​      之前接触hostpath、emptyDir的是本地储存，缺陷数据不能做到和其他机器共享</p><p>​       容器内部的的存储在生命周期是短暂的，会随着容器环境的销毁而销毁，具有不稳定性，在k8s里将对容器应用所需的存储资源抽象为存储卷(Volume)概念来解决这些问题。</p><p>K8s目前支持的Volume类型包括k8s的内部资源对象类型，开源共享存储类型和公有云存储等。分类如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#K8s特定的资源对象</span></span><br><span class="line">configMap：储存配置文件  (配置中心:nacos)</span><br><span class="line">Secret：储存加密数据，证书文件</span><br><span class="line">ServiceAccountToken：储存token数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#本地储存：pod起在哪，数据就在哪个机器</span></span><br><span class="line">EmptDir：临时储存(宿主机随机生成一个储存目录)</span><br><span class="line">HostPath：宿主机目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#网络共享储存</span></span><br><span class="line">CephFS：开源共享储存系统(现在用的比较多一些)</span><br><span class="line">ClusterFS：开源共享储存系统  FastDFS</span><br><span class="line">NFS：开源共享储存  (这个是单点，写脚本会卡主)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#PV共享存储：</span></span><br><span class="line">PersishtenVolumeClain：</span><br></pre></td></tr></table></figure><h3 id="2、本地储存——EmptyDir类型的挂载方式"><strong>2、本地储存——EmptyDir类型的挂载方式</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">1、编写Deployment控制器的资源清单</span><br><span class="line">[root@master01 kubernetes]# vim nginx-emptDir.yml</span><br><span class="line">apiVersion: <span class="string">&quot;apps/v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Deployment&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-dp</span><br><span class="line">  namespace: default</span><br><span class="line">spec: </span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: mysql-dp</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx-dp-pod</span><br><span class="line">      namespace: default</span><br><span class="line">      labels:</span><br><span class="line">        app: mysql-dp</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: mysql-emptydir</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      containers:</span><br><span class="line">      - name: mysql-container</span><br><span class="line">        image: mysql:5.7</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: mysql-emptydir</span><br><span class="line">          mountPath: /var/lib/mysql</span><br><span class="line"></span><br><span class="line">2、运行并查看</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx-emptDir.yml </span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -owide</span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE   IP           NODE  </span><br><span class="line">nginx-dp-67b5bd5fdc-kvjqh   1/1     Running   0          18s   10.2.3.119   node03</span><br><span class="line"></span><br><span class="line">3、node03查看挂载的数据</span><br><span class="line">[root@node03 ~]# docker inspect fb799f13d7e9</span><br><span class="line">[root@node03 ~]# ll /var/lib/kubelet/pods/9be94529-0040-4185-91c8-91b4b271d387/volumes/kubernetes.io~empty-dir/mysql-emptydir</span><br><span class="line">-rw-r----- 1 polkitd input       56 Sep 28 11:53 auto.cnf</span><br><span class="line">-rw------- 1 polkitd input     1680 Sep 28 11:53 ca-key.pem</span><br><span class="line">-rw-r--r-- 1 polkitd input     1112 Sep 28 11:53 ca.pem</span><br><span class="line">-rw-r--r-- 1 polkitd input     1112 Sep 28 11:53 client-cert.pem</span><br><span class="line">-rw------- 1 polkitd input     1680 Sep 28 11:53 client-key.pem</span><br><span class="line">-rw-r----- 1 polkitd input     1318 Sep 28 11:53 ib_buffer_pool</span><br><span class="line">-rw-r----- 1 polkitd input 79691776 Sep 28 11:53 ibdata1</span><br><span class="line">-rw-r----- 1 polkitd input 50331648 Sep 28 11:53 ib_logfile0</span><br><span class="line">-rw-r----- 1 polkitd input 50331648 Sep 28 11:53 ib_logfile1</span><br><span class="line">-rw-r----- 1 polkitd input 12582912 Sep 28 11:53 ibtmp1</span><br><span class="line">drwxr-x--- 2 polkitd input     4096 Sep 28 11:53 mysql</span><br><span class="line">lrwxrwxrwx 1 polkitd input       27 Sep 28 11:53 mysql.sock -&gt; /var/run/mysqld/mysqld.sock</span><br><span class="line">drwxr-x--- 2 polkitd input     8192 Sep 28 11:53 performance_schema</span><br><span class="line">-rw------- 1 polkitd input     1680 Sep 28 11:53 private_key.pem</span><br><span class="line">-rw-r--r-- 1 polkitd input      452 Sep 28 11:53 public_key.pem</span><br><span class="line">-rw-r--r-- 1 polkitd input     1112 Sep 28 11:53 server-cert.pem</span><br><span class="line">-rw------- 1 polkitd input     1680 Sep 28 11:53 server-key.pem</span><br><span class="line">drwxr-x--- 2 polkitd input     8192 Sep 28 11:53 sys</span><br></pre></td></tr></table></figure><h3 id="3、本地储存——hostpath类型"><strong>3、本地储存——hostpath类型</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">1、编写控制器的资源清单</span><br><span class="line">[root@master01 kubernetes]# vim nginx-hostpath.yml</span><br><span class="line">apiVersion: <span class="string">&quot;apps/v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Deployment&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-dp</span><br><span class="line">  namespace: default</span><br><span class="line">spec: </span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: mysql-dp</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx-dp-pod</span><br><span class="line">      namespace: default</span><br><span class="line">      labels:</span><br><span class="line">        app: mysql-dp</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: mysql-emptydir</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      - name: mysql-hostpath</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /opt/mysql</span><br><span class="line">      containers:</span><br><span class="line">      - name: mysql-container</span><br><span class="line">        image: mysql:5.7</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: mysql-hostpath</span><br><span class="line">          mountPath: /var/lib/mysql</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx-hostpath.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、共享储存——NFS类型"><strong>4、共享储存——NFS类型</strong></h3><p><img src="../image/study_img/image-20240928175642454.png" alt="image-20240928175642454"></p><p>1、部署NFS</p><p>环境准备</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th></tr></thead><tbody><tr><td>nfs</td><td>10.0.0.31  /  172.16.1.31</td><td></td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#NFS服务器不能起在Pod里的，储存类的几乎不会用pod去起的</span></span><br><span class="line"></span><br><span class="line">1、NFS服务安装NFS</span><br><span class="line">[root@nfs ~]# yum -y install nfs-utils</span><br><span class="line"></span><br><span class="line">2、node节点要挂载过去，所有node节点安装nfs</span><br><span class="line">[root@node01 ~]# yum -y install nfs-utils</span><br><span class="line">[root@node02 ~]# yum -y install nfs-utils</span><br><span class="line">[root@node03 ~]# yum -y install nfs-utils</span><br><span class="line"></span><br><span class="line">3、修改nfs服务器的配置文件</span><br><span class="line">[root@nfs ~]# vim /etc/exports</span><br><span class="line">/data/wp 172.16.1.0/24(rw,<span class="built_in">sync</span>,all_squash)</span><br><span class="line"></span><br><span class="line">4、创建挂载目录，并授权，启动服务</span><br><span class="line">[root@nfs ~]# <span class="built_in">mkdir</span> -p /data/wp</span><br><span class="line">[root@nfs ~]# <span class="built_in">chown</span> -R nfsnobody.nfsnobody /data/wp</span><br><span class="line">[root@nfs ~]# systemctl start nfs &amp;&amp; systemctl <span class="built_in">enable</span> nfs </span><br><span class="line"></span><br><span class="line">5、验证生效</span><br><span class="line">[root@nfs ~]# <span class="built_in">cat</span> /var/lib/nfs/etab </span><br><span class="line">/data/wp        172.16.1.0/24(rw,<span class="built_in">sync</span>,wdelay,hide,nocrossmnt,secure,root_squash,all_squash,no_subtree_check,secure_locks,acl,no_pnfs,anonuid=65534,anongid=65534,sec=sys,rw,secure,root_squash,all_squash)</span><br></pre></td></tr></table></figure><p>2、master编写wp挂载nfs的资源清单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line">1、编写wp的Deployment资源清单</span><br><span class="line">[root@master01 kubernetes]# vim wp-dp-v1.yml </span><br><span class="line">apiVersion: <span class="string">&quot;apps/v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Deployment&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: wp-dp</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line"><span class="comment">#起2个，数据也是2个，除非把数据分开</span></span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: wp</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: wp-pod</span><br><span class="line">      namespace: default</span><br><span class="line">      labels:</span><br><span class="line">        app: wp</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: wp-data</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /data/wp</span><br><span class="line"></span><br><span class="line">      <span class="comment">#-----------------挂载nfs的写法---------------------</span></span><br><span class="line">      <span class="comment">#最后一行挂载的名字要改一下</span></span><br><span class="line">      <span class="comment"># mount -t nfs 172.16.1.31:/data/wordpress /var/www/html</span></span><br><span class="line">      - name: wp-nfs    </span><br><span class="line">        nfs:</span><br><span class="line">      <span class="comment">#nfs服务器配置文件写的共享目录</span></span><br><span class="line">          path: /data/wp</span><br><span class="line">          readOnly: <span class="literal">false</span></span><br><span class="line">      <span class="comment">#server就是nfs服务的ip</span></span><br><span class="line">          server: 172.16.1.31</span><br><span class="line"></span><br><span class="line">      containers:</span><br><span class="line">      - name: wp-container</span><br><span class="line">        image: wordpress</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        <span class="comment">#livenessProbe:</span></span><br><span class="line">        <span class="comment">#  tcpSocket:</span></span><br><span class="line">        <span class="comment">#    port: 80</span></span><br><span class="line">        <span class="comment">#  initialDelaySeconds: 10</span></span><br><span class="line">        <span class="comment">#  periodSeconds: 3</span></span><br><span class="line">        <span class="comment">#  timeoutSeconds: 3</span></span><br><span class="line">        <span class="comment">#  failureThreshold: 3</span></span><br><span class="line">        <span class="comment">#readinessProbe:</span></span><br><span class="line">        <span class="comment">#  tcpSocket:</span></span><br><span class="line">        <span class="comment">#    host: mysql-svc</span></span><br><span class="line">        <span class="comment">#    port: 3306</span></span><br><span class="line">        <span class="comment">#  initialDelaySeconds: 3</span></span><br><span class="line">        <span class="comment">#  timeoutSeconds: 1</span></span><br><span class="line">        <span class="comment">#  periodSeconds: 2</span></span><br><span class="line">        <span class="comment">#  successThreshold: 3</span></span><br><span class="line">        <span class="comment">#  failureThreshold: 3</span></span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: WORDPRESS_DB_HOST</span><br><span class="line">          value: <span class="string">&#x27;mysql-svc&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_USER</span><br><span class="line">          value: <span class="string">&#x27;wp_user&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_NAME</span><br><span class="line">          value: <span class="string">&#x27;wp_db&#x27;</span></span><br><span class="line">        </span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: wp-nfs</span><br><span class="line">          mountPath: /var/www/html/</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f wp-dp-v1.yml </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、编写wp的Service资源</span><br><span class="line">[root@master01 kubernetes]# vim wp-svc.yml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: wordpress-svc</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: wp</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    <span class="comment">#这里临时为了测试，所以临时使用NodePort</span></span><br><span class="line">    targetPort: 80</span><br><span class="line">    nodePort: 30002</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  </span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f wp-svc.yml </span><br><span class="line">[root@master01 kubernetes]# kubectl get svc</span><br><span class="line">NAME            TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)     </span><br><span class="line">wordpress-svc   NodePort    10.1.84.160    &lt;none&gt;        80:30002/TCP</span><br><span class="line"></span><br><span class="line">3、编写mysql的Deployment资源</span><br><span class="line">[root@master01 kubernetes]# vim mysql-dp.yml </span><br><span class="line">apiVersion: <span class="string">&quot;apps/v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Deployment&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-dp</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: mysql-dp</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: mysql-pod</span><br><span class="line">      namespace: default</span><br><span class="line">      labels:</span><br><span class="line">        app: mysql-dp</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: mysql-emptydir</span><br><span class="line">        emptyDir: &#123;&#125; </span><br><span class="line">      - name: mysql-hostpath</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /opt/mysql</span><br><span class="line"></span><br><span class="line">      containers:</span><br><span class="line">      - name: mysql-container</span><br><span class="line">        image: mysql:5.7.44</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">          value: <span class="string">&quot;123&quot;</span></span><br><span class="line">        - name: MYSQL_DATABASE</span><br><span class="line">          value: <span class="string">&quot;wp_db&quot;</span></span><br><span class="line">        - name: MYSQL_USER</span><br><span class="line">          value: <span class="string">&quot;wp_user&quot;</span></span><br><span class="line">        - name: MYSQL_PASSWORD</span><br><span class="line">          value: <span class="string">&quot;123&quot;</span></span><br><span class="line">        </span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: mysql-hostpath</span><br><span class="line">          mountPath: /var/lib/mysql</span><br><span class="line">          </span><br><span class="line">[root@master01 kubernetes]#  kubectl apply -f mysql-dp.yml </span><br><span class="line"></span><br><span class="line">4、编写mysql的Service资源</span><br><span class="line">[root@master01 kubernetes]# vim mysql-svc.yml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-svc</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: mysql-dp</span><br><span class="line">  ports:</span><br><span class="line">  - name: mysql</span><br><span class="line">    port: 3306</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 3306</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP</span><br><span class="line">  </span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f mysql-svc.yml </span><br><span class="line">[root@master01 kubernetes]# kubectl get svc</span><br><span class="line">NAME            TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">mysql-svc       ClusterIP   10.1.47.161    &lt;none&gt;        3306/TCP       52s</span><br><span class="line">wordpress-svc   NodePort    10.1.84.160    &lt;none&gt;        80:30002/TCP   15h</span><br><span class="line"></span><br><span class="line">3、到nfs验证是否挂载成功</span><br><span class="line">[root@nfs ~]# ll /data/wp/</span><br><span class="line">-rw-r--r--  1 nfsnobody nfsnobody   405 Feb  6  2020 index.php</span><br><span class="line">-rw-r--r--  1 nfsnobody nfsnobody 19915 Jan  1  2024 ...</span><br><span class="line">-rw-r--r--  1 nfsnobody nfsnobody  3246 Mar  2  2024 xmlrpc.php</span><br><span class="line"></span><br><span class="line">4、浏览器访问</span><br><span class="line">k8s集群中随便一个节点都可以访问，上面说过，和kube-proxy有关</span><br><span class="line">10.0.0.200:30002</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240928141216598.png" alt="image-20240928141216598"></p><p>发布文章上传图片</p><p><img src="../image/study_img/image-20240928142403213.png" alt="image-20240928142403213"></p><p>nfs机器里面查看图片是否上传到挂载目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs ~]# ll /data/wp/wp-content/uploads/2024/09/</span><br><span class="line">total 512</span><br><span class="line">-rw-r--r-- 1 nfsnobody nfsnobody  74163 Sep 28 14:21 12-1024x758.jpg</span><br><span class="line">-rw-r--r-- 1 nfsnobody nfsnobody   6000 Sep 28 14:21 12-150x150.jpg</span><br><span class="line">-rw-r--r-- 1 nfsnobody nfsnobody  13125 Sep 28 14:21 12-300x222.jpg</span><br><span class="line">-rw-r--r-- 1 nfsnobody nfsnobody  50103 Sep 28 14:21 12-768x568.jpg</span><br><span class="line">-rw-r--r-- 1 nfsnobody nfsnobody 367277 Sep 28 14:21 12.jpg</span><br></pre></td></tr></table></figure><h3 id="5、PV和PVC的介绍"><strong>5、PV和PVC的介绍</strong></h3><p>PV是对底层网络共享存储的抽象，将共享存储定义为一种“资源”<br>PV由管理员创建和配置<br>PVC则是用户对存储资源的一个“申请”就像Pod消费Node的资源一样，<br>PVC能够&quot;消费&quot;PV资源PVC可以申请特定的存储空间和访问模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">就目前而言，挂载那台NFS主机磁盘有多大，就能储存多大，对占用没有做限制，</span><br><span class="line"></span><br><span class="line">PV,可以理解为nfs储存，一共20G，PV就是划分磁盘空间的东西，给储存资源划分空间，划分2G一块，3G一块...</span><br><span class="line"></span><br><span class="line">PVC,这个储存是一个大的园区，开发商把园区开发成房子，PVC就是购买别墅的人，想要多大，就申请多大(申请PV划分的资源空间)，</span><br><span class="line"></span><br><span class="line">PV划分储存，PVC绑定PV,pod使用指定的PVC</span><br></pre></td></tr></table></figure><p>pv和PVC的生命周期</p><p><img src="../image/study_img/image-20240925102733528.png" alt="image-20240925102733528"></p><p>PV和PVC需要注意的地方</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在PV的整个生命周期中，可能会处于4种不同的阶段:</span><br><span class="line"></span><br><span class="line">Avaliable(可用)：表示可用状态，还未被任何PVC绑定</span><br><span class="line">Bound(被绑定的)：表示PV已经被PVC绑定</span><br><span class="line">Released(已释放)：PVC被删除，但是资源还未被集群重新声明，被释放了，里面还有数据在，需要把数据删除或者备份，再把这个pv删除，重启起来，就会变成Avaliable状态</span><br><span class="line">Failed(失败)：表示该PV的自动回收失败</span><br></pre></td></tr></table></figure><p>PVC绑定PV的条件如下：</p><p>创建PVC之后，k8s就会去查找满足我们声明要求的PV比如storageClassName，accessModes以及容是这些是否满足要求，如果满足要求就将PV和PVC绑定在一起。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、storageClassName</span><br><span class="line">2、accessModes</span><br><span class="line">3、size</span><br></pre></td></tr></table></figure><p><font color=red>需要注意的是目前PV和PVC之间是一对一绑定的关系，也就是说一个PV只能被一个PVC绑定。</font>&gt;</p><p><img src="../image/study_img/image-20240925103145263.png" alt="image-20240925103145263"></p><h3 id="6、PV、PVC的资源清单"><strong>6、PV、PVC的资源清单</strong></h3><p>PV资源关键参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">capacity: PV存储的容量</span><br><span class="line">capacity: 5Gi <span class="comment">#划分磁盘空间5G</span></span><br><span class="line"></span><br><span class="line">accessModes: 访问模式,k8s支持的访问模式如下</span><br><span class="line">------------------------------------------------------</span><br><span class="line">ReadWriteOnce(RWO): 读写权限，并且只能被单个Node挂载</span><br><span class="line">ReadOnlyMany(ROX): 只读权限，允许被多个Node挂载</span><br><span class="line">ReadWriteMany(RWX): 读写权限，允许被多个Node挂载</span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">persistentVolumeReclaimPolicy: 资源回收策略，pvc删之后数据是否回收的策略</span><br><span class="line">------------------------------------------------------</span><br><span class="line">Retain: 保留数据，需要手工处理      </span><br><span class="line">Recycle: 简单清除文件的操作(例如运行<span class="built_in">rm</span> -rf /dada/* 命令)，如果删除pvc,pv的资源就会被删除释放掉</span><br><span class="line">Delete: 如果把PVC删了，PV也会被一起删除，数据也会被清掉(很少用)</span><br><span class="line">目前只有NFS和HostPath两种类型的PV支持Recycle策略。</span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line">storageClassName: 存储类别</span><br><span class="line">具有特定类别的PV只能与请求了该类别的PVC绑定。未指定类型的PV则只能对与不请求任何类别的PVC绑定。</span><br></pre></td></tr></table></figure><p>编写PV资源清单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">1 mib =1024 kib</span><br><span class="line">1 gib = 1024 mib</span><br><span class="line"></span><br><span class="line">1、编写PV资源清单，划分5G</span><br><span class="line">[root@master01 kubernetes]# vim pv01.yml </span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;PersistentVolume&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: pv01</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    <span class="comment">#PV申请磁盘空间的大小5G</span></span><br><span class="line">    storage: 5Gi</span><br><span class="line">  <span class="comment">#访问模式：读写权限，并且只能被单个Node挂载</span></span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  <span class="comment">#回收策略</span></span><br><span class="line">  persistentVolumeReclaimPolicy: Recycle</span><br><span class="line">  storageClassName: pv01-nfs</span><br><span class="line">  nfs:</span><br><span class="line">    path: /data/wp1</span><br><span class="line">    server: 172.16.1.31</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">2、编写PV资源清单，划分3G</span><br><span class="line">[root@master01 kubernetes]# vim pv02.yml </span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;PersistentVolume&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: pv02</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    <span class="comment">#PV申请磁盘空间的大小5G</span></span><br><span class="line">    storage: 4Gi</span><br><span class="line">  <span class="comment">#访问模式：只读权限，允许被多个Node挂载</span></span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadOnlyMany</span><br><span class="line">  <span class="comment">#回收策略</span></span><br><span class="line">  persistentVolumeReclaimPolicy: Recycle</span><br><span class="line">  storageClassName: pv02-nfs</span><br><span class="line">  nfs:</span><br><span class="line">    path: /data/wp2</span><br><span class="line">    server: 172.16.1.31</span><br><span class="line">    </span><br><span class="line">3、编写PV资源清单，划分5G   </span><br><span class="line">[root@master01 kubernetes]# vim pv03.yml </span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;PersistentVolume&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: pv03</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    <span class="comment">#PV申请磁盘空间的大小5G</span></span><br><span class="line">    storage: 3Gi</span><br><span class="line">  <span class="comment">#访问模式：(RWX): 读写权限，允许被多个Node挂载</span></span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  <span class="comment">#回收策略</span></span><br><span class="line">  persistentVolumeReclaimPolicy: Recycle</span><br><span class="line">  storageClassName: pv03-nfs</span><br><span class="line">  nfs:</span><br><span class="line">    path: /data/wp3</span><br><span class="line">    server: 172.16.1.31</span><br><span class="line"></span><br><span class="line">4、运行</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f pv01.yml     </span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f pv02.yml </span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f pv03.yml </span><br><span class="line">[root@master01 kubernetes]# kubectl get pv</span><br><span class="line">NAME   CAPACITY(#pvc绑定的条件)   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGEC</span><br><span class="line">pv01   5Gi        RWO            Recycle          Available           pv01-nfs</span><br><span class="line">pv02   4Gi        ROX            Recycle          Available           pv02-nfs</span><br><span class="line">pv03   3Gi        RWX            Recycle          Available           pv03-nfs</span><br></pre></td></tr></table></figure><p>编写PVC资源清单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1、编写PVC资源清单</span><br><span class="line">[root@master01 kubernetes]# vim pvc01.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: pvc01</span><br><span class="line"><span class="comment">#spec里面的内容就是要去匹配PV的</span></span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 4Gi</span><br><span class="line">  storageClassName: pv01-nfs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、运行</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f pvc01.yml </span><br><span class="line"></span><br><span class="line">3、查看PVC已经绑定了pv01</span><br><span class="line">[root@master01 kubernetes]# kubectl get pvc</span><br><span class="line">NAME    STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">pvc01   Bound    pv01     5Gi        RWO            pv01-nfs       4m5s</span><br><span class="line"></span><br><span class="line">4、pv已经显示被绑定</span><br><span class="line">[root@master01 kubernetes]# kubectl get pv</span><br><span class="line">NAME   CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM           STORAGECLA</span><br><span class="line">pv01   5Gi        RWO            Recycle          Bound       default/pvc01   pv01-nfs  </span><br><span class="line">pv02   4Gi        ROX            Recycle          Available                   pv02-nfs  </span><br><span class="line">pv03   3Gi        RWX            Recycle          Available                   pv03-nfs  </span><br></pre></td></tr></table></figure><h3 id="7、Pod关联PVC"><strong>7、Pod关联PVC</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">1、创建wordpress-Deployment资源</span><br><span class="line">[root@master01 kubernetes]# vim wp-dp-v2.yml</span><br><span class="line">apiVersion: <span class="string">&quot;apps/v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Deployment&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: wp-dp</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line"><span class="comment">#起2个，数据也是2个，除非把数据分开</span></span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: wp</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: wp-pod</span><br><span class="line">      namespace: default</span><br><span class="line">      labels:</span><br><span class="line">        app: wp</span><br><span class="line">    spec:</span><br><span class="line">    <span class="comment">#最后一行挂载点的名字鸡蛋更改 nfs被pv和pvc绑定了，所以pod自己用pvc资源</span></span><br><span class="line">      volumes:</span><br><span class="line">      - name: wp-pvc</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">        <span class="comment">#这个是pvc的名字</span></span><br><span class="line">          claimName: pvc01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      containers:</span><br><span class="line">      - name: wp-container</span><br><span class="line">        image: wordpress</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        <span class="comment">#livenessProbe:</span></span><br><span class="line">        <span class="comment">#  tcpSocket:</span></span><br><span class="line">        <span class="comment">#    port: 80</span></span><br><span class="line">        <span class="comment">#  initialDelaySeconds: 10</span></span><br><span class="line">        <span class="comment">#  periodSeconds: 3</span></span><br><span class="line">        <span class="comment">#  timeoutSeconds: 3</span></span><br><span class="line">        <span class="comment">#  failureThreshold: 3</span></span><br><span class="line">        <span class="comment">#readinessProbe:</span></span><br><span class="line">        <span class="comment">#  tcpSocket:</span></span><br><span class="line">        <span class="comment">#    host: mysql-svc</span></span><br><span class="line">        <span class="comment">#    port: 3306</span></span><br><span class="line">        <span class="comment">#  initialDelaySeconds: 3</span></span><br><span class="line">        <span class="comment">#  timeoutSeconds: 1</span></span><br><span class="line">        <span class="comment">#  periodSeconds: 2</span></span><br><span class="line">        <span class="comment">#  successThreshold: 3</span></span><br><span class="line">        <span class="comment">#  failureThreshold: 3</span></span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: WORDPRESS_DB_HOST</span><br><span class="line">          value: <span class="string">&#x27;mysql-svc&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_USER</span><br><span class="line">          value: <span class="string">&#x27;wp_user&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_NAME</span><br><span class="line">          value: <span class="string">&#x27;wp_db&#x27;</span></span><br><span class="line">        </span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: wp-pvc</span><br><span class="line">          mountPath: /var/www/html/</span><br><span class="line"></span><br><span class="line">2、运行</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f wp-dp-v2.yml</span><br><span class="line"></span><br><span class="line">3、到nfs机器查看挂载成功</span><br><span class="line">[root@nfs ~]# ll /data/wp1/</span><br><span class="line">-rw-r--r--  1 nfsnobody nfsnobody   405 Feb  6  2020 index.php</span><br><span class="line">-rw-r--r--  1 nfsnobody nfsnobody 19915 Jan  1  2024 license.txt</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240928181611313.png" alt="image-20240928181611313"></p>]]></content>
    
    
    <summary type="html">之前接触的本地储存，数据不能做到和其他机器共享，这次会讲解开源共享存储类型和公有云存储</summary>
    
    
    
    <category term="k8s" scheme="https://www.fomal.cc/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>🍉10、Kubernetes配置文件管理ConfigMap</title>
    <link href="https://www.fomal.cc/posts/b63dfd70.html"/>
    <id>https://www.fomal.cc/posts/b63dfd70.html</id>
    <published>2024-10-02T06:32:16.000Z</published>
    <updated>2024-10-02T07:56:03.723Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kubernetes配置文件管理ConfigMap">Kubernetes配置文件管理ConfigMap</h2><h3 id="1、ConfigMap的介绍"><strong>1、ConfigMap的介绍</strong></h3><p>作用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将配置文件和Pod解偶，方便管理配置文件</span><br></pre></td></tr></table></figure><p>ConfigMap里的配置文件如何储存的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方法一</span></span><br><span class="line">键值对的方式： </span><br><span class="line">key:value</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二：</span></span><br><span class="line">文件名:配置文件的内容</span><br></pre></td></tr></table></figure><p>ConfigMap支持的配置类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、直接定义键值对</span><br><span class="line">2、基于文件创建的键值对</span><br></pre></td></tr></table></figure><p>ConfigMap创建方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、命令行</span><br><span class="line">2、资源清单</span><br></pre></td></tr></table></figure><p>ConfigMap的配置文件如何传递到pod里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、变量传递    (只是环境变量，又不会改变配置文件，所以毫无意义)</span><br><span class="line">2、数据卷挂载</span><br></pre></td></tr></table></figure><p>使用Configmap的限制条件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、ConfigMap必须在pod之前创建，pod才能引用</span><br><span class="line">2、ConfigMap受限于名称空间的限制，只有处于同一个名称空间的pod才可以被引用</span><br></pre></td></tr></table></figure><h3 id="2、命令行创建ConfigMap"><strong>2、命令行创建ConfigMap</strong></h3><p>方式一：命令行创建键值对Key：value的储存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1、查看帮助</span><br><span class="line">[root@master01 kubernetes]# kubectl create configmap --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">2、创建configmap</span><br><span class="line">[root@master01 kubernetes]# kubectl create configmap nginx-config --from-literal=nginx_port=80 --from-literal=server_name=blog.test.com</span><br><span class="line"></span><br><span class="line">--from-literal：创建键值对的key=value</span><br><span class="line"></span><br><span class="line">3、查看</span><br><span class="line">[root@master01 kubernetes]# kubectl get cm</span><br><span class="line">NAME           DATA   AGE</span><br><span class="line">nginx-config   2      67s</span><br><span class="line"></span><br><span class="line">ConfigMap的名字：nginx-config，里面有2条数据</span><br><span class="line"></span><br><span class="line">4、查看详细信息</span><br><span class="line">[root@master01 kubernetes]# kubectl describe cm nginx-config </span><br><span class="line">Name:         nginx-config</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">nginx_port:</span><br><span class="line">----</span><br><span class="line">80</span><br><span class="line">server_name:</span><br><span class="line">----</span><br><span class="line">blog.test.com</span><br><span class="line">Events:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建这种键值对的没有意义，因为配置文件很少是键值对的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、引用ConfigMap，如果pod想要引用上面的ConfigMap，只能通过环境变量的形式</span><br></pre></td></tr></table></figure><p>通过变量传递到pod</p><p><img src="../image/study_img/image-20240928205743737.png" alt="image-20240928205743737"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 kubernetes]# vim nginx-cm.yml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-cm</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-pod</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">    - name: NGINX_PORT</span><br><span class="line">      valueFrom:</span><br><span class="line">        configMapKeyRef:</span><br><span class="line">          name: nginx-config</span><br><span class="line">          key: nginx_port</span><br><span class="line"></span><br><span class="line">    - name: SERVER_NAME</span><br><span class="line">      valueFrom:</span><br><span class="line">        configMapKeyRef:</span><br><span class="line">          name: nginx-config</span><br><span class="line">          key: server_name</span><br><span class="line"></span><br><span class="line">6、启动pod</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx-cm.yml</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-cm                   1/1     Running   0          9s</span><br><span class="line"></span><br><span class="line">7、进入pod，查看pod已经引入了变量</span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it nginx-cm -- /bin/sh</span><br><span class="line">/ <span class="comment"># echo $NGINX_PORT</span></span><br><span class="line">80</span><br><span class="line">/ <span class="comment"># echo $SERVER_NAME</span></span><br><span class="line">blog.test.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#虽然这两个变量传进来了，但是配置文件并没有改变，因为他不知道会传到哪个配置文件，没那么智能，只是传递变量</span></span><br></pre></td></tr></table></figure><p>方式二：基于文件形式创建ConfigMap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1、创建配置文件</span><br><span class="line">[root@master01 kubernetes]# <span class="built_in">cat</span> &gt; www.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">server &#123;</span></span><br><span class="line"><span class="string">    listen 80;</span></span><br><span class="line"><span class="string">    server_name blog.test.com;</span></span><br><span class="line"><span class="string">    location / &#123;</span></span><br><span class="line"><span class="string">        root /usr/share/nginx/html/www;</span></span><br><span class="line"><span class="string">        index index.html index.htm;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">2、命令行创建ConfigMap资源</span><br><span class="line">kubectl create configmap [自定义的ConfigMap名字]  --from-file=[自定义的key名字]=[配置文件路径]</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl create configmap nginx-www  --from-file=test-www=./www.conf</span><br><span class="line"></span><br><span class="line">3、查看cm资源</span><br><span class="line">[root@master01 kubernetes]# kubectl get cm</span><br><span class="line">NAME           DATA   AGE</span><br><span class="line">nginx-www      1      117s</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240928214603450.png" alt="image-20240928214603450"></p><ul><li>通过挂载卷传递到pod</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 kubernetes]# vim nginx-cm.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-cm-v1</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginx-data-configmap</span><br><span class="line">    configMap:</span><br><span class="line">      name: nginx-www</span><br><span class="line">      items:</span><br><span class="line">      - key: test-www</span><br><span class="line">        path: wordpress.conf</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-pod</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data-configmap</span><br><span class="line">      mountPath: /etc/nginx/conf.d/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240928221503694.png" alt="image-20240928221503694"></p><ul><li>一次性创建ConfigMap的2个key</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1、准备配置文件</span><br><span class="line">[root@master01 kubernetes]# <span class="built_in">cat</span> &gt; wp.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">server &#123;</span></span><br><span class="line"><span class="string">    listen 80;</span></span><br><span class="line"><span class="string">    server_name www.wp.com;</span></span><br><span class="line"><span class="string">    location / &#123;</span></span><br><span class="line"><span class="string">        root /usr/share/nginx/html/www;</span></span><br><span class="line"><span class="string">        index index.html index.htm;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# <span class="built_in">cat</span> &gt; wc.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">server &#123;</span></span><br><span class="line"><span class="string">    listen 90;</span></span><br><span class="line"><span class="string">    server_name www.wc.com;</span></span><br><span class="line"><span class="string">    location / &#123;</span></span><br><span class="line"><span class="string">        root /usr/share/nginx/html/www;</span></span><br><span class="line"><span class="string">        index index.html index.htm;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">2、命令行创建ConfigMap</span><br><span class="line">[root@master01 kubernetes]# kubectl create configmap wp-wc-conf  --from-file=wp-conf=./wp.conf --from-file=wc-conf=./wc.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、查看</span><br><span class="line">[root@master01 ~]# kubectl get cm</span><br><span class="line">NAME           DATA   AGE</span><br><span class="line">nginx-config   2      126m</span><br><span class="line">nginx-www      1      45m</span><br><span class="line">wp-wc-conf     2      112s</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240928223040756.png" alt="image-20240928223040756"></p><p>一次性挂载2个文件进去</p><p><img src="../image/study_img/image-20240928225407162.png" alt="image-20240928225407162"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">1、编写资源清单</span><br><span class="line">[root@master01 kubernetes]#  vim wp-wc-configmap.yml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: wp-wc-cm</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: wp-wc-configmap</span><br><span class="line">    configMap:</span><br><span class="line">      name: wp-wc-conf</span><br><span class="line">      items:</span><br><span class="line">      - key: wp-conf</span><br><span class="line">        path: wordpress.conf</span><br><span class="line">      - key: wc-conf</span><br><span class="line">        path: wecenter.conf</span><br><span class="line"></span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-pod</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: wp-wc-configmap</span><br><span class="line">      mountPath: /etc/nginx/conf.d/</span><br><span class="line"></span><br><span class="line">2、运行，并查看</span><br><span class="line">[root@master01 kubernetes]#  kubectl apply -f wp-wc-configmap.yml </span><br><span class="line">[root@master01 kubernetes]# kubectl get pod</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">wp-wc-cm                   1/1     Running   0          5s</span><br><span class="line"></span><br><span class="line">3、进入pod查看挂载成功</span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it wp-wc-cm -- /bin/sh</span><br><span class="line">/ <span class="comment"># ls -l /etc/nginx/conf.d/</span></span><br><span class="line">lrwxrwxrwx    1 root     root            20 Sep 28 14:41 wecenter.conf -&gt; ..data/wecenter.conf</span><br><span class="line">lrwxrwxrwx    1 root     root            21 Sep 28 14:41 wordpress.conf -&gt; ..data/wordpress.conf</span><br><span class="line">/ <span class="comment"># cat /etc/nginx/conf.d/wecenter.conf &amp;&amp; cat /etc/nginx/conf.d/wordpress.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 90;</span><br><span class="line">    server_name www.wc.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /usr/share/nginx/html/www;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.wp.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /usr/share/nginx/html/www;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试动态修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 kubernetes]# kubectl get cm</span><br><span class="line">NAME           DATA   AGE</span><br><span class="line">wp-wc-conf     2      30m</span><br><span class="line"></span><br><span class="line">1、修改</span><br><span class="line">[root@master01 kubernetes]# kubectl edit cm wp-wc-conf</span><br><span class="line">        listen 91;</span><br><span class="line">......</span><br><span class="line">        listen 81;</span><br><span class="line">        </span><br><span class="line">2、再次进入容器内观察也会自动更新</span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it wp-wc-cm -- /bin/sh</span><br><span class="line">/ <span class="comment"># cat /etc/nginx/conf.d/wecenter.conf &amp;&amp; cat /etc/nginx/conf.d/wordpress.conf </span></span><br><span class="line"></span><br><span class="line">3、但是端口没有变</span><br><span class="line">/ <span class="comment">#  netstat -lntup</span></span><br><span class="line">tcp        0      0 0.0.0.0:80 </span><br><span class="line">tcp        0      0 0.0.0.0:90</span><br><span class="line"></span><br><span class="line">4、需要重启服务才可以生效，需要删除资源再重启，如果是pod资源就不能删除重启，pod资源就删除，重新应用一下</span><br><span class="line">[root@master01 kubernetes]#  kubectl delete -f wp-wc-configmap.yml</span><br><span class="line">[root@master01 kubernetes]#  kubectl apply -f wp-wc-configmap.yml </span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it wp-wc-cm -- /bin/sh</span><br><span class="line">/ <span class="comment"># netstat -lntup      </span></span><br><span class="line">tcp        0      0 0.0.0.0:81              0.0.0.0:*             </span><br><span class="line">tcp        0      0 0.0.0.0:91              0.0.0.0:*            </span><br><span class="line"><span class="comment"># 动态修改配置文件，但是无法重新加载服务 （有一些企业用Nacos服务：配置管理中心，改完了就帮你重新加载服务）</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">以上操作把配置文件挂到pod里面了，需要先准备配置文件，但是还有缺陷，需要提前准备配置文件</span><br><span class="line">但有的资源清单，比如kube-flannel，没有准备配置文件，使用资源清单创建ConfigMap就不需要提前准备</span><br></pre></td></tr></table></figure><h3 id="3、使用资源清单创建configmap"><strong>3、使用资源清单创建configmap</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">为避免冲突，删除上次实验创建的cm和pod</span><br><span class="line"></span><br><span class="line">1、创建资源清单</span><br><span class="line">root@master01 kubernetes]# vim wp-wc-configmap.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: wp-wc-conf</span><br><span class="line">  namespace: default</span><br><span class="line">data:</span><br><span class="line">  wp-key: |</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 88;</span><br><span class="line">        server_name www.wwpp.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /usr/share/nginx/html/www;</span><br><span class="line">            index index.html index.htm;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  wc-key: |</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 99;</span><br><span class="line">        server_name www.wwcc.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /usr/share/nginx/html/www;</span><br><span class="line">            index index.html index.htm;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: wp-wc-cm2</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: wp-wc-configmap</span><br><span class="line">    configMap:</span><br><span class="line">      name: wp-wc-conf</span><br><span class="line">      items:</span><br><span class="line">      - key: wp-key</span><br><span class="line">        path: wordpress.conf</span><br><span class="line">      - key: wc-key</span><br><span class="line">        path: wecenter.conf</span><br><span class="line"></span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-pod</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: wp-wc-configmap</span><br><span class="line">      mountPath: /etc/nginx/conf.d/</span><br><span class="line"></span><br><span class="line">2、运行，并且查看详细信息</span><br><span class="line">root@master01 kubernetes]# kubectl apply -f wp-wc-configmap.yml </span><br><span class="line">configmap/wp-wc-conf created</span><br><span class="line">pod/wp-wc-cm2 created</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">wp-wc-cm2                  1/1     Running   0          2m42s</span><br><span class="line">[root@master01 kubernetes]# kubectl get cm</span><br><span class="line">NAME         DATA   AGE</span><br><span class="line">wp-wc-conf   2      21s</span><br><span class="line">[root@master01 kubernetes]# kubectl describe cm wp-wc-conf</span><br><span class="line">Name:         wp-wc-conf</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">wc-key:</span><br><span class="line">----</span><br><span class="line">server &#123;</span><br><span class="line">    listen 99;</span><br><span class="line">    server_name www.wwcc.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /usr/share/nginx/html/www;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wp-key:</span><br><span class="line">----</span><br><span class="line">server &#123;</span><br><span class="line">    listen 88;</span><br><span class="line">    server_name www.wwpp.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /usr/share/nginx/html/www;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、进入容器并查看配置文件</span><br><span class="line">[root@master01 ~]# kubectl <span class="built_in">exec</span> -it wp-wc-cm2 -- /bin/sh</span><br><span class="line">/# <span class="built_in">cat</span> /etc/nginx/conf.d/wecenter.conf &amp;&amp; <span class="built_in">cat</span> /etc/nginx/conf.d/wordpress.conf </span><br><span class="line">/# netstat -lntup</span><br><span class="line">tcp        0      0 0.0.0.0:88</span><br><span class="line">tcp        0      0 0.0.0.0:99</span><br><span class="line"></span><br><span class="line">4、动态修改能够修改，但是不生效</span><br></pre></td></tr></table></figure><h3 id="4、wordpress综合练习"><strong>4、wordpress综合练习</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## wordpress 要运行在k8s中</span></span><br><span class="line"><span class="comment">## MySQL</span></span><br><span class="line">1.名称空间： blog</span><br><span class="line">2.镜像mysql:5.7</span><br><span class="line">3.环境变量</span><br><span class="line">        - root密码：123</span><br><span class="line">        - 数据库：wordpress</span><br><span class="line">        - 用户：wordpress</span><br><span class="line">        - 参数：字符集</span><br><span class="line">4.数据持久化：在宿主机的/data/mysql/data</span><br><span class="line"></span><br><span class="line"><span class="comment">## mysql-svc需求</span></span><br><span class="line">名称空间：blog</span><br><span class="line"></span><br><span class="line"><span class="comment">## wordpress需求</span></span><br><span class="line">副本数为:2</span><br><span class="line">镜像：wordpress:latest</span><br><span class="line">数据库地址：cluster ip</span><br><span class="line">数据库名称：wordpress</span><br><span class="line">用户：wordpress</span><br><span class="line"></span><br><span class="line">******** 使用NFS持久化数据，宿主机：/data/wordpress/data 10.0.0.31</span><br><span class="line"></span><br><span class="line">mysql deployment</span><br><span class="line">mysql clusterip</span><br><span class="line">wordpress deployment</span><br><span class="line">wordpress clusterip</span><br><span class="line">wordpress ingress</span><br><span class="line">wordpress hpa</span><br></pre></td></tr></table></figure><p>资源清单如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="comment"># 名称空间</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: blog</span><br><span class="line">---</span><br><span class="line"><span class="comment"># mysql的PV资源</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-pv</span><br><span class="line">  namespace: blog</span><br><span class="line">spec:</span><br><span class="line">  storageClassName: mysql-hostpath</span><br><span class="line">  persistentVolumeReclaimPolicy: Retain</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteOnce</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 5Gi</span><br><span class="line">  hostPath:</span><br><span class="line">    path: /data/wp-db</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># mysql的pvc资源</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-pvc</span><br><span class="line">  namespace: blog</span><br><span class="line">spec:</span><br><span class="line">  storageClassName: mysql-pvc</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteOnce</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 5Gi</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># mysql的deploy资源</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-deploy</span><br><span class="line">  namespace: blog</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      run: mysql-deploy</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: mysql-pod</span><br><span class="line">      namespace: blog</span><br><span class="line">      labels:</span><br><span class="line">        run: mysql-deploy</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: db-pvc</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: mysql-pvc</span><br><span class="line">      containers:</span><br><span class="line">      - name: mysql-container</span><br><span class="line">        image: mysql:5.7</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        livenessProbe:</span><br><span class="line">          tcpSocket:</span><br><span class="line">            port: 3306</span><br><span class="line">          failureThreshold: 3</span><br><span class="line">          initialDelaySeconds: 5</span><br><span class="line">          periodSeconds: 1</span><br><span class="line">          timeoutSeconds: 10</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        - name: MYSQL_DATABASE</span><br><span class="line">          value: <span class="string">&#x27;wordpress&#x27;</span></span><br><span class="line">        - name: MYSQL_USER</span><br><span class="line">          value: <span class="string">&#x27;wp_user&#x27;</span></span><br><span class="line">        - name: MYSQL_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: db-pvc</span><br><span class="line">          mountPath: /var/lib/mysql</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># mysql的service资源</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-service</span><br><span class="line">  namespace: blog</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    run: mysql-deploy</span><br><span class="line">  ports:</span><br><span class="line">  - name: mysql</span><br><span class="line">    protocol: TCP</span><br><span class="line">    port: 3306</span><br><span class="line">    targetPort: 3306</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># wordpress的PV资源</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: wordpress-pv</span><br><span class="line">  namespace: blog</span><br><span class="line">spec:</span><br><span class="line">  storageClassName: wordpress-nfs</span><br><span class="line">  persistentVolumeReclaimPolicy: Retain</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteOnce</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 5Gi</span><br><span class="line">  nfs:</span><br><span class="line">    path: /data/wp</span><br><span class="line">    server: 172.16.1.31</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment">#wordpress的PVC</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: wordpress-pvc</span><br><span class="line">  namespace: blog</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteOnce</span><br><span class="line">  storageClassName: wordpress-nfs</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 5Gi</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># wordpress的deployment的资源</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: wordpress-deploy</span><br><span class="line">  namespace: blog</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      run: wordpress-deploy</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        run: wordpress-deploy</span><br><span class="line">      name: wordpress-pod </span><br><span class="line">      namespace: blog</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: web-pvc</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: wordpress-pvc</span><br><span class="line">      containers:</span><br><span class="line">      - name: wordpress-container</span><br><span class="line">        image: wordpress</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        <span class="comment">#livenessProbe:</span></span><br><span class="line">        <span class="comment">#  httpGet:</span></span><br><span class="line">        <span class="comment">#    path: /</span></span><br><span class="line">        <span class="comment">#    port: 80</span></span><br><span class="line">        <span class="comment">#  failureThreshold: 3</span></span><br><span class="line">        <span class="comment">#  initialDelaySeconds: 5</span></span><br><span class="line">        <span class="comment">#  periodSeconds: 1</span></span><br><span class="line">        <span class="comment">#  timeoutSeconds: 10</span></span><br><span class="line">        readinessProbe:</span><br><span class="line">          tcpSocket:</span><br><span class="line">            port: 3306</span><br><span class="line">          failureThreshold: 3</span><br><span class="line">          initialDelaySeconds: 3</span><br><span class="line">          periodSeconds: 1</span><br><span class="line">          successThreshold: 3</span><br><span class="line">          timeoutSeconds: 10</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: WORDPRESS_DB_HOST</span><br><span class="line">          value: <span class="string">&#x27;mysql-service&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_USR</span><br><span class="line">          value: <span class="string">&#x27;wp_user&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_DATABASE</span><br><span class="line">          value: <span class="string">&#x27;wordpress&#x27;</span></span><br><span class="line">        - name: WORDPRESS_DB_PASSWORD</span><br><span class="line">          value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: web-pvc</span><br><span class="line">          mountPath: /var/www/html</span><br><span class="line">---</span><br><span class="line"><span class="comment"># wordpress的service资源</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: wordpress-service</span><br><span class="line">  namespace: blog</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    run: wordpress-deploy</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP  </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># wordpress的HPA资源</span></span><br><span class="line">apiVersion: autoscaling/v1</span><br><span class="line">kind: HorizontalPodAutoscaler</span><br><span class="line">metadata:</span><br><span class="line">  name: wordpress-hpa</span><br><span class="line">  namespace: blog</span><br><span class="line">spec:</span><br><span class="line">  maxReplicas: 10</span><br><span class="line">  minReplicas: 2</span><br><span class="line">  scaleTargetRef:</span><br><span class="line">    apiVersion: apps/v1</span><br><span class="line">    kind: Deployment</span><br><span class="line">    name: wordpress-deploy</span><br><span class="line">  targetCPUUtilizationPercentage: 50</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># wordpress的ingress资源</span></span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: wordpress-ingress</span><br><span class="line">  namespace: blog</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">    - host: wp.web.com</span><br><span class="line">      http:</span><br><span class="line">        paths:</span><br><span class="line">        - path: /</span><br><span class="line">          pathType: Prefix</span><br><span class="line">          backend:</span><br><span class="line">            service:</span><br><span class="line">              name: wordpress-service</span><br><span class="line">              port:</span><br><span class="line">                number: 80</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">k8s使用配置文件管理ConfigMap，将配置文件和Pod解偶</summary>
    
    
    
    <category term="k8s" scheme="https://www.fomal.cc/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>🍉11、K8s资源限制和Prometheus监控</title>
    <link href="https://www.fomal.cc/posts/aef7182b.html"/>
    <id>https://www.fomal.cc/posts/aef7182b.html</id>
    <published>2024-10-02T06:32:00.000Z</published>
    <updated>2024-10-02T07:56:03.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="K8s资源限制和Prometheus监控">K8s资源限制和Prometheus监控</h2><h3 id="1、K8s里的Pod资源限制"><strong>1、K8s里的Pod资源限制</strong></h3><p>资源限制的资源清单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1、资源清单的编写</span><br><span class="line">[root@master01 kubernetes]# vim limit.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: resource-demo</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: resource-demo</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    resources:</span><br><span class="line">    <span class="comment">#最小的需求</span></span><br><span class="line">      requests:</span><br><span class="line">      <span class="comment">#内存最小需求</span></span><br><span class="line">        memory: 50Mi</span><br><span class="line">      <span class="comment">#cpu的最小需求</span></span><br><span class="line">        cpu: 200m</span><br><span class="line">      <span class="comment">#限制占用磁盘最小需求</span></span><br><span class="line">        <span class="comment">#storage: 3Gi</span></span><br><span class="line">      <span class="comment">#最大需求</span></span><br><span class="line">      limits:</span><br><span class="line">        memory: 100Mi</span><br><span class="line">        cpu: 1500m</span><br><span class="line">        <span class="comment">#storage: 5Gi</span></span><br><span class="line">        </span><br><span class="line">2、运行</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f limit.yaml</span><br></pre></td></tr></table></figure><p>参数解释：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">requests：节点所需的最小计算资源，k8s调度的时候的依据值</span><br><span class="line"></span><br><span class="line">limits：限制允许的最大计算资源，真正的资源限制参数</span><br></pre></td></tr></table></figure><p>数值转换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 CPU = 1000m     m是毫核</span><br><span class="line">0.5 CPU = 500m</span><br><span class="line">1 Mib = 1024 Kib</span><br><span class="line">1 MB = 1000 KB</span><br></pre></td></tr></table></figure><p>验证方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器ID | grep CgroupParent</span><br><span class="line"><span class="built_in">cd</span> /sys/fs/cgroup/cpu/kubepods.slice/kubepods-burstable.slice/过滤出来的结果</span><br><span class="line"><span class="built_in">cat</span> cpu.cfs_quota_us</span><br><span class="line"></span><br><span class="line">1、查看起在哪个node</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -owide</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE     IP           NODE</span><br><span class="line">resource-demo                   1/1     Running   0          4m19s   10.2.3.114   node03</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、查看node03上的容器</span><br><span class="line">[root@node03 ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                                               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">2463239ecc3f        c7b4f26a7d93                                        <span class="string">&quot;/docker-entrypoint.…&quot;</span>   5 minutes ago       Up 5 minutes                            k8s_resource-demo_resource-demo_default_cb221617-6b64-41d8-83de-d1766988dddd_0</span><br><span class="line"></span><br><span class="line">[root@node03 ~]# docker inspect 2463239ecc3f | grep CgroupParent</span><br><span class="line">            <span class="string">&quot;CgroupParent&quot;</span>: <span class="string">&quot;kubepods-burstable-podcb221617_6b64_41d8_83de_d1766988dddd.slice&quot;</span>,</span><br><span class="line">            </span><br><span class="line">[root@node03 ~]# <span class="built_in">cd</span> /sys/fs/cgroup/cpu/kubepods.slice/kubepods-burstable.slice/kubepods-burstable-podcb221617_6b64_41d8_83de_d1766988dddd.slice</span><br><span class="line"></span><br><span class="line">[root@node03 kubepods-burstable-podcb221617_6b64_41d8_83de_d1766988dddd.slice]# <span class="built_in">cat</span> cpu.cfs_quota_us</span><br><span class="line">150000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果查看到的结果是-1，就是没做限制</span></span><br><span class="line">不能盲目的做资源限制，所以要做监控</span><br></pre></td></tr></table></figure><h3 id="2、Prometheus的介绍"><strong>2、Prometheus的介绍</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   Prometheus是一个开源系统监控和警报工具包，最初是在SoundCloud上构建的。自2012年成立以来，许多公司和组织都采用了Prometheus，该项目拥有非常活跃的开发者和用户社区。</span><br><span class="line">   </span><br><span class="line">Prometheus现在是一个独立的开源项目，独立于任何公司进行维护。为了强调这一点，并澄清项目的治理结构，Prometheus于2016年加入云原生计算基金会，作为继Kubernetes之后的第二个托管项目。</span><br><span class="line"></span><br><span class="line">我们可以简单的理解Prometheus是一个监控系统同时也是一个时间序列数据库。</span><br><span class="line"></span><br><span class="line">推荐阅读:</span><br><span class="line">    官网地址：https://prometheus.io</span><br><span class="line">    官方文档：https://prometheus.io/docs/introduction/overview/</span><br><span class="line">    GitHub地址：https://github.com/prometheus</span><br><span class="line">    架构图地址：https://prometheus.io/docs/introduction/overview/</span><br></pre></td></tr></table></figure><h3 id="3、Prometheus架构"><strong>3、Prometheus架构</strong></h3><p><img src="../image/study_img/image-20240926113735188.png" alt="image-20240926113735188"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">如下图所示，展示了普罗米修斯(prometheus)的建筑和它的一些生态系统组成部分。</span><br><span class="line">(1)Prometheus server:</span><br><span class="line">    prometheus的服务端，负责收集指标和存储时间序列数据，并提供查询接口。</span><br><span class="line"></span><br><span class="line">(2)exporters:</span><br><span class="line">    如果想要监控，前提是能获取被监控端数据，并且这个数据格式必须遵循Prometheus数据模型，这样才能识别和采集，一般使用exporter数据采集器(类似于zabbix_agent端)提供监控指标数据。</span><br><span class="line">    exporter数据采集器，除了官方和GitHub提供的常用组件exporter外，我们也可以为自己自研的产品定制exporters组件哟。</span><br><span class="line"></span><br><span class="line">(3)Pushgateway:</span><br><span class="line">    短期存储指标数据，主要用于临时性的任务。比如备份数据库任务监控等。</span><br><span class="line">本质上我们可以理解为Pushgateway可以帮咱们监控自定义的监控项，这需要咱们自己编写脚本来推送到Pushgateway端，而后由Prometheus server从Pushgateway去pull监控数据。</span><br><span class="line">    换句话说，请不要被官方的架构图蒙骗了，咱们完全可以基于Pushgateway来监控咱们自定义的监控项哟，这些监控项完全可以是长期运行的呢！</span><br><span class="line"></span><br><span class="line">(4)Service discovery:</span><br><span class="line">    服务发现，例如我们可以配置动态的服务监控，无需重启Prometheus server实例就能实现动态监控。</span><br><span class="line"></span><br><span class="line">(5)Alertmanager:</span><br><span class="line">    支持报警功能，比如可以支持基于邮件，微信，钉钉报警。</span><br><span class="line">    据网友反馈该组件在生产环境中存在缺陷，因此我们可以考虑使用Grafana来展示并实现报警功能。</span><br><span class="line"></span><br><span class="line">(6)Prometheus Web UI</span><br><span class="line">    Prometheus比较简单的Web控制台，通常我们可以使用grafana来集成做更漂亮的Web展示哟。</span><br><span class="line">温馨提示:</span><br><span class="line">    大多数Prometheus组件都是用Go编写的，这使得它们易于构建和部署为静态二进制文件</span><br></pre></td></tr></table></figure><h3 id="4、二进制方式部署Prometheus"><strong>4、二进制方式部署Prometheus</strong></h3><p>环境准备</p><table><thead><tr><th>hostname</th><th>ip</th><th>roles</th><th>配置(application)</th><th>配置</th></tr></thead><tbody><tr><td>master01</td><td>10.0.0.200  /  172.16.1.200</td><td>Prometheus服务端</td><td>promethues,pushgateway,alertmanager,<br/>node_exporter,cAdVidor，grafana</td><td>1h2G</td></tr><tr><td>node01</td><td>10.0.0.201  /  172.16.1.201</td><td>prometheus客户端(收集数据指标)</td><td>node_exporter,cAdVidor</td><td>1h2G</td></tr><tr><td>node02</td><td>10.0.0.202  /  172.16.1.202</td><td>prometheus客户端(收集数据指标)</td><td>node_exporter,cAdVidor</td><td>1h2G</td></tr><tr><td>node03</td><td>10.0.0.203  /  172.16.1.203</td><td>prometheus客户端(收集数据指标)</td><td>node_exporter,cAdVidor</td><td>2h4G</td></tr></tbody></table><p>1、下载包</p><p><img src="../image/study_img/image-20240926155738935.png" alt="image-20240926155738935"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pushgateway：自定义监控</span><br><span class="line">alertmanager：告警</span><br><span class="line">node_exporter：master起容器了，apiserver，controller组件都是以容器方式起来的需要监控</span><br><span class="line">cAdVidor：监控容器</span><br><span class="line"></span><br><span class="line">https://prometheus.io/download/</span><br><span class="line"></span><br><span class="line">1、下载二进制包</span><br><span class="line">版本的选择bata是预上线版本，当前稳定版LTS   生产中最好用文档版的</span><br><span class="line"><span class="comment">#下载Prometheus</span></span><br><span class="line">wget https://github.com/prometheus/prometheus/releases/download/v2.54.1/prometheus-2.54.1.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载alertmanager（告警组件）</span></span><br><span class="line">wget https://github.com/prometheus/alertmanager/releases/download/v0.27.0/alertmanager-0.27.0.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载node_exporter(宿主机指标收集器)</span></span><br><span class="line">wget https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载pushgateway（自定义监控组件）</span></span><br><span class="line">cAdVidor不是自己的组件</span><br></pre></td></tr></table></figure><p>2、部署Prometheus</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1、安装Prometheus</span><br><span class="line">[root@master01 ~]# tar xf prometheus-2.54.1.linux-amd64.tar.gz -C /app</span><br><span class="line">[root@master01 ~]# <span class="built_in">mv</span> /app/prometheus-2.54.1.linux-amd64 /app/prometheus-2.54.1</span><br><span class="line">[root@master01 ~]# <span class="built_in">ln</span> -s /app/prometheus-2.54.1 /app/prometheus</span><br><span class="line">制作好软连接，就安装完成</span><br><span class="line"></span><br><span class="line">[root@master01 prometheus-2.54.1]# ll /app/</span><br><span class="line">lrwxrwxrwx 1 root root    22 Sep 26 12:01 prometheus -&gt; /app/prometheus-2.54.1</span><br><span class="line">drwxr-xr-x 4 1001 docker 132 Sep 26 12:44 prometheus-2.54.1</span><br><span class="line">[root@master01 ~]# ll /app/prometheus-2.54.1/</span><br><span class="line">total 265552</span><br><span class="line">drwxr-xr-x 2 1001 docker        38 Aug 27 19:11 console_libraries#库文件</span><br><span class="line">drwxr-xr-x 2 1001 docker       173 Aug 27 19:11 consoles</span><br><span class="line">-rw-r--r-- 1 1001 docker     11357 Aug 27 19:11 LICENSE</span><br><span class="line">-rw-r--r-- 1 1001 docker      3773 Aug 27 19:11 NOTICE</span><br><span class="line">-rwxr-xr-x 1 1001 docker 140096826 Aug 27 18:58 prometheus <span class="comment">#启动程序</span></span><br><span class="line">-rw-r--r-- 1 1001 docker       934 Aug 27 19:11 prometheus.yml  <span class="comment">#配置文件</span></span><br><span class="line">-rwxr-xr-x 1 1001 docker 131802216 Aug 27 18:58 promtool</span><br></pre></td></tr></table></figure><p>​    Prometheus配置文件解读</p><p><img src="../image/study_img/image-20240926163353506.png" alt="image-20240926163353506"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">2、修改配置文件</span><br><span class="line">[root@master01 prometheus-2.54.1]# vim prometheus.yml</span><br><span class="line">......</span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: <span class="string">&quot;prometheus&quot;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&quot;10.0.0.200:9090&quot;</span>]</span><br><span class="line">     <span class="comment">#这里写Prometheus的安装机器的ip:端口</span></span><br><span class="line"> </span><br><span class="line">3、查看帮助，查看启动服务都需要哪些参数 </span><br><span class="line">[root@master01 prometheus]# /app/prometheus/prometheus --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、启动Prometheus</span><br><span class="line">[root@master01 prometheus]# /app/prometheus/prometheus --config.file=/app/prometheus/prometheus.yml &amp;</span><br><span class="line">会有日志输出在终端</span><br><span class="line"><span class="comment">#启动之后，这次不需要写systemd脚本管理，这次使用另外一种管理方式supervisor</span></span><br><span class="line"></span><br><span class="line">5、浏览器访问</span><br><span class="line">10.0.0.200:9090</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240926164644789.png" alt="image-20240926164644789"></p><p>3、二进制安装node_export，并加入Prometheus</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1、安装</span><br><span class="line">[root@master01 ~]# tar xf node_exporter-1.8.2.linux-amd64.tar.gz -C /app</span><br><span class="line">[root@master01 app]# <span class="built_in">mv</span> /app/node_exporter-1.8.2.linux-amd64/ /app/node_exporter-1.8.2</span><br><span class="line">[root@master01 app]# <span class="built_in">ln</span> -s /app/node_exporter-1.8.2 /app/node_exporter</span><br><span class="line"><span class="comment">#这里可以先做第5步，把配置文件改了</span></span><br><span class="line"></span><br><span class="line">2、查看</span><br><span class="line">[root@master01 app]# <span class="built_in">cd</span> /app/node_exporter</span><br><span class="line">[root@master01 node_exporter]# ll</span><br><span class="line">total 20040</span><br><span class="line">-rw-r--r-- 1 1001 1002    11357 Jul 14 19:57 LICENSE</span><br><span class="line">-rwxr-xr-x 1 1001 1002 20500541 Jul 14 19:54 node_exporter <span class="comment">#启动程序文件</span></span><br><span class="line">-rw-r--r-- 1 1001 1002      463 Jul 14 19:57 NOTICE</span><br><span class="line"></span><br><span class="line">3、启动</span><br><span class="line">[root@master01 node_exporter]# /app/node_exporter/node_exporter  &amp;</span><br><span class="line">启动，之后，Prometheus挂了</span><br><span class="line"></span><br><span class="line">4、浏览器访问</span><br><span class="line">10.0.0.200:9100</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240926170004149.png" alt="image-20240926170004149"></p><p><img src="../image/study_img/image-20240926170140793.png" alt="image-20240926170140793"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">5、修改配置文件，将node_exporter的信息加入Prometheus</span><br><span class="line">[root@master01 prometheus-2.54.1]# vim prometheus.yml</span><br><span class="line">......</span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: <span class="string">&quot;prometheus&quot;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&quot;10.0.0.200:9090&quot;</span>]</span><br><span class="line">  - job_name: <span class="string">&quot;node_exporter&quot;</span></span><br><span class="line">    static_configs:</span><br><span class="line">    <span class="comment">#写node_exporter的地址和端口</span></span><br><span class="line">      - targets: [<span class="string">&quot;10.0.0.200:9100&quot;</span>]</span><br><span class="line">      </span><br><span class="line">6、再次重新启动Prometheus</span><br><span class="line">[root@master01 prometheus]# <span class="built_in">jobs</span></span><br><span class="line">[1]-  Running                 /app/prometheus/prometheus --config.file=/app/prometheus/prometheus.yml &amp;</span><br><span class="line">[2]+  Running                 /app/node_exporter/node_exporter &amp;  (wd: /app/node_exporter)</span><br><span class="line">[root@master01 prometheus]# <span class="built_in">kill</span> %1</span><br><span class="line"></span><br><span class="line">[root@master01 prometheus]# /app/prometheus/prometheus --config.file=/app/prometheus/prometheus.yml &amp;</span><br><span class="line"></span><br><span class="line">7、刷新页面，可以看到node_exporter的节点</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240926171311595.png" alt="image-20240926171311595"></p><p>4、部署supervisor</p><p>node_exporter和Prometheus服务,启停没有使用systemd管理，这次使用supervisor管理服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">1、安装supervisor   是python写的</span><br><span class="line">[root@master01 prometheus-2.54.1]# yum -y install supervisor</span><br><span class="line">[root@master01 prometheus]# systemctl start supervisord</span><br><span class="line">[root@master01 prometheus]# systemctl <span class="built_in">enable</span> supervisord</span><br><span class="line">如果公司有一些前端或者后端的页面要启动都可以放到这里管理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、查看配置文件</span><br><span class="line">[root@master01 prometheus]# vim /etc/supervisord.conf </span><br><span class="line">[include]</span><br><span class="line">files = supervisord.d/*.ini   <span class="comment">#子配置文件的写法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、编写promethues启动脚本</span><br><span class="line">[root@master01 prometheus]# vim /etc/supervisord.d/prome.ini</span><br><span class="line">[program:prometheus]</span><br><span class="line">directory=/app/prometheus/</span><br><span class="line"><span class="built_in">command</span>=/bin/bash -c <span class="string">&quot;/app/prometheus/prometheus --config.file=/app/prometheus/prometheus.yml&quot;</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">stdout_logfile=/var/log/prome_stdout.log</span><br><span class="line">stderr_logfile=/var/log/prome_stderr.log</span><br><span class="line">user=root</span><br><span class="line">stopsignal=TERM</span><br><span class="line">startsecs=5</span><br><span class="line">startretries=3</span><br><span class="line">stopasgroup=<span class="literal">true</span></span><br><span class="line">killasgroup=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进程/程序：程序名</span></span><br><span class="line">[program:prometheus]</span><br><span class="line"><span class="comment">#程序的工作目录</span></span><br><span class="line">directory=/app/prometheus/</span><br><span class="line"><span class="comment">#启动命令</span></span><br><span class="line"><span class="built_in">command</span>=/bin/bash -c <span class="string">&quot;/app/prometheus/prometheus --config.file=/app/prometheus/prometheus.yml&quot;</span></span><br><span class="line"><span class="comment">#自动启动，可以看做开机自启动，只要superviso启动，他就启动，所以要给superviso设置开机自启动</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line"><span class="comment">#自动启动</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line"><span class="comment">#标准输出的日志</span></span><br><span class="line">stdout_logfile=/var/log/prome_stdout.log</span><br><span class="line"><span class="comment">#错误输出的日志</span></span><br><span class="line">stderr_logfile=/var/log/prome_stderr.log</span><br><span class="line"><span class="comment">#程序的启动用户</span></span><br><span class="line">user=root</span><br><span class="line"><span class="comment">#stop的信号是term，kill -l可以看到所有信号，有一个15)的信号 相当于kill -15 进程名，这个是最标准最安全的杀进程</span></span><br><span class="line">stopsignal=TERM</span><br><span class="line"><span class="comment">#启动的超时时间5s，超过5s没起来就是超时</span></span><br><span class="line">startsecs=5</span><br><span class="line"><span class="comment">#重试次数</span></span><br><span class="line">startretries=3</span><br><span class="line"><span class="comment">#如果你的这个脚本停了，这个脚本里面的其他程序也停掉</span></span><br><span class="line">stopasgroup=<span class="literal">true</span></span><br><span class="line"><span class="comment">#这个脚本里面的其中一个服务杀掉，其他服务也杀掉</span></span><br><span class="line">killasgroup=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、需要更新启动脚本,每次更改这个启动脚本都要更新，相当于执行systemctl daemon-reload</span><br><span class="line">[root@master01 prometheus]# supervisorctl update</span><br><span class="line">prometheus: added process group</span><br><span class="line"></span><br><span class="line">5、先把后台的2个进程停止掉，</span><br><span class="line">[root@master01 prometheus]# <span class="built_in">jobs</span></span><br><span class="line">[2]-  Running                 /app/node_exporter/node_exporter &amp;  (wd: /app/node_exporter)</span><br><span class="line">[3]+  Running                 /app/prometheus/prometheus --config.file=/app/prometheus/prometheus.yml &amp;</span><br><span class="line">[root@master01 prometheus]# <span class="built_in">kill</span> %1</span><br><span class="line">-bash: <span class="built_in">kill</span>: %1: no such job</span><br><span class="line">[root@master01 prometheus]# <span class="built_in">kill</span> %2</span><br><span class="line">[root@master01 prometheus]# <span class="built_in">kill</span> %3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6、supervisor控制服务的启停</span><br><span class="line">[root@master01 prometheus]# supervisorctl start all</span><br><span class="line">prometheus: started</span><br><span class="line">[root@master01 prometheus]# supervisorctl stop all</span><br><span class="line">prometheus: stopped</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">[root@master01 prometheus]# supervisorctl stop prometheus</span><br><span class="line">prometheus: stopped</span><br><span class="line">[root@master01 prometheus]# supervisorctl start prometheus</span><br><span class="line">prometheus: started</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240926181219003.png" alt="image-20240926181219003"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#supervisor的多服务管理</span></span><br><span class="line">7、编写node_exporter的启动脚本</span><br><span class="line">[root@master01 prometheus]# vim /etc/supervisord.d/prome.ini</span><br><span class="line">[program:prometheus]</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="comment">#加入node_exporter的启停止脚本</span></span><br><span class="line">[program:node_exporter]</span><br><span class="line">directory=/app/node_exporter/</span><br><span class="line"><span class="built_in">command</span>=/bin/bash -c <span class="string">&quot;/app/node_exporter/node_exporter&quot;</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">stdout_logfile=/var/log/node_exporter_stdout.log</span><br><span class="line">stderr_logfile=/var/log/node_exporter_stderr.log</span><br><span class="line">user=root</span><br><span class="line">stopsignal=TERM</span><br><span class="line">startsecs=5</span><br><span class="line">startretries=3</span><br><span class="line">stopasgroup=<span class="literal">true</span></span><br><span class="line">killasgroup=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">8、更新启动脚本</span><br><span class="line">[root@master01 prometheus]# supervisorctl update</span><br><span class="line">node_exporter: added process group</span><br><span class="line">加进去会自动启动，因为写了autostart=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9、如果使用如下目录，就会2个服务一起启动或停止</span><br><span class="line">[root@master01 prometheus]# supervisorctl stop all</span><br><span class="line">node_exporter: stopped</span><br><span class="line">prometheus: stopped</span><br><span class="line">[root@master01 prometheus]# supervisorctl start all</span><br><span class="line">node_exporter: started</span><br><span class="line">prometheus: started</span><br><span class="line"></span><br><span class="line">[root@master01 ~]# supervisorctl status</span><br><span class="line">node_exporter                    RUNNING   pid 33788, <span class="built_in">uptime</span> 0:05:37</span><br><span class="line">prometheus                       RUNNING   pid 33789, <span class="built_in">uptime</span> 0:05:37</span><br></pre></td></tr></table></figure><p>5、安装pushgateway</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">1、安装</span><br><span class="line">[root@master01 ~]# tar xf pushgateway-1.10.0.linux-amd64.tar.gz  -C /app/</span><br><span class="line">[root@master01 ~]# <span class="built_in">mv</span> /app/pushgateway-1.10.0.linux-amd64/ /app/pushgateway-1.10.0</span><br><span class="line">[root@master01 ~]# <span class="built_in">ln</span> -s /app/pushgateway-1.10.0/ /app/pushgateway</span><br><span class="line"></span><br><span class="line">2、启动命令</span><br><span class="line">[root@master01 ~]# /app/pushgateway/pushgateway</span><br><span class="line"></span><br><span class="line">3、修改启动脚本</span><br><span class="line">[root@master01 ~]# vim /etc/supervisord.d/prome.ini</span><br><span class="line">[program:prometheus]</span><br><span class="line">[program:node_exporter]</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="comment">#加入pushgateway的启停止脚本</span></span><br><span class="line">[program:pushgateway]</span><br><span class="line">directory=/app/pushgateway/</span><br><span class="line"><span class="built_in">command</span>=/bin/bash -c <span class="string">&quot;/app/pushgateway/pushgateway&quot;</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">stdout_logfile=/var/log/pushgateway_stdout.log</span><br><span class="line">stderr_logfile=/var/log/pushgateway_stderr.log</span><br><span class="line">user=root</span><br><span class="line">stopsignal=TERM</span><br><span class="line">startsecs=5</span><br><span class="line">startretries=3</span><br><span class="line">stopasgroup=<span class="literal">true</span></span><br><span class="line">killasgroup=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">4、更新启动脚本</span><br><span class="line">[root@master01 prometheus]# supervisorctl update</span><br><span class="line">pushgateway: added process group</span><br><span class="line"></span><br><span class="line">[root@master01 ~]# supervisorctl status</span><br><span class="line">node_exporter                    RUNNING   pid 33788, <span class="built_in">uptime</span> 1:20:01</span><br><span class="line">prometheus                       RUNNING   pid 33789, <span class="built_in">uptime</span> 1:20:01</span><br><span class="line">pushgateway                      RUNNING   pid 77783, <span class="built_in">uptime</span> 0:01:20</span><br><span class="line"></span><br><span class="line">5、浏览器访问</span><br><span class="line">10.0.0.200:9091</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240926195532979.png" alt="image-20240926195532979"></p><p>6、部署alertmanager</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1、安装</span><br><span class="line">[root@master01 ~]# tar xf alertmanager-0.27.0.linux-amd64.tar.gz -C /app/</span><br><span class="line">[root@master01 ~]# <span class="built_in">mv</span> /app/alertmanager-0.27.0.linux-amd64/ /app/alertmanager-0.27.0</span><br><span class="line">[root@master01 ~]# <span class="built_in">ln</span> -s /app/alertmanager-0.27.0/ /app/alertmanager</span><br><span class="line">[root@master01 ~]# ll /app/alertmanager/</span><br><span class="line">里面有配置文件，但是不需要改</span><br><span class="line"></span><br><span class="line">2、查看帮助</span><br><span class="line">[root@master01 ~]# /app/alertmanager/alertmanager  --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">3、启动</span><br><span class="line">[root@master01 ~]# /app/alertmanager/alertmanager  --config.file=/app/alertmanager/alertmanager.yml </span><br><span class="line"></span><br><span class="line">4、浏览器访问</span><br><span class="line">10.0.0.200:9093</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240926194338396.png" alt="image-20240926194338396"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">5、修改启动脚本</span><br><span class="line">[root@master01 ~]# vim /etc/supervisord.d/prome.ini</span><br><span class="line">[program:prometheus]</span><br><span class="line">[program:node_exporter]</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="comment">#加入alertmanager的启停止脚本</span></span><br><span class="line">[program:alertmanager]</span><br><span class="line">directory=/app/alertmanager/</span><br><span class="line"><span class="built_in">command</span>=/bin/bash -c <span class="string">&quot;/app/alertmanager/alertmanager  --config.file=/app/alertmanager/alertmanager.yml &quot;</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">stdout_logfile=/var/log/alertmanager_stdout.log</span><br><span class="line">stderr_logfile=/var/log/alertmanager_stderr.log</span><br><span class="line">user=root</span><br><span class="line">stopsignal=TERM</span><br><span class="line">startsecs=5</span><br><span class="line">startretries=3</span><br><span class="line">stopasgroup=<span class="literal">true</span></span><br><span class="line">killasgroup=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">8、更新启动脚本</span><br><span class="line">[root@master01 ~]# supervisorctl update</span><br><span class="line">alertmanager: added process group</span><br><span class="line"></span><br><span class="line">[root@master01 ~]# supervisorctl status</span><br><span class="line">alertmanager                     RUNNING   pid 77780, <span class="built_in">uptime</span> 0:01:20</span><br><span class="line">node_exporter                    RUNNING   pid 33788, <span class="built_in">uptime</span> 1:20:01</span><br><span class="line">prometheus                       RUNNING   pid 33789, <span class="built_in">uptime</span> 1:20:01</span><br><span class="line">pushgateway                      RUNNING   pid 77783, <span class="built_in">uptime</span> 0:01:20</span><br></pre></td></tr></table></figure><p>7、3台node节点部署node_exporter</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">-----------#3台都要安装------------------------</span><br><span class="line">1、安装node_exporter   </span><br><span class="line">[root@node01 ~]# <span class="built_in">mkdir</span> /app</span><br><span class="line">[root@node01 ~]# tar xf node_exporter-1.8.2.linux-amd64.tar.gz -C /app</span><br><span class="line">[root@node01 ~]# <span class="built_in">mv</span> /app/node_exporter-1.8.2.linux-amd64/ /app/node_exporter-1.8.2</span><br><span class="line">[root@node01 ~]# <span class="built_in">ln</span> -s /app/node_exporter-1.8.2 /app/node_exporter</span><br><span class="line">[root@node01 ~]# <span class="built_in">cd</span> /app/node_exporter</span><br><span class="line">[root@node01 node_exporter]# ll</span><br><span class="line">total 20040</span><br><span class="line">-rw-r--r-- 1 1001 1002    11357 Jul 14 19:57 LICENSE</span><br><span class="line">-rwxr-xr-x 1 1001 1002 20500541 Jul 14 19:54 node_exporter</span><br><span class="line">-rw-r--r-- 1 1001 1002      463 Jul 14 19:57 NOTICE</span><br><span class="line">[root@node01 node_exporter]# yum -y install supervisor</span><br><span class="line">[root@node01 node_exporter]# systemctl start supervisord</span><br><span class="line">[root@node01 node_exporter]# systemctl <span class="built_in">enable</span> supervisord</span><br><span class="line"></span><br><span class="line">2、编写启动脚本</span><br><span class="line">[root@node01 node_exporter]# vim /etc/supervisord.d/prome.ini</span><br><span class="line">[program:node_exporter]</span><br><span class="line">directory=/app/node_exporter/</span><br><span class="line"><span class="built_in">command</span>=/bin/bash -c <span class="string">&quot;/app/node_exporter/node_exporter&quot;</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">stdout_logfile=/var/log/node_exporter_stdout.log</span><br><span class="line">stderr_logfile=/var/log/node_exporter_stderr.log</span><br><span class="line">user=root</span><br><span class="line">stopsignal=TERM</span><br><span class="line">startsecs=5</span><br><span class="line">startretries=3</span><br><span class="line">stopasgroup=<span class="literal">true</span></span><br><span class="line">killasgroup=<span class="literal">true</span></span><br><span class="line">             </span><br><span class="line">[root@node01 node_exporter]# supervisorctl update</span><br><span class="line">node_exporter: added process group</span><br><span class="line">[root@node01 node_exporter]# supervisorctl start all</span><br><span class="line">------------------------------------------------</span><br><span class="line"></span><br><span class="line">--------------#master操作---------------------</span><br><span class="line">3、#master操作</span><br><span class="line">修改prometheus配置文件，将node_exporter的信息加入Prometheus</span><br><span class="line">[root@master01 prometheus-2.54.1]# vim prometheus.yml</span><br><span class="line">......</span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: <span class="string">&quot;prometheus&quot;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&quot;10.0.0.200:9090&quot;</span>]</span><br><span class="line">  - job_name: <span class="string">&quot;node_exporter&quot;</span></span><br><span class="line">    static_configs:</span><br><span class="line">    <span class="comment">#写node_exporter的地址和端口,将node01  02 03的ip端口添加</span></span><br><span class="line">      - targets: [<span class="string">&quot;10.0.0.200:9100&quot;</span>, <span class="string">&quot;10.0.0.201:9100&quot;</span>, <span class="string">&quot;10.0.0.202:9100&quot;</span>, <span class="string">&quot;10.0.0.203:9100&quot;</span>]</span><br><span class="line">      </span><br><span class="line">4、重启</span><br><span class="line">[root@master01 prometheus]# supervisorctl restart all</span><br><span class="line"></span><br><span class="line">5、访问页面，可以看到node节点都起来了</span><br><span class="line">10.0.0.200:9090</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240926210750410.png" alt="image-20240926210750410"></p><p>8、3台node节点安装cAdVisor</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、3台node节点拉取cadvisor镜像</span><br><span class="line">docker pull google/cadvisor:latest</span><br><span class="line"></span><br><span class="line">2、运行镜像</span><br><span class="line">[root@node01 ~]# docker run --volume=/:/rootfs:ro --volume=/var/run:/var/run:rw --volume=/sys:/sys:ro --volume=/data/cadvisor:/var/lib/docker.io --publish=8080:8080 --detach=<span class="literal">true</span> --name=cadvisor google/cadvisor:latest</span><br></pre></td></tr></table></figure><h3 id="5、Prometheus自动发现——file-sd-文件发现"><strong>5、Prometheus自动发现——file-sd(文件发现)</strong></h3><p>1、先把Prometheus收集到的node节点在Prometheus的配置文件里面删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、修改配置文件</span><br><span class="line">[root@master01 prometheus-2.54.1]# vim prometheus.yml</span><br><span class="line">......</span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: <span class="string">&quot;prometheus&quot;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&quot;10.0.0.200:9090&quot;</span>]</span><br><span class="line">  - job_name: <span class="string">&quot;node_exporter&quot;</span></span><br><span class="line">    static_configs:</span><br><span class="line">    <span class="comment">#改回只获取master01的</span></span><br><span class="line">      - targets: [<span class="string">&quot;10.0.0.200:9100&quot;</span>]</span><br></pre></td></tr></table></figure><p>2、修改Prometheus配置文件，添加自动发现规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1、修改配置文件</span><br><span class="line">[root@master01 prometheus]# vim prometheus.yml</span><br><span class="line">scrape_configs:</span><br><span class="line">.....</span><br><span class="line"><span class="comment">#添加自动发现规则</span></span><br><span class="line"> - job_name: <span class="string">&quot;prome_file_sd&quot;</span></span><br><span class="line">    file_sd_configs:</span><br><span class="line">    - files:</span><br><span class="line">      - /app/prometheus/file_sd/agent.yml</span><br><span class="line">      refresh_interval: 5s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、创建文件发现配置存放目录</span><br><span class="line">[root@master01 prometheus]# <span class="built_in">mkdir</span> -p /app/prometheus/file_sd</span><br><span class="line"></span><br><span class="line">3、编辑文件发现的配置文件</span><br><span class="line">以后可能像pushgateway也要加进来</span><br><span class="line">[root@master01 prometheus]# vim /app/prometheus/file_sd/agent.yml</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;targets&quot;</span>:  [<span class="string">&quot;10.0.0.201:9100&quot;</span>,<span class="string">&quot;10.0.0.202:9100&quot;</span>,<span class="string">&quot;10.0.0.203:9100&quot;</span>],</span><br><span class="line">    <span class="string">&quot;labels&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;agent&quot;</span>: <span class="string">&quot;node_exporter&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;targets&quot;</span>:  [<span class="string">&quot;10.0.0.201:8080&quot;</span>,<span class="string">&quot;10.0.0.202:8080&quot;</span>,<span class="string">&quot;10.0.0.203:8080&quot;</span>],</span><br><span class="line">    <span class="string">&quot;labels&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;agent&quot;</span>: <span class="string">&quot;cAdVisor&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">      </span><br><span class="line">2、重启Prometheus</span><br><span class="line">[root@master01 prometheus]# supervisorctl restart all</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240927135935380.png" alt="image-20240927135935380"></p><h3 id="6、Prometheus数据格式"><strong>6、Prometheus数据格式</strong></h3><p><strong>①、Prometheus指标类型</strong></p><p><img src="../image/study_img/image-20240927100110091.png" alt="image-20240927100110091"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据描述</span></span><br><span class="line"><span class="comment"># HELP node_cpu_seconds_total Seconds the CPUs spent in each mode.</span></span><br><span class="line"><span class="comment">#数据类型 (下面收集到的数据叫指标，指标类型)</span></span><br><span class="line"><span class="comment"># TYPE node_cpu_seconds_total counter</span></span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;idle&quot;</span>&#125; 335802.19  <span class="comment">#空闲</span></span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;iowait&quot;</span>&#125; 115.16   <span class="comment">#等待</span></span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;irq&quot;</span>&#125; 0    <span class="comment">#</span></span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;nice&quot;</span>&#125; 3.2</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;softirq&quot;</span>&#125; 602.95</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;steal&quot;</span>&#125; 0</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;system&quot;</span>&#125; 11580.34 <span class="comment">#内核态</span></span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;user&quot;</span>&#125; 8994.06   <span class="comment">#用户态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#cpu2个核心的</span></span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;1&quot;</span>,mode=<span class="string">&quot;idle&quot;</span>&#125; 337368.67</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;1&quot;</span>,mode=<span class="string">&quot;iowait&quot;</span>&#125; 10.91</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;1&quot;</span>,mode=<span class="string">&quot;irq&quot;</span>&#125; 0</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;1&quot;</span>,mode=<span class="string">&quot;nice&quot;</span>&#125; 3.41</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;1&quot;</span>,mode=<span class="string">&quot;softirq&quot;</span>&#125; 520.71</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;1&quot;</span>,mode=<span class="string">&quot;steal&quot;</span>&#125; 0</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;1&quot;</span>,mode=<span class="string">&quot;system&quot;</span>&#125; 11293.66</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;1&quot;</span>,mode=<span class="string">&quot;user&quot;</span>&#125; 9194.18</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指标类型    后面的自定义监控要定义指标类型</span></span><br><span class="line">1、gauge：瞬时值，当前最新的值   <span class="comment">#(常用的)</span></span><br><span class="line">比如收集用户最新的登录数量</span><br><span class="line">Gauges是最简单的度量指标，只有一个简单的返回值，或者叫瞬时状态。</span><br><span class="line">例如：我们想衡量一个待处理队列中任务的个数，这个个数是会变化的。</span><br><span class="line">当我们要监控硬盘容量或者内存的使用量，那么就应该使用Gauges的metrics格式来衡量，因为硬盘的容量或者内存的使用量是随时间的推移，不断瞬时且无规则变化的。</span><br><span class="line">这种变化没有规律，当前是多少，采集回来的就是多少。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、counter：计数器类型         <span class="comment">#(常用的)</span></span><br><span class="line">Counters就是计数器，从数据量0开始积累计算，在理想情况下，只能是永远的增长，不会降低(一些特殊情况另说,比如说粉丝数,未必就是只增不减.)。</span><br><span class="line">比如统计一小时，一天，一周，一个月的用户的访问量，这就是一个累加的操作。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、histograms：统计数据的发布情况。比如最小值，最大值，中间值，还有中位数 (很少用)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 举个例子:</span></span><br><span class="line">如果我们想通过监控的方式抓取当天nginx的access.log，并且想监控用户的访问服务出现的故障时间，我们应该怎么做呢?</span><br><span class="line"><span class="comment"># 错误解决方案</span></span><br><span class="line">把日志每行的<span class="string">&quot;http_response_time&quot;</span>数值统统采集下来，然后计算一下总的平均值。这是毫无意义的，因为故障发生时间可能只有一小段时间，比如网络延迟放生在12:30-12:40之间，其它时间都是正常的，如果计算总的平均值，则结果看起来会很正常，无法触发报警功能，运维人员可能也不知道这件事情发生了。</span><br><span class="line"><span class="comment"># 正确解决方案:</span></span><br><span class="line">通过Histograms函数，可以分别统计出全部用户的响应时间在0.05秒,1秒,2秒,5秒,10秒的量。这样运维人员就能根据这个值进行报警，分析这些时间的产生原因，从而避免以后类似的问题发生。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、summary：相当于升级版的histograms</span><br><span class="line">因为histogram在客户端就是简单的分桶计数，在prometheus服务端基于这么有限的数据做百分位估算，所以的确不是很准确，summary就是解决百分位准确的问题而来的。</span><br><span class="line">我们可以简单理解summary是Histogram的扩展类型，如果想要清除的了解histograms和summary的更多细节，可自行查阅相关的文档。</span><br></pre></td></tr></table></figure><p><strong>②、指标数据格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据描述</span></span><br><span class="line"><span class="comment"># HELP node_cpu_seconds_total Seconds the CPUs spent in each mode.</span></span><br><span class="line"><span class="comment">#数据类型 (指标类型)</span></span><br><span class="line"><span class="comment"># TYPE node_cpu_seconds_total counter</span></span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;idle&quot;</span>&#125; 335802.19</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;iowait&quot;</span>&#125; 115.16</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;irq&quot;</span>&#125; 0</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;nice&quot;</span>&#125; 3.2</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;softirq&quot;</span>&#125; 602.95</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;steal&quot;</span>&#125; 0</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;system&quot;</span>&#125; 11580.34</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;user&quot;</span>&#125; 8994.06</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;1&quot;</span>,mode=<span class="string">&quot;idle&quot;</span>&#125; 337368.67</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;1&quot;</span>,mode=<span class="string">&quot;iowait&quot;</span>&#125; 10.91</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;1&quot;</span>,mode=<span class="string">&quot;irq&quot;</span>&#125; 0</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;1&quot;</span>,mode=<span class="string">&quot;nice&quot;</span>&#125; 3.41</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;1&quot;</span>,mode=<span class="string">&quot;softirq&quot;</span>&#125; 520.71</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;1&quot;</span>,mode=<span class="string">&quot;steal&quot;</span>&#125; 0</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;1&quot;</span>,mode=<span class="string">&quot;system&quot;</span>&#125; 11293.66</span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;1&quot;</span>,mode=<span class="string">&quot;user&quot;</span>&#125; 9194.18</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key：node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;idle&quot;</span>&#125; </span><br><span class="line">value：335802.19</span><br><span class="line"></span><br><span class="line"><span class="comment">#指标数据格式就是如下：</span></span><br><span class="line">1、要有一行描述</span><br><span class="line">2、要有一行指标类型定义</span><br><span class="line">3、真实数据(数据格式是Key value)</span><br><span class="line"></span><br><span class="line">以后自定义监控收集到的数据要组成key value的形式</span><br></pre></td></tr></table></figure><p><strong>③、PromeQL查询结果的类型</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PromQL的表达式中支持一下4种数据类型</span><br><span class="line">1、即时向量(Instant Vector):</span><br><span class="line">特定或全部的时间序列集合上，具有相同时间戳的一组样本称为即时向量。</span><br><span class="line"></span><br><span class="line">2、范围向量(Range Vector):</span><br><span class="line">特定或全部的时间序列集合上，在指定的同一范围内的所有样本值</span><br><span class="line"></span><br><span class="line">3、标量(Scalar):</span><br><span class="line">一个浮点型的数据值。带小数点的</span><br><span class="line"></span><br><span class="line">4、字符串(String)：</span><br><span class="line">支持使用单引号，双引号或反引号进行引用，但反引号中不会转移字符进行转义</span><br></pre></td></tr></table></figure><p>1、即时向量</p><p><img src="../image/study_img/image-20240927151046205.png" alt="image-20240927151046205"></p><p>这些数据在同一时刻，同一秒，汇成一台线的数据值，叫即时向量，每一个指标在同一个时间点获取到的数据值</p><p>2、范围向量   比如从10点~11点查出来的结果集</p><p><strong>③、Prometheus常用的函数</strong></p><p>1、increase函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">increase函数：求指定时间内的增量</span><br><span class="line">    在prometheus中是用来针对Counter这种持续增长的数值，截取其中的一段时间的增量。</span><br><span class="line"></span><br><span class="line"><span class="comment">#举个例子:</span></span><br><span class="line">increase(node_cpu_seconds_total[1m]):</span><br><span class="line">    获取CPU总使用时间在1分钟内的增量，计算的是1分钟内增加的总量。</span><br><span class="line">    在实际工作中，我们的服务器通常是多核的，因此这个采集的是所有核心的值哟。</span><br><span class="line">increase(node_cpu_seconds_total&#123;instance=<span class="string">&quot;10.0.0.101:9100&quot;</span>&#125;[100m]):</span><br><span class="line">     我们也可以借助标签选择器过滤查看某个服务器实例的配置.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cpu 1分钟的增长量</span><br><span class="line">increase(node_cpu_seconds_total&#123;instance=<span class="string">&#x27;10.0.0.202:9100&#x27;</span>,job=<span class="string">&#x27;prome_file_sd&#x27;</span>,mode=<span class="string">&#x27;system&#x27;</span>&#125;[1m])</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240927102930773.png" alt="image-20240927102930773"></p><p><img src="../image/study_img/image-20240927153951299.png" alt="image-20240927153951299"></p><p>2、sum函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>函数: 主要是起到加和的作用。</span><br><span class="line"></span><br><span class="line"><span class="comment">#举个例子:</span></span><br><span class="line"><span class="built_in">sum</span>(increase(node_cpu_seconds_total[1m])):</span><br><span class="line"><span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;job=<span class="string">&#x27;prome_file_sd&#x27;</span>,mode=<span class="string">&#x27;system&#x27;</span>&#125;[1m]))</span><br><span class="line">    在<span class="string">&quot;increase(node_cpu[1m])&quot;</span>外面套用一个<span class="built_in">sum</span>函数就可以把所有CPU核心数在1分钟内的增量做一个累加。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;instance=<span class="string">&#x27;10.0.0.202:9100&#x27;</span>,job=<span class="string">&#x27;prome_file_sd&#x27;</span>,mode=<span class="string">&#x27;system&#x27;</span>&#125;[1m]))</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240927103557200.png" alt="image-20240927103557200"></p><p>3、by函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">by函数:</span><br><span class="line">   将数据进行分组，类似于MySQL的<span class="string">&quot;group by&quot;</span>。</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="comment">#举个例子:</span></span><br><span class="line">by (instance):</span><br><span class="line">    这里的<span class="string">&quot;instance&quot;</span>代表的是机器名称，意思是将数据按照instance标签进行强行拆分。</span><br><span class="line">    该函数通常会和<span class="built_in">sum</span>函数搭配使用，比如<span class="string">&quot;(sum(increase(node_cpu_seconds_total[1m]))by (instance))&quot;</span>,表示把<span class="built_in">sum</span>函数中累加和按照<span class="string">&quot;instance&quot;</span>(机器名称)强行拆分成多组数据。当然，如果只有一个机器名称的话，你会发现只有一组数据，因此从结果上可能看不到明显的变化哟。</span><br><span class="line"></span><br><span class="line">温馨提示:</span><br><span class="line">instance是node_exporter内置的标签，当然，我们也可以自定义标签，比如根据生产环境中不同的集群添加相应的标签。比如基于自定义的<span class="string">&quot;cluster_name&quot;</span>标签进行分组等。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;job=<span class="string">&#x27;prome_file_sd&#x27;</span>,mode=<span class="string">&#x27;system&#x27;</span>&#125;[1m]))by(instance)</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(increase(node_cpu_seconds_total&#123;agent=<span class="string">&#x27;node_exporter&#x27;</span>,mode=<span class="string">&#x27;system&#x27;</span>&#125;[1m])) by(instance)</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240927104801961.png" alt="image-20240927104801961"></p><p>4、rate函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">rate函数:</span><br><span class="line">    它的功能是按照设置的一个时间段，取counter在这个时间段中的平均每秒的增量。因此是专门搭配counter类型数据使用的函数。</span><br><span class="line"></span><br><span class="line"><span class="comment">#举个例子:</span></span><br><span class="line">    rate(node_cpu_seconds_total[1m]):</span><br><span class="line">获取CPU总使用时间在1分钟内的增加的总量并除以60秒，计算的是每秒的增量。</span><br><span class="line"></span><br><span class="line">    rate(node_network_receive_bytes_total[1m]):</span><br><span class="line">获取一分钟内网络接收的总量。</span><br><span class="line">查看的时间越短，某一瞬间的突起或降低在成图的时候会体现的更细致，更敏感。</span><br><span class="line"></span><br><span class="line">    rate(node_network_receive_bytes_total[20m])</span><br><span class="line">获取二十分钟内网络接收的总量。</span><br><span class="line">查看的时间越长，那么当发生瞬间的突起或降低时候，会显得平缓一些，因为取得时间段越长会把波峰波谷都给平均消下去了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#increase函数和rate函数如此相似如何选择?</span></span><br><span class="line">(1)对于采集频率较低的数据采用建议使用increase函数，因为使用rate函数可能会出现断点(比如按照5分钟采样数据量较小的场景，以采集硬盘可用容量为例，可能会出现某次采集数据未采集到的情况，因为会按照平均每秒来计算最终的增量)的情况;</span><br><span class="line"></span><br><span class="line">(2)对于采集频率较高的数据采用建议使用rate函数，比如对CPU，内存，网络流量等都可以基于rate函数来采样，当然，硬盘也是可以用rate函数来采样的哟;</span><br><span class="line">温馨提示:</span><br><span class="line"></span><br><span class="line">在实际工作中，我们取监控频率为1分钟还是5分钟这取决与我们对于监控数据的敏感程度来挑选。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rate(node_cpu_seconds_total&#123;agent=<span class="string">&#x27;node_exporter&#x27;</span>,mode=<span class="string">&#x27;system&#x27;</span>&#125;[1m])</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240927105435679.png" alt="image-20240927105435679"></p><p>5、irate函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  irate函数：主要用于计算向量（通常是Counter类型的时间序列）在每个时间范围内的每秒瞬时增长率。与rate函数不同，irate特别关注于时间范围内的最后两个数据点，通过这两个点的差值除以它们之间的时间差来得到瞬时增长率。这种方式使得irate在捕捉快速变化或波动较大的数据时更加敏感。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#举个例子:</span></span><br><span class="line">假设有一个名为http_requests_total的Counter类型时间序列，记录了HTTP请求的总数。要计算过去5分钟内每秒的HTTP请求瞬时增长率，可以使用以下PromQL表达式：</span><br><span class="line">irate(http_requests_total[5m])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">irate(node_cpu_seconds_total&#123;agent=<span class="string">&#x27;node_exporter&#x27;</span>,mode=<span class="string">&#x27;system&#x27;</span>&#125;[1m])</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240927105526235.png" alt="image-20240927105526235"></p><p>6、topk函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">topk函数:</span><br><span class="line">    取top榜的前n名。实际使用的时候一般会用该函数进行瞬时报警，而不是为了观察曲线图。</span><br><span class="line"></span><br><span class="line"><span class="comment">#举个例子:</span></span><br><span class="line">     topk(3,rate(node_cpu_seconds_total[1m])):</span><br><span class="line">获取CPU总使用时间在1分钟内的增加的总量并除以60秒，计算的是每秒的数量。并只查看top3。</span><br><span class="line"></span><br><span class="line">温馨提示:</span><br><span class="line">我们通常使用topk只会关注<span class="string">&quot;Console&quot;</span>中的瞬时结果，不太会关心Graph的出图效果，因为关注他并没有太大意义，存在太多的断点啦！</span><br><span class="line">如果出图会出现中断的情况，是因为在xx分钟内这一刻的数据其并没有排进top3，自然就会出现断点的状况</span><br><span class="line"></span><br><span class="line">topk(10,rate(node_cpu_seconds_total&#123;agent=<span class="string">&#x27;node_exporter&#x27;</span>&#125;[1m]))</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240927161431883.png" alt="image-20240927161431883"></p><p>7、count函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">count(container_last_seen&#123;instance=<span class="string">&#x27;10.0.0.201:8080&#x27;</span>,image!=<span class="string">&#x27;&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">count函数:</span><br><span class="line">    把数值符合条件的，输出数目进行累计加和。一般用它进行一些模糊的监控判断。</span><br><span class="line">    比如说企业中有100台服务器，那么只有10台服务器CPU使用率高于80%的时候，这个时候不需要报警，当符合80%CPU的服务器数量超过70台的时候那么就触发报警。</span><br><span class="line"></span><br><span class="line"><span class="comment">#举个例子:</span></span><br><span class="line">    count(aaa_tcp_wait_conn &gt; 500):</span><br><span class="line">我们假设aaa_tcp_wait_conn是咱们自定义的KEY，上述案例是找出当前(或者历史的)当前TCP等待数大于500的机器数量。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#统计node01上有多少台容器</span></span><br><span class="line">image!=<span class="string">&#x27;&#x27;</span>  image不等于空的就是容器</span><br><span class="line"></span><br><span class="line">count统计他有多少行</span><br><span class="line">count(container_last_seen&#123;instance=<span class="string">&#x27;10.0.0.201:8080&#x27;</span>,image!=<span class="string">&#x27;&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240927162241644.png" alt="image-20240927162241644"></p><p><strong>函数练习：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1、计算各节点的CPU的总使用率，参考公式:100%-(CPU空闲时间/总时间)</span><br><span class="line">(1)我们需要先找到查看CPU的key名称</span><br><span class="line">node_cpu_seconds_total</span><br><span class="line"></span><br><span class="line">(2)按机器分组，计算出每个机器的空闲时间</span><br><span class="line"><span class="built_in">sum</span>(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;idle&#x27;</span>&#125;)by(instance)</span><br><span class="line"></span><br><span class="line">(3)按机器分组，计算出每个机器的总时间</span><br><span class="line"><span class="built_in">sum</span>(node_cpu_seconds_total) by(instance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(4)CPU空闲时间/总时间=空闲率</span><br><span class="line"><span class="built_in">sum</span>(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;idle&#x27;</span>&#125;)by(instance)/sum(node_cpu_seconds_total) by(instance)</span><br><span class="line"></span><br><span class="line">(5)每台机器的CPU的总使用率</span><br><span class="line">1-(<span class="built_in">sum</span>(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;idle&#x27;</span>&#125;)by(instance)/sum(node_cpu_seconds_total) by(instance))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、计算用户态的CPU使用率</span><br><span class="line"><span class="built_in">sum</span>(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;user&#x27;</span>&#125;)by(instance)/sum(node_cpu_seconds_total) by(instance)</span><br><span class="line"></span><br><span class="line">3、计算内核态的CPU使用率</span><br><span class="line"><span class="built_in">sum</span>(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;system&#x27;</span>&#125;)by(instance)/sum(node_cpu_seconds_total) by(instance)</span><br><span class="line"></span><br><span class="line">4、计算IO等待的CPU使用率</span><br><span class="line"><span class="built_in">sum</span>(node_cpu_seconds_total&#123;mode=<span class="string">&#x27;iowait&#x27;</span>&#125;)by(instance)/sum(node_cpu_seconds_total) by(instance)</span><br></pre></td></tr></table></figure><h3 id="7、使用pushgateway自定义监控"><strong>7、使用pushgateway自定义监控</strong></h3><p><strong>pushgateway介绍</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用脚本监控将数据推送到pushgateway上，Promethues从pushgateway中拉取数据 (可以把pushgateway当初Prometheus的客户端，Prometheus也是拉取数据)</span><br><span class="line"></span><br><span class="line">它是可以单独运行在任何节点(不一定是在被监控客户端)上的插件，然后通过用户自定义开发脚本把需要监控的数据发送给pushgateway，再由pushgateway暴露http接口,而后由把prometheus server去pull数据。</span><br><span class="line"></span><br><span class="line">pushgateway组件本身是没有任何抓取监控数据功能的，它只能被动的等待监控数据被推送过来。</span><br></pre></td></tr></table></figure><p><strong>Prometheus关联pushgateway</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方法一：修改Prometheus配置文件</span></span><br><span class="line">[root@master01 prometheus]# vim prometheus.yml</span><br><span class="line">scrape_configs:</span><br><span class="line">.....</span><br><span class="line"><span class="comment">#添加自动发现规则</span></span><br><span class="line"> - job_name: <span class="string">&quot;prome_file_sd&quot;</span></span><br><span class="line">    file_sd_configs:</span><br><span class="line">    - files:</span><br><span class="line">      - /app/prometheus/file_sd/agent.yml</span><br><span class="line">      refresh_interval: 5s</span><br><span class="line"></span><br><span class="line">2、重启Prometheus</span><br><span class="line">[root@master01 prometheus]# supervisorctl restart all</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二：编辑文件发现的配置文件</span></span><br><span class="line">以后可能像pushgateway也要加进来</span><br><span class="line">[root@master01 prometheus]# vim /app/prometheus/file_sd/agent.yml</span><br><span class="line">[</span><br><span class="line">.....</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="string">&quot;targets&quot;</span>:  [<span class="string">&quot;10.0.0.200:9091&quot;</span>],</span><br><span class="line">    <span class="string">&quot;labels&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;agent&quot;</span>: <span class="string">&quot;pushgateway&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">      </span><br><span class="line"><span class="comment">#不需要重启</span></span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240930182759622.png" alt="image-20240930182759622"></p><p><strong>pushgateway的优缺点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pushgateway默认会有一些数据，并不多，主要是自定义，我们自定义数据要写脚本，只要能写脚本获取到的数据都可以监控</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#优点:</span></span><br><span class="line">灵活性更强。</span><br><span class="line"></span><br><span class="line"><span class="comment">#缺点:</span></span><br><span class="line">(1)存在单点瓶颈，假如有多个脚本同时发给一个pushgateway进程，如果该pushgateway进程挂掉了，那么监控数据也就没了。</span><br><span class="line">(2)pushgateway并不能对发送过来的脚本采集数据进行更智能的判断，假如脚本中间采集出了问题，那么有问题的数据pushgateway组件会照单全收发送给Prometheus server。(也就是说他不能做判断，收集到啥就传啥，所以写的脚本一定要精确)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">温馨提示:</span><br><span class="line">对于缺点一，建议大家在生产环境中多开启几个pushgateway进程，前面加个负载均衡，以便于备份使用。</span><br><span class="line">如果使用负载均衡，配置文件的写法是：</span><br><span class="line">[root@master01 prometheus]# vim /app/prometheus/file_sd/agent.yml</span><br><span class="line">[</span><br><span class="line">.....</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="string">&quot;targets&quot;</span>:  [<span class="string">&quot;用域名或者负载均衡的ip:9091&quot;</span>],</span><br><span class="line">    <span class="string">&quot;labels&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;agent&quot;</span>: <span class="string">&quot;pushgateway&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">对于缺点二，建议大家在编写脚本时要注意业务逻辑，尽可能避免脚本出错的情况发生。</span><br></pre></td></tr></table></figure><p><strong>单个数据自定义监控——用户登录数量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先你想监控哪台机器，就把脚本写在哪个机器上</span></span><br><span class="line"></span><br><span class="line">1、编写自定义监控——用户登录数量的脚本</span><br><span class="line">[root@node03 ~]# vim user_count.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#获取主机名hostname -s短的主机名  hostname长的主机名</span></span><br><span class="line">INSTANCE_NAME=$(hostname -s)</span><br><span class="line"><span class="comment">#判断如果是没有修改主机名就报错</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$INSTANCE_NAME</span>&quot;</span> == <span class="string">&quot;localhost&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;必须要完整的主机名&quot;</span></span><br><span class="line">   <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义Prometheus抓取到的监控项的key名字，</span></span><br><span class="line">METRICS_NAME=<span class="string">&quot;user_count&quot;</span></span><br><span class="line"><span class="comment">#获取用户的登录数量(监控项的值的获取)</span></span><br><span class="line">USER_COUNT_VALUE=$(<span class="built_in">uptime</span> |grep -Po <span class="string">&#x27;[0-9]+(?= user)&#x27;</span>)</span><br><span class="line"><span class="comment">#发送数据  把echo的内容交给curl --data-binary 发送二进制的数据,后面的路径可以自定义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$METRICS_NAME</span> <span class="variable">$USER_COUNT_VALUE</span>&quot;</span> |curl --data-binary @- http://10.0.0.200:9091/metrics/job/sh_job/instance/<span class="variable">$INSTANCE_NAME</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、执行脚本</span><br><span class="line">[root@node03 ~]# sh user_count.sh</span><br><span class="line"></span><br><span class="line">3、查看页面</span><br><span class="line">10.0.0.200:9091</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240930202019536.png" alt="image-20240930202019536"></p><p>首先图中的数据类型是 UNTYPED 我并没有定义数据类型的,查看数据指标10.0.0.200:9091/metric，他自己加的untype</p><p><img src="../image/study_img/image-20240930203034740.png" alt="image-20240930203034740"></p><p>Prometheus查看数据</p><p><img src="../image/study_img/image-20240930202427231.png" alt="image-20240930202427231"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">user_count&#123;agent=<span class="string">&quot;pushgateway&quot;</span>, exported_instance=<span class="string">&quot;node03&quot;</span>, exported_job=<span class="string">&quot;sh_job&quot;</span>, instance=<span class="string">&quot;10.0.0.200:9091&quot;</span>, job=<span class="string">&quot;prome_file_sd&quot;</span>&#125;   显示的结果是自定义的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上面提到过</span><br><span class="line"><span class="comment">#指标数据格式就是如下：</span></span><br><span class="line">1、要有一行描述</span><br><span class="line">2、要有一行指标类型定义</span><br><span class="line">3、真实数据(数据格式是Key value)</span><br><span class="line"><span class="comment">#数据描述</span></span><br><span class="line"><span class="comment"># HELP node_cpu_seconds_total Seconds the CPUs spent in each mode.</span></span><br><span class="line"><span class="comment">#数据类型 (指标类型)</span></span><br><span class="line"><span class="comment"># TYPE key名字 counter</span></span><br><span class="line">node_cpu_seconds_total&#123;cpu=<span class="string">&quot;0&quot;</span>,mode=<span class="string">&quot;idle&quot;</span>&#125; 335802.19</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、修改脚本，定义数据类型,并加上循环</span><br><span class="line">[root@node03 ~]# vim user_count.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></span><br><span class="line">  <span class="comment">#获取主机名hostname -s短的主机名  hostname长的主机名</span></span><br><span class="line">  INSTANCE_NAME=$(hostname -s)</span><br><span class="line">  <span class="comment">#判断如果是没有修改主机名就报错</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$INSTANCE_NAME</span>&quot;</span> == <span class="string">&quot;localhost&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;必须要完整的主机名&quot;</span></span><br><span class="line">     <span class="built_in">exit</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#定义Prometheus抓取到的监控项的key名字，</span></span><br><span class="line">  METRICS_NAME=<span class="string">&quot;user_count&quot;</span></span><br><span class="line">  <span class="comment">#获取用户的登录数量(监控项的值的获取)</span></span><br><span class="line">  USER_COUNT_VALUE=$(<span class="built_in">uptime</span> |grep -Po <span class="string">&#x27;[0-9]+(?= user)&#x27;</span>)</span><br><span class="line">  <span class="comment">#发送数据  把echo的内容交给curl --data-binary 发送二进制的数据,后面的路径可以自定义 \n回车  gauge：瞬时值，当前最新的值</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;# TYPE <span class="variable">$&#123;METRICS_NAME&#125;</span> gauge\n<span class="variable">$METRICS_NAME</span> <span class="variable">$USER_COUNT_VALUE</span>&quot;</span> |curl --data-binary @- http://10.0.0.200:9091/metrics/job/sh_job/instance/<span class="variable">$INSTANCE_NAME</span></span><br><span class="line">  <span class="built_in">sleep</span> 1</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、由于脚本里面写了死循环，不能直接执行脚本，可以用supervisor去管理</span><br><span class="line">以后所以得监控脚本都可以放这里，所有的监控项都可以起来</span><br><span class="line">[root@node03 ~]# vim /etc/supervisord.d/push.ini </span><br><span class="line">[program:user_count]</span><br><span class="line"><span class="comment">#这里建议脚本建一个目录存放</span></span><br><span class="line">directory=/root</span><br><span class="line"><span class="built_in">command</span>=/bin/bash -c <span class="string">&quot;/bin/sh /root/user_count.sh&quot;</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">stdout_logfile=/var/log/node_exporter_stdout.log</span><br><span class="line">stderr_logfile=/var/log/node_exporter_stderr.log</span><br><span class="line">user=root</span><br><span class="line">stopsignal=TERM</span><br><span class="line">startsecs=5</span><br><span class="line">startretries=3</span><br><span class="line">stopasgroup=<span class="literal">true</span></span><br><span class="line">killasgroup=<span class="literal">true</span></span><br><span class="line">[root@node03 ~]# supervisorctl update</span><br><span class="line">[root@node03 ~]# supervisorctl restart all</span><br><span class="line">[root@node03 ~]# supervisorctl status</span><br><span class="line">node_exporter                    RUNNING   pid 8440, <span class="built_in">uptime</span> 1 day, 12:35:41</span><br><span class="line">user_count                       RUNNING   pid 107360, <span class="built_in">uptime</span> 0:02:39</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6、验证是否运行</span><br><span class="line">多开几个终端，去Prometheus里面查询数据</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240930212805096.png" alt="image-20240930212805096"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命令行简历监控数据</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;# TYPE key名字 gauge\nkey名字 value&quot;</span> |curl --data-binary @- http://10.0.0.200:9091/metrics/job/项目名/instance/主机名</span><br><span class="line"></span><br><span class="line">[root@node03 ~]# <span class="built_in">echo</span> -e <span class="string">&quot;# TYPE aaa gauge\naaa 111&quot;</span> |curl --data-binary @- http://10.0.0.200:9091/metrics/job/aaa/instance/node03</span><br><span class="line"></span><br><span class="line">数据指标中就会生成aaa的key</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240930224338728.png" alt="image-20240930224338728"></p><p><img src="../image/study_img/image-20240930224429624.png" alt="image-20240930224429624"></p><p><strong>多个数据自定义监控——监控容器运行时间</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">获取cadvisor的运行时间</span><br><span class="line">[root@node03 ~]# docker inspect -f <span class="string">&#x27;&#123;&#123;.State.StartedAt&#125;&#125;&#x27;</span> cadvisor</span><br><span class="line">2024-09-30T10:06:13.136629499Z</span><br><span class="line">[root@node03 ~]# docker inspect -f <span class="string">&#x27;&#123;&#123;.State.StartedAt&#125;&#125;&#x27;</span> cadvisor</span><br><span class="line">2024-09-30T10:06:13.136629499Z</span><br><span class="line">[root@node03 ~]# docker inspect -f <span class="string">&#x27;&#123;&#123;.State.StartedAt&#125;&#125;&#x27;</span> cadvisor</span><br><span class="line">2024-09-30T10:06:13.136629499Z</span><br><span class="line">[root@node03 ~]# <span class="built_in">date</span> +%s -d 2024-09-30T10:06:13.136629499Z</span><br><span class="line">1727690773</span><br><span class="line">[root@node03 ~]# <span class="built_in">date</span> +%s </span><br><span class="line">1727708230</span><br><span class="line">[root@node03 ~]# <span class="built_in">let</span> res=1727708230-1727690773</span><br><span class="line">[root@node03 ~]# <span class="built_in">echo</span> <span class="variable">$res</span></span><br><span class="line">17457</span><br><span class="line">[root@node03 ~]# python</span><br><span class="line">&gt;&gt;&gt; 17457/60/60</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span><span class="string">&quot;# TYPE <span class="variable">$&#123;metrics_name&#125;</span> gauge  </span></span><br><span class="line"><span class="string"># HELP <span class="variable">$&#123;metrics_name&#125;</span> time sec&quot;</span><span class="string">&quot;&quot;</span> &gt; docker_temp.log</span><br><span class="line"></span><br><span class="line">1、编写多个数据自定义监控——监控容器运行时间的脚本</span><br><span class="line">[root@node03 ~]# vim runtime.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></span><br><span class="line"><span class="comment">#获取主机名hostname -s短的主机名  hostname长的主机名</span></span><br><span class="line">instance_name=$(hostname -s)</span><br><span class="line">metrics_name=docker_runtime</span><br><span class="line"><span class="comment">#判断如果是没有修改主机名就报错</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$instance_name</span>&quot;</span> == <span class="string">&quot;localhost&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;必须要完整的主机名&quot;</span></span><br><span class="line">   <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所以运行容器的名称 &#123;&#123;.Names&#125;&#125;相当于金甲模版的调用变量</span></span><br><span class="line">allname=$(docker ps --format <span class="string">&quot;&#123;&#123;.Names&#125;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">docker_run</span></span>()&#123;</span><br><span class="line">      <span class="comment">#获取各个容器的启动时间</span></span><br><span class="line">      start_time=$(docker inspect -f <span class="string">&#x27;&#123;&#123;.State.StartedAt&#125;&#125;&#x27;</span> <span class="variable">$1</span>)</span><br><span class="line">      <span class="comment">#将时间转换位时间戳</span></span><br><span class="line">      time1=$(<span class="built_in">date</span> +%s -d <span class="string">&quot;<span class="variable">$start_time</span>&quot;</span>)</span><br><span class="line">      <span class="comment">#获取当前的时间戳</span></span><br><span class="line">      time2=$(<span class="built_in">date</span> +%s)</span><br><span class="line">      <span class="comment">#计算运行时间</span></span><br><span class="line">      <span class="built_in">let</span> tt=<span class="variable">$time2</span>-<span class="variable">$time1</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$tt</span></span><br><span class="line">      <span class="built_in">return</span> <span class="variable">$tt</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将需要往pushgateway上传的数据写入&quot;docker_temp.log&quot;文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# TYPE <span class="variable">$&#123;metrics_name&#125;</span> gauge&quot;</span> &gt; docker_temp.log  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# HELP <span class="variable">$&#123;metrics_name&#125;</span> time sec&quot;</span> &gt;&gt; docker_temp.log</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;allname&#125;</span>;<span class="keyword">do</span></span><br><span class="line">    start_time=$(docker_run <span class="variable">$i</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$metrics_name</span>&#123;name=\&quot;<span class="variable">$i</span>\&quot;,aaa=\&quot;xxx\&quot;&#125; <span class="variable">$start_time</span>&quot;</span> &gt;&gt;  docker_temp.log <span class="comment"># 格式化写入数据</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改地址和参数名向特定的url上传数据，数据在doceker_temp.log文件中</span></span><br><span class="line"><span class="comment">#curl 二进制 @文件名 把个文件里面的内容交给后面的url</span></span><br><span class="line">curl --data-binary <span class="string">&quot;@docker_temp.log&quot;</span> http://10.0.0.200:9091/metrics/job/docker_runtime/instance/<span class="variable">$instance_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#情况临时文件</span></span><br><span class="line"><span class="comment">#rm -rf docker_temp.log</span></span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">2、将脚本加入supervisor</span><br><span class="line">[root@node03 ~]# vim /etc/supervisord.d/push.ini </span><br><span class="line">[program:docker_runtime]</span><br><span class="line">directory=/root</span><br><span class="line"><span class="built_in">command</span>=/bin/bash -c <span class="string">&quot;/bin/sh /root/runtime.sh&quot;</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">stdout_logfile=/var/log/node_exporter_stdout.log</span><br><span class="line">stderr_logfile=/var/log/node_exporter_stderr.log</span><br><span class="line">user=root</span><br><span class="line">stopsignal=TERM</span><br><span class="line">startsecs=5</span><br><span class="line">startretries=3</span><br><span class="line">stopasgroup=<span class="literal">true</span></span><br><span class="line">killasgroup=<span class="literal">true</span></span><br><span class="line">[root@node03 ~]# supervisorctl update</span><br><span class="line">[root@node03 ~]# supervisorctl status</span><br><span class="line">docker_runtime                   RUNNING   pid 29434, <span class="built_in">uptime</span> 0:00:07</span><br><span class="line">node_exporter                    RUNNING   pid 8372, <span class="built_in">uptime</span> 5:48:45</span><br><span class="line">user_count                       RUNNING   pid 8374, <span class="built_in">uptime</span> 5:48:45</span><br><span class="line"></span><br><span class="line">3、浏览器访问</span><br><span class="line">10.0.0.200:9091          10.0.0.200:9091/metrics</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20241001220001771.png" alt="image-20241001220001771"></p><p><img src="../image/study_img/image-20241001220252497.png" alt="image-20241001220252497"></p><p>Prometheus查看数据</p><p><img src="../image/study_img/image-20241001220418085.png" alt="image-20241001220418085"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">验证没问题之后，把脚本发送给其他node节点，并执行，就可以获取到数据了</span><br></pre></td></tr></table></figure><p><strong>监控内存使用率    (这个是自带的，不需要写脚本，直接可以查出来)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">参考案例:</span><br><span class="line">(1 - (node_memory_Buffers_bytes + node_memory_Cached_bytes + node_memory_MemFree_bytes) / node_memory_MemTotal_bytes) * 100</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20241001223311889.png" alt="image-20241001223311889"></p><p><strong>监控硬盘的使用情况    (这个是自带的，不需要写脚本，直接可以查出来)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参考案例:</span><br><span class="line">(node_filesystem_free_bytes / node_filesystem_size_bytes) &lt; 0.95</span><br><span class="line"></span><br><span class="line">温馨提示:</span><br><span class="line">(1)生产环境中建议大家将0.95改为0.20，表示当空闲硬盘小于20%的时候就显示在图上;</span><br><span class="line">(2)我之所以写0.95是因为我的空闲硬盘挺大的，为了让大家看到出图的效果而已。</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20241001223441812.png" alt="image-20241001223441812"></p><p><strong>监控硬盘I/O使用情况  (这个是自带的，不需要写脚本，直接可以查出来)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参考案例:</span><br><span class="line">rate(node_network_transmit_bytes_total[1m]) / 1024 / 1024</span><br><span class="line"></span><br><span class="line">node_network_transmit_bytes_total:</span><br><span class="line">网络传输字节数。</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20241001223636224.png" alt="image-20241001223636224"></p><p><strong>监控文件描述符</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">参考案例:</span><br><span class="line">(node_filefd_allocated / node_filefd_maximum) * 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">node_filefd_allocated:</span><br><span class="line">已分配的文件描述符。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">node_filefd_maximum:</span><br><span class="line">一个进程运行最大打开文件描述符的总量。</span><br><span class="line"></span><br><span class="line">(1)编写脚本</span><br><span class="line">[root@docker201 ~]# vim network_delay.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#instance_name=`hostname -i` # 该指令要求hosts文件必须有解析</span></span><br><span class="line">instance_name=$(hostname -s) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 要求机器名不能是&quot;localhost&quot;不然标签就没有区分了</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$instance_name</span> == <span class="string">&quot;localhost&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Must FQDN hostname&quot;</span></span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定需要ping的主机</span></span><br><span class="line">monitoring_site=<span class="string">&quot;www.aaa.com&quot;</span></span><br><span class="line"><span class="comment"># 获取丢包率相关字段</span></span><br><span class="line"><span class="comment"># -q:</span></span><br><span class="line"><span class="comment"># 安静模式ping，即不输出每次ping的返回的中间结果，仅返回最终的结果。</span></span><br><span class="line"><span class="comment"># -A:</span></span><br><span class="line"><span class="comment"># 启用并行的ping效果，可以加快ping的处理过程。</span></span><br><span class="line"><span class="comment"># -s:</span></span><br><span class="line"><span class="comment"># 一个ping包的大小。</span></span><br><span class="line"><span class="comment"># -W:</span></span><br><span class="line"><span class="comment"># 执行ping命令最大的延迟等待时间(timeout),以ms为单位。</span></span><br><span class="line"><span class="comment"># -c:</span></span><br><span class="line"><span class="comment"># 发送多少个数据包。</span></span><br><span class="line">package_loss_rate=`<span class="built_in">timeout</span> 5 ping -q -A -s 500 -W 1000 -c 100 <span class="variable">$monitoring_site</span> |</span><br><span class="line">grep transmitted | awk <span class="string">&#x27;&#123;print $6&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取延迟情况的相关字段(本质上是执行ping命令所耗费的时间哟~)</span></span><br><span class="line">delay_time=`<span class="built_in">timeout</span> 5 ping -q -A -s 500 -W 1000 -c 100 <span class="variable">$monitoring_site</span> | grep transmitted | awk <span class="string">&#x27;&#123;print $10&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数字类型</span></span><br><span class="line">package_loss_rate_number=`<span class="built_in">echo</span> <span class="variable">$package_loss_rate</span> | sed <span class="string">&quot;s/%//g&quot;</span>`</span><br><span class="line">delay_time_number=`<span class="built_in">echo</span> <span class="variable">$delay_time</span> | sed <span class="string">&quot;s/ms//g&quot;</span>`</span><br><span class="line"><span class="comment"># 将数据上传到pushgateway</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sh_linux_package_loss_rate_<span class="variable">$instance_name</span> <span class="variable">$package_loss_rate_number</span>&quot;</span> | curl --data-binary @-</span><br><span class="line">http://docker201.zls.com:9091/metrics/job/zls_linux_package_loss_rate/instance/localhost:9092</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sh_linux_delay_time_<span class="variable">$instance_name</span> <span class="variable">$delay_time_number</span>&quot;</span> | curl --data-binary @- http://docker201.zls.com:9091/metrics/job/zls_linux_package_loss_rate/instance/localhost:9092</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(2)编写周期性任务</span><br><span class="line">[root@docker201~]# crontab -l</span><br><span class="line">...</span><br><span class="line">*/10 * * * * /root/network_delay.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(3)在Prometheus server中查看KEY</span><br><span class="line">sh_linux_package_loss_rate_docker201</span><br><span class="line">sh_linux_delay_time_docker201</span><br><span class="line">温馨提示:</span><br><span class="line">(1)对于较多的网络监控我建议还是使用专业的smokeping监控系统，尤其是在IDC公司，smokeping基本上是必用软件哟。</span><br></pre></td></tr></table></figure><h3 id="8、使用alertmanager告警"><strong>8、使用alertmanager告警</strong></h3><p>1、修改配置文件(配置报警媒介类型)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">1、先停掉alertmanager</span><br><span class="line">[root@master01 kubernetes]# supervisorctl stop alertmanager</span><br><span class="line"></span><br><span class="line">2、修改配置文件，配置报警媒介类型</span><br><span class="line">[root@master01 kubernetes]# vim /app/alertmanager/alertmanager.yml </span><br><span class="line">global:</span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line">  smtp_from: <span class="string">&#x27;xxx@qq.com&#x27;</span></span><br><span class="line">  smtp_smarthost: <span class="string">&#x27;smtp.qq.com:465&#x27;</span></span><br><span class="line">  smtp_auth_username: <span class="string">&#x27;xxxx@qq.com&#x27;</span></span><br><span class="line">  smtp_auth_password: <span class="string">&#x27;xxxgreaga&#x27;</span></span><br><span class="line">  smtp_require_tls: <span class="literal">false</span></span><br><span class="line">  smtp_hello: <span class="string">&#x27;qq.com&#x27;</span></span><br><span class="line">route:</span><br><span class="line">  group_by: [<span class="string">&#x27;alertname&#x27;</span>]</span><br><span class="line">  group_wait: 5s</span><br><span class="line">  group_interval: 5s</span><br><span class="line">  repeat_interval: 5m</span><br><span class="line">  receiver: <span class="string">&#x27;email&#x27;</span></span><br><span class="line">receivers:</span><br><span class="line">- name: <span class="string">&#x27;email&#x27;</span></span><br><span class="line">  email_configs:</span><br><span class="line">  - to: <span class="string">&#x27;xxx85@qq.com&#x27;</span></span><br><span class="line">    send_resolved: <span class="literal">true</span></span><br><span class="line">inhibit_rules:</span><br><span class="line">  - source_match:</span><br><span class="line">      severity: <span class="string">&#x27;critical&#x27;</span></span><br><span class="line">    target_match:</span><br><span class="line">      severity: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">    equal: [<span class="string">&#x27;alertname&#x27;</span>, <span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;instance&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">相关参数说明    </span><br><span class="line">global:</span><br><span class="line"><span class="comment">#解析超时时间</span></span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line">  <span class="comment">#发件人邮箱地址</span></span><br><span class="line">  smtp_from: <span class="string">&#x27;xxxxxxxx@qq.com&#x27;</span></span><br><span class="line">  <span class="comment">#邮箱的服务器的地址及端口，例如: &#x27;smtp.qq.com:465&#x27;</span></span><br><span class="line">  smtp_smarthost: <span class="string">&#x27;smtp.qq.com:465&#x27;</span></span><br><span class="line">  <span class="comment">#发送人的邮箱用户名</span></span><br><span class="line">  smtp_auth_username: <span class="string">&#x27;xxxxxxxx@qq.com&#x27;</span></span><br><span class="line">  <span class="comment">#发送人的邮箱的授权码</span></span><br><span class="line">  smtp_auth_password: <span class="string">&#x27;xxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line">  <span class="comment">#是否基于tls加密</span></span><br><span class="line">  smtp_require_tls: <span class="literal">false</span></span><br><span class="line">  <span class="comment">#邮箱服务器，例如: &#x27;qq.com&#x27;</span></span><br><span class="line">  smtp_hello: <span class="string">&#x27;qq.com&#x27;</span></span><br><span class="line">route:</span><br><span class="line"><span class="comment">#重复报警的间隔时间，如果没有解即报警问题，则会间隔指定时间一直触发报警，比如:5m</span></span><br><span class="line">  group_by: [<span class="string">&#x27;alertname&#x27;</span>]</span><br><span class="line">  group_wait: 5s</span><br><span class="line">  group_interval: 5s</span><br><span class="line">  repeat_interval: 5m</span><br><span class="line">  <span class="comment">#采用什么方式接收报警，例如&#x27;email&#x27;</span></span><br><span class="line">  receiver: <span class="string">&#x27;email&#x27;</span></span><br><span class="line">receivers:</span><br><span class="line"><span class="comment">#定义接收者的名称，注意这里的name要和上面的route对应，例如: &#x27;email&#x27;</span></span><br><span class="line">- name: <span class="string">&#x27;email&#x27;</span></span><br><span class="line">  email_configs:</span><br><span class="line">  <span class="comment">#邮箱发给谁</span></span><br><span class="line">  - to: <span class="string">&#x27;xxxxxxxx@qq.com&#x27;</span></span><br><span class="line">    send_resolved: <span class="literal">true</span></span><br><span class="line">inhibit_rules:</span><br><span class="line">  - source_match:</span><br><span class="line">  <span class="comment">#匹配报警级别，例如: &#x27;critical&#x27;</span></span><br><span class="line">      severity: <span class="string">&#x27;critical&#x27;</span></span><br><span class="line">    target_match:</span><br><span class="line">    <span class="comment">#只要是warning就报警</span></span><br><span class="line">      severity: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">    equal: [<span class="string">&#x27;alertname&#x27;</span>, <span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;instance&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">3、启动alertmanager</span><br><span class="line">[root@master01 kubernetes]# supervisorctl start alertmanager</span><br></pre></td></tr></table></figure><p>2、配置让Prometheus关联alertmanager</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 kubernetes]# vim /app/prometheus/prometheus.yml </span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">        - targets:</span><br><span class="line">        <span class="comment">#这里写alertmanager的安装地址</span></span><br><span class="line">          - 10.0.0.200:9093</span><br><span class="line">          </span><br><span class="line">[root@master01 kubernetes]# supervisorctl restart prometheus</span><br></pre></td></tr></table></figure><p>3、配置触发器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">1、配置触发器规则存放目录</span><br><span class="line"><span class="comment">#一个触发器，一个文件</span></span><br><span class="line">[root@master01 kubernetes]# vim /app/prometheus/prometheus.yml </span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span></span><br><span class="line">rule_files:</span><br><span class="line"><span class="comment">#配置触发器规则存放目录</span></span><br><span class="line">  - <span class="string">&quot;/app/prometheus/alertmanager/user_count.yml&quot;</span></span><br><span class="line">  <span class="comment">#- &quot;second_rules.yml&quot;</span></span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# supervisorctl restart prometheus</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、创建存放目录</span><br><span class="line">[root@master01 kubernetes]# <span class="built_in">mkdir</span> -p /app/prometheus/alertmanager/</span><br><span class="line"></span><br><span class="line">3、编写触发器规则文件</span><br><span class="line">[root@master01 kubernetes]# vim /app/prometheus/alertmanager/user_count.yml</span><br><span class="line"><span class="built_in">groups</span>:</span><br><span class="line">- name: user-count</span><br><span class="line">  rules:</span><br><span class="line">  - alert: user-count</span><br><span class="line">    <span class="built_in">expr</span>: user_count &gt; 3</span><br><span class="line">    <span class="keyword">for</span>: 15s</span><br><span class="line">    labels:</span><br><span class="line">      severity: 1</span><br><span class="line">      team: node</span><br><span class="line">    annotations:</span><br><span class="line">      summary: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.exported_instance &#125;&#125; 登录用户数量超过 3！&quot;</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">#参数解释    </span></span><br><span class="line"><span class="built_in">groups</span>:</span><br><span class="line"><span class="comment">#名字自定义</span></span><br><span class="line">- name: user-count</span><br><span class="line">  rules:</span><br><span class="line">  <span class="comment">#告警信息，user-count的值的key</span></span><br><span class="line">  - alert: user-count</span><br><span class="line">  <span class="comment">#expr: key名字&#123;job=&quot;xxx&quot;&#125; == 3</span></span><br><span class="line">    <span class="built_in">expr</span>: user_count == 3</span><br><span class="line">    <span class="keyword">for</span>: 15s</span><br><span class="line">    labels:</span><br><span class="line">      severity: 1</span><br><span class="line">      team: node</span><br><span class="line">    annotations:</span><br><span class="line">    <span class="comment">#exported_instance是获取机器的ip</span></span><br><span class="line">      summary: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.exported_instance &#125;&#125; 登录用户数量超过 3！&quot;</span></span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20241002124047891.png" alt="image-20241002124047891"></p><p>4、测试，node03多开几个终端，浏览器访问10.0.0.200:9093，查看有报警信息，就可以查看邮箱，会收到报警邮件</p><p><img src="../image/study_img/image-20241002145740578.png" alt="image-20241002145740578"></p><p><img src="../image/study_img/image-20241002145916255.png" alt="image-20241002145916255"></p><p>5、当登录用户数量少于3个时间，也会发恢复的邮件</p><p><img src="../image/study_img/image-20241002150222081.png" alt="image-20241002150222081"></p><h3 id="9、K8s部署Prometheus的资源清单——这个是部署在容器里面"><strong>9、K8s部署Prometheus的资源清单——这个是部署在容器里面</strong></h3><p>1、ConfigMap 资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; prom-cm.yaml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Namespace</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: prom-config</span></span><br><span class="line"><span class="string">  namespace: prom</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: ConfigMap</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: prom-config</span></span><br><span class="line"><span class="string">  namespace: prom</span></span><br><span class="line"><span class="string">data:</span></span><br><span class="line"><span class="string">  prometheus.yml: |</span></span><br><span class="line"><span class="string">  #全局配置</span></span><br><span class="line"><span class="string">    global:</span></span><br><span class="line"><span class="string">      scrape_interval: 15s #抓取数据间隔时间</span></span><br><span class="line"><span class="string">      scrape_timeout: 15s #抓取数据超时时间</span></span><br><span class="line"><span class="string">    scrape_configs: #抓取配置</span></span><br><span class="line"><span class="string">    #任务名称</span></span><br><span class="line"><span class="string">      - job_name: &quot;prometheus&quot;</span></span><br><span class="line"><span class="string">      #静态配置</span></span><br><span class="line"><span class="string">        static_configs:</span></span><br><span class="line"><span class="string">        #抓取数据节点的IP端口，起在容器里面，只能写localhost</span></span><br><span class="line"><span class="string">          - targets: [&quot;localhost:9090&quot;]</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果要添加客户端，就要edit这个资源清单，添加客户端</span></span><br></pre></td></tr></table></figure><p>2、PV和PVC资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">1、你要安装在哪台机器，就先创建挂载目录，因为下面使用的是<span class="built_in">local</span></span><br><span class="line"><span class="built_in">mkdir</span> /data/k8s/prometheus</span><br><span class="line"></span><br><span class="line">2、资源清单</span><br><span class="line"><span class="built_in">cat</span> &gt; prom-pv-pvc.yaml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: PersistentVolume</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: prom-localhost</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    app: prometheus</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  capacity:</span></span><br><span class="line"><span class="string">    storage: 10Gi</span></span><br><span class="line"><span class="string">  accessModes:</span></span><br><span class="line"><span class="string">  - ReadWriteOnce</span></span><br><span class="line"><span class="string">  storageClassName: local-storage</span></span><br><span class="line"><span class="string">  local:</span></span><br><span class="line"><span class="string">    path: /data/k8s/prometheus</span></span><br><span class="line"><span class="string">    #这里是亲和性</span></span><br><span class="line"><span class="string">  nodeAffinity:</span></span><br><span class="line"><span class="string">    required:</span></span><br><span class="line"><span class="string">      nodeSelectorTerms:</span></span><br><span class="line"><span class="string">      - matchExpressions:</span></span><br><span class="line"><span class="string">        - key: kubernetes.io/hostname</span></span><br><span class="line"><span class="string">        #In,就是主机名包含node，都起</span></span><br><span class="line"><span class="string">          operator: In</span></span><br><span class="line"><span class="string">          values:</span></span><br><span class="line"><span class="string">          #- 你想安装在哪台机器，就写他的主机名</span></span><br><span class="line"><span class="string">          - node03</span></span><br><span class="line"><span class="string">  persistentVolumeReclaimPolicy: Retain</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: PersistentVolumeClaim</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: prom-data</span></span><br><span class="line"><span class="string">  namespace: prom</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  selector:</span></span><br><span class="line"><span class="string">    matchLabels:</span></span><br><span class="line"><span class="string">      app: prometheus</span></span><br><span class="line"><span class="string">  accessModes:</span></span><br><span class="line"><span class="string">  - ReadWriteOnce</span></span><br><span class="line"><span class="string">  resources:</span></span><br><span class="line"><span class="string">    requests:</span></span><br><span class="line"><span class="string">      storage: 10Gi</span></span><br><span class="line"><span class="string">  storageClassName: local-storage</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>3、RBAC 权限资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; prom-rbac.yml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: ServiceAccount</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: prometheus</span></span><br><span class="line"><span class="string">  namespace: prom</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiVersion: rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="string">kind: ClusterRole</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: prometheus</span></span><br><span class="line"><span class="string">rules:</span></span><br><span class="line"><span class="string">- apiGroups:</span></span><br><span class="line"><span class="string">  - &quot;&quot;</span></span><br><span class="line"><span class="string">  resources:</span></span><br><span class="line"><span class="string">  - nodes</span></span><br><span class="line"><span class="string">  - services</span></span><br><span class="line"><span class="string">  - endpoints</span></span><br><span class="line"><span class="string">  - pods</span></span><br><span class="line"><span class="string">  - nodes/proxy</span></span><br><span class="line"><span class="string">  verbs:</span></span><br><span class="line"><span class="string">  - get</span></span><br><span class="line"><span class="string">  - list</span></span><br><span class="line"><span class="string">  - watch</span></span><br><span class="line"><span class="string">- apiGroups:</span></span><br><span class="line"><span class="string">  - &quot;extensions&quot;</span></span><br><span class="line"><span class="string">  resources:</span></span><br><span class="line"><span class="string">  - ingresses</span></span><br><span class="line"><span class="string">  verbs:</span></span><br><span class="line"><span class="string">  - get</span></span><br><span class="line"><span class="string">  - list</span></span><br><span class="line"><span class="string">  - watch</span></span><br><span class="line"><span class="string">- apiGroups:</span></span><br><span class="line"><span class="string">  - &quot;&quot;</span></span><br><span class="line"><span class="string">  resources:</span></span><br><span class="line"><span class="string">  - configmaps</span></span><br><span class="line"><span class="string">  - nodes/metrics</span></span><br><span class="line"><span class="string">  verbs:</span></span><br><span class="line"><span class="string">  - get</span></span><br><span class="line"><span class="string">- nonResourceURLs:</span></span><br><span class="line"><span class="string">  - /metrics</span></span><br><span class="line"><span class="string">  verbs:</span></span><br><span class="line"><span class="string">  - get</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiVersion: rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="string">kind: ClusterRoleBinding</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: prometheus</span></span><br><span class="line"><span class="string">roleRef:</span></span><br><span class="line"><span class="string">  apiGroup: rbac.authorization.k8s.io</span></span><br><span class="line"><span class="string">  kind: ClusterRole</span></span><br><span class="line"><span class="string">  name: prometheus</span></span><br><span class="line"><span class="string">subjects:</span></span><br><span class="line"><span class="string">- kind: ServiceAccount</span></span><br><span class="line"><span class="string">  name: prometheus</span></span><br><span class="line"><span class="string">  namespace: prom</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>4、Deployment 资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; prom-dp.yaml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: apps/v1</span></span><br><span class="line"><span class="string">kind: Deployment</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: prometheus</span></span><br><span class="line"><span class="string">  namespace: prom</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    app: prometheus</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  selector:</span></span><br><span class="line"><span class="string">    matchLabels:</span></span><br><span class="line"><span class="string">      app: prometheus</span></span><br><span class="line"><span class="string">  template:</span></span><br><span class="line"><span class="string">    metadata:</span></span><br><span class="line"><span class="string">      labels:</span></span><br><span class="line"><span class="string">        app: prometheus</span></span><br><span class="line"><span class="string">    spec:</span></span><br><span class="line"><span class="string">      serviceAccountName: prometheus</span></span><br><span class="line"><span class="string">      volumes:</span></span><br><span class="line"><span class="string">      - name: data</span></span><br><span class="line"><span class="string">      persistentVolumeClaim:</span></span><br><span class="line"><span class="string">        claimName: prom-data</span></span><br><span class="line"><span class="string">      - name: config-volume</span></span><br><span class="line"><span class="string">        configMap:</span></span><br><span class="line"><span class="string">          name: prom-config</span></span><br><span class="line"><span class="string">      initContainers:</span></span><br><span class="line"><span class="string">      - name: fix-permissions</span></span><br><span class="line"><span class="string">        image: busybox</span></span><br><span class="line"><span class="string">        command: [chown, -R, &quot;nobody:nobody&quot;, /prometheus]</span></span><br><span class="line"><span class="string">        volumeMounts:</span></span><br><span class="line"><span class="string">        - name: data</span></span><br><span class="line"><span class="string">          mountPath: /prometheus</span></span><br><span class="line"><span class="string">      containers:</span></span><br><span class="line"><span class="string">      - name: prometheus</span></span><br><span class="line"><span class="string">        image: prom/prometheus:v2.24.1</span></span><br><span class="line"><span class="string">        args:</span></span><br><span class="line"><span class="string">        - &quot;--config.file=/etc/prometheus/prometheus.yml&quot; # 配置文件路径</span></span><br><span class="line"><span class="string">        - &quot;--storage.tsdb.path=/prometheus&quot; # 数据保存路径</span></span><br><span class="line"><span class="string">        - &quot;--storage.tsdb.retention.time=24h&quot; # 数据保留，默认15天</span></span><br><span class="line"><span class="string">        - &quot;--web.enable-admin-api&quot; # 控制对admin HTTP API访问</span></span><br><span class="line"><span class="string">        - &quot;--web.enable-lifecycle&quot; # 支持热更新</span></span><br><span class="line"><span class="string">        ports:</span></span><br><span class="line"><span class="string">        - containerPort: 9090</span></span><br><span class="line"><span class="string">        volumeMounts:</span></span><br><span class="line"><span class="string">        - name: config-volume</span></span><br><span class="line"><span class="string">          mountPath: /etc/prometheus</span></span><br><span class="line"><span class="string">        - name: data</span></span><br><span class="line"><span class="string">          mountPath: /prometheus</span></span><br><span class="line"><span class="string">        resources:</span></span><br><span class="line"><span class="string">          requests:</span></span><br><span class="line"><span class="string">            cpu: 100m</span></span><br><span class="line"><span class="string">            memory: 512Mi</span></span><br><span class="line"><span class="string">          limits:</span></span><br><span class="line"><span class="string">            cpu: 100m</span></span><br><span class="line"><span class="string">          memory: 512Mi</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>5、Service资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; prom-svc.yaml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Service</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: prometheus</span></span><br><span class="line"><span class="string">  namespace: prom</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    app: prometheus</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  selector:</span></span><br><span class="line"><span class="string">    app: prometheus</span></span><br><span class="line"><span class="string">  ports:</span></span><br><span class="line"><span class="string">  - name: web</span></span><br><span class="line"><span class="string">    port: 9090</span></span><br><span class="line"><span class="string">    targetPort: 9090</span></span><br><span class="line"><span class="string">  type: ClusterIP</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>6、ingress资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; prom-ingress.yaml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: networking.k8s.io/v1</span></span><br><span class="line"><span class="string">kind: Ingress</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: prometheus</span></span><br><span class="line"><span class="string">  namespace: prom</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    app: prometheus</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  rules:</span></span><br><span class="line"><span class="string">  - host: prom.drz.com</span></span><br><span class="line"><span class="string">    http:</span></span><br><span class="line"><span class="string">      paths:</span></span><br><span class="line"><span class="string">      - path: /</span></span><br><span class="line"><span class="string">        pathType: ImplementationSpecific</span></span><br><span class="line"><span class="string">        backend:</span></span><br><span class="line"><span class="string">          service:</span></span><br><span class="line"><span class="string">            name: prometheus</span></span><br><span class="line"><span class="string">            port:</span></span><br><span class="line"><span class="string">              number: 9090</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>7、安装完成，应该是起到node03上的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、物理机做域名解析</span><br><span class="line">10.0.0.203 prom.drz.com   </span><br><span class="line"></span><br><span class="line">浏览器访问域名</span><br><span class="line">prom.drz.com</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本次会介绍开源系统监控和警报工具Prometheus的使用，以及写脚本监控</summary>
    
    
    
    <category term="k8s" scheme="https://www.fomal.cc/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>🍉5、Pod的钩子和探针</title>
    <link href="https://www.fomal.cc/posts/feb758ca.html"/>
    <id>https://www.fomal.cc/posts/feb758ca.html</id>
    <published>2024-09-22T06:46:01.000Z</published>
    <updated>2024-09-30T07:54:53.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pod的钩子和探针">Pod的钩子和探针</h2><h3 id="1、pod的生命周期">1、<strong>pod的生命周期</strong></h3><p><img src="../image/study_img/image-20240920083828296.png" alt="image-20240920083828296"></p><p><img src="../image/study_img/image-20240920083900491.png" alt="image-20240920083900491"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">生命周期里面包含的东西</span><br><span class="line">1、初始化容器</span><br><span class="line">2、2个钩子</span><br><span class="line">   - start hook</span><br><span class="line">   - stop hook</span><br><span class="line"></span><br><span class="line"><span class="comment">#init container</span></span><br><span class="line">初始化容器的作用：主容器启动之前，可以让他做一些准备工作。</span><br><span class="line">比如：</span><br><span class="line">1、创建用户，容器的统一用户</span><br><span class="line">2、2个容器做了共享储存，那么我们可以让他先启动一个容器，来对目录进行更改和授权</span><br><span class="line">3、容器需要连接数据库，可以让初始化容器检测数据库是否可以正常连接，如果可以再启动主容器</span><br><span class="line"></span><br><span class="line"><span class="comment">#hook</span></span><br><span class="line">Poststart：在容器创建后，立即执行，但时间不能太久，否则容器不会是running状态</span><br><span class="line">Prestart：在容器停止前，执行一些命令，主要用于优雅关闭进程</span><br><span class="line"></span><br><span class="line"><span class="comment">#Liveness probe</span></span><br><span class="line">存活探针，用于定义容器内，应用是否满足探针状态</span><br><span class="line"></span><br><span class="line"><span class="comment">#rediness probe</span></span><br><span class="line">就绪探针，指定何时允许容器进入流量</span><br></pre></td></tr></table></figure><h3 id="2、初始化容器">2、<strong>初始化容器</strong></h3><ul><li>利用初始化容器更改nginx页面</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#利用初始化容器更改nginx页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主容器启动之前，我们可以让他做一些准备工作，初始化容器执行完成后就结束退出</span></span><br><span class="line"></span><br><span class="line">1、编写资源清单</span><br><span class="line">[root@master01 kubernetes]# vim init-container.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: init-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginx-data</span><br><span class="line">    emptyDir: &#123;&#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#指定一个初始化容器：初始化容器的写法和下面容器的写法是一样的</span></span><br><span class="line">  initContainers:</span><br><span class="line">  - name: initcontainer</span><br><span class="line">    image: centos:7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 初始化容器&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">  - name: c7-container</span><br><span class="line">    image: centos:7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;tail -f /etc/hosts&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">2、运行容器，查看</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f init-container.yml </span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -owide</span><br><span class="line">NAME        READY   STATUS    RESTARTS   AGE    IP          NODE</span><br><span class="line">init-pod    2/2     Running   0          2m1s   10.2.2.6    node02</span><br><span class="line">[root@master01 kubernetes]# curl 10.2.2.6</span><br><span class="line"><span class="built_in">test</span> k8s 初始化容器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it init-pod -c c7-container -- /bin/bash</span><br><span class="line">[root@init-pod /]# <span class="built_in">cat</span> /usr/share/nginx/html/index.html </span><br><span class="line"><span class="built_in">test</span> k8s 初始化容器</span><br><span class="line"></span><br><span class="line">现在相当于3个容器同时挂载在同一个目录下，同时也相当于挂载到宿主机的一个临时目录，他们3的目录做了共享</span><br><span class="line"></span><br><span class="line">比如说起个nginx和php容器，容器的文件互相隔离，代码就不共享，那代码部署在哪里呢，如果部署在nginx上，php才是解析代码的，wordpress不是前后端分离的，nginx配置文件就不能用socket连接php了，要用fastcgi_pass xx.xx.xx.xx:900,代码必须2边都要存</span><br></pre></td></tr></table></figure><h3 id="3、钩子">3、<strong>钩子</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动钩子  poststart  启动之后</span></span><br><span class="line">lifecycle: </span><br><span class="line">  preStart: </span><br><span class="line">    <span class="built_in">exec</span>:</span><br><span class="line">    httpGet: </span><br><span class="line">    tcpSocket </span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>：执行命令</span><br><span class="line">httpGet：检测HTTP，比如检测网站的80，443端口，要求web页面状态码返回是不是404，200，一般在探针里用</span><br><span class="line">tcpSocket：检测端口通不通，比如检测数据库是否正常运行，如果用httpget不行</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止钩子   preStop   停止之前</span></span><br><span class="line">lifecycle: </span><br><span class="line">  preStop: </span><br><span class="line">    <span class="built_in">exec</span>:</span><br><span class="line">    httpGet: </span><br><span class="line">    tcpSocket</span><br></pre></td></tr></table></figure><ul><li>使用启动钩子在一个pod里统一多个容器的用户</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">1、编写资源清单</span><br><span class="line">[root@master01 kubernetes]# <span class="built_in">cp</span> init-container.yml poststart.yml</span><br><span class="line">[root@master01 kubernetes]# vim poststart.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: poststart-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  <span class="comment">#这里挂载目录可以是临时的</span></span><br><span class="line">  - name: nginx-data</span><br><span class="line">    emptyDir: &#123;&#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">  initContainers:</span><br><span class="line">  - name: initcontainer</span><br><span class="line">    image: centos:7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 使用启动钩子在一个pod里统一多个容器的用户&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="comment">#nginx启动之后的钩子写法:统一容器的用户</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">     <span class="comment">#nginx里面一开始写useradd命令创建用户，但是这个容器里面没有useradd命令，会报错。所以只能用改组、用户有关的配置文件去添加用户</span></span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;www:x:666&#x27; &gt;&gt; /etc/group &amp;&amp; echo &#x27;www:x:666:666::/home/www:/sbin/nologin&#x27; &gt;&gt; /etc/passwd&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">  - name: c7-container</span><br><span class="line">    image: centos:7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;tail -f /etc/hosts&quot;</span>]</span><br><span class="line">    <span class="comment">#C7启动之后的钩子写法:统一容器的用户</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>: </span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;groupadd www -g 666 &amp;&amp; useradd www -u 666 -g 666 -s /sbin/nologin -M&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">2、运行容器，查看</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f  poststart.yml </span><br><span class="line">pod/poststart-pod created</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod poststart-pod -owide</span><br><span class="line">NAME            READY   STATUS    RESTARTS   AGE   IP          NODE  </span><br><span class="line">poststart-pod   2/2     Running   0          33s   10.2.3.33   node03</span><br><span class="line">[root@master01 kubernetes]# curl 10.2.3.33</span><br><span class="line"><span class="built_in">test</span> k8s 使用启动钩子在一个pod里统一多个容器的用户</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it poststart-pod -c c7-container -- /bin/bash</span><br><span class="line">[root@poststart-pod /]# <span class="built_in">id</span> www</span><br><span class="line">uid=666(www) gid=666(www) <span class="built_in">groups</span>=666(www)</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it poststart-pod -c nginx-container -- /bin/sh</span><br><span class="line">/ <span class="comment"># id www</span></span><br><span class="line">uid=666(www) gid=666 <span class="built_in">groups</span>=666</span><br></pre></td></tr></table></figure><ul><li>停止钩子  容器停止之前打印指定内容到文件  (不常用，没什么应用场景)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">1、编写资源清单</span><br><span class="line">[root@master01 kubernetes]# <span class="built_in">cp</span> poststart.yml poststop.yml</span><br><span class="line">[root@master01 kubernetes]# vim prestop.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: poststop-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  <span class="comment">#为了满足停止之前echo内容到挂载目录，所以这里的挂载目录需要持久化</span></span><br><span class="line">  - name: nginx-data</span><br><span class="line">    hostPath:</span><br><span class="line">     path: /data/nginx</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">  initContainers:</span><br><span class="line">  - name: initcontainer</span><br><span class="line">    image: centos:7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 使用启动钩子在一个pod里统一多个容器的用户&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;www:x:666&#x27; &gt;&gt; /etc/group &amp;&amp; echo &#x27;www:x:666:666::/home/www:/sbin/nologin&#x27; &gt;&gt; /etc/passwd&quot;</span>]</span><br><span class="line"><span class="comment">#容器停止之前做的事情</span></span><br><span class="line">      preStop:</span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 使用停止钩子使pod在停止之前打印  bye&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">  - name: c7-container</span><br><span class="line">    image: centos:7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;tail -f /etc/hosts&quot;</span>]</span><br><span class="line">    <span class="comment">#C7启动之后的钩子写法:统一容器的用户</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>: </span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;groupadd www -g 666 &amp;&amp; useradd www -u 666 -g 666 -s /sbin/nologin -M&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">      </span><br><span class="line"> 2、查看  </span><br><span class="line">[root@node03 ~]# <span class="built_in">rm</span> -rf /data/nginx/index.html</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod poststop-pod -owide</span><br><span class="line">NAME           READY   STATUS    RESTARTS   AGE   IP          NODE  </span><br><span class="line">poststop-pod   2/2     Running   0          40s   10.2.3.34   node03</span><br><span class="line">[root@master01 kubernetes]# curl 10.2.3.34</span><br><span class="line"><span class="built_in">test</span> k8s 使用启动钩子在一个pod里统一多个容器的用户</span><br><span class="line"></span><br><span class="line">3、现在curl出来的结果还没有改变，需要删除这个pod，才会发生改变，删掉之后容器不在了，不能用curl,只能到挂载目录去看</span><br><span class="line">[root@master01 kubernetes]# kubectl delete pod poststop-pod</span><br><span class="line"></span><br><span class="line">[root@node03 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">test</span> k8s 使用停止钩子使pod在停止之前打印 <span class="built_in">bye</span></span><br></pre></td></tr></table></figure><h3 id="4、探针">4、<strong>探针</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#存活性探针(存活态探针) livenessprobe</span></span><br><span class="line">列如：</span><br><span class="line">当nginx容器起来后，即便页面是404，容器会正常运行，80端口也会正常存在，k8s就不会做到重新拉起这个容器，存活性探针</span><br><span class="line">数据库假死，进程存在，存活性探针就可以检测应用是否存活，不存活会出现拉起新的pod</span><br><span class="line"></span><br><span class="line">用于定义容器内，应用是否满足探针指定状态，如果不满足，则删除POD重新拉起一个新的POD</span><br><span class="line"></span><br><span class="line">存活探针简单来说就是用来检测容器的应用程序是否还正常工作，如果应用程序不正常，即使容器还活着也没有意义了，所以这时候就可以使用存活探针来探测，如果应用程序不正常，就重启POD。</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>：执行命令</span><br><span class="line">httpGet：检测HTTP</span><br><span class="line">tcpSocket：检测端口</span><br><span class="line"></span><br><span class="line">ivenessProbe:</span><br><span class="line">httpGet:   <span class="comment">#基于HTTP请求资源</span></span><br><span class="line">path:      <span class="comment">#请求地址，如果这个地址返回的状态码在200~400之间正常</span></span><br><span class="line">port:      <span class="comment">#请求的端口</span></span><br><span class="line">initialDelaySeconds: 3     <span class="comment">#第一次启动探测在容器启动的3s后开始</span></span><br><span class="line">periodSeconds: 3           <span class="comment">#容器启动后每隔3s检测一次</span></span><br></pre></td></tr></table></figure><ul><li>1、存活性探针  exec版   应用场景：比如说nfs,没有页面和端口，就可以用命令，df -Th|grep 挂载目录，如果nfs挂了df -Th会卡主，但是他有一个超时时间，卡住了，到时候超时了就认为挂了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span>还可以写脚本去检测某个服务</span><br><span class="line"></span><br><span class="line">1、写service资源清单</span><br><span class="line">[root@master01 kubernetes]# vim ivenssprobe-service.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: ivenssprobe-service</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">  <span class="comment">#这个标签一定要和下面的标签保持一致，不然会curl报错</span></span><br><span class="line">    app: ivenssprobe</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">    <span class="comment">#把80映射到宿主机的30000端口</span></span><br><span class="line">    nodePort: 30000</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、编写资源清单    到这里目前还没有添加存活探针的功能，在后面添加</span><br><span class="line">[root@master01 kubernetes]# vim ivenssprobe.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: ivenssprobe-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: ivenssprobe</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginx-data</span><br><span class="line">    hostPath:</span><br><span class="line">     path: /data/nginx</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"><span class="comment">#使用启动钩子给nginx一个初始页面，初始化容器或者启动钩子都行，不然挂载出来没页面</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 存活性探针&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">          </span><br><span class="line">2、运行</span><br><span class="line">[root@master01 kubernetes]# kubectl get service</span><br><span class="line">NAME                  TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">ivenssprobe-service   NodePort    10.1.87.209   &lt;none&gt;        80:30000/TCP   25s</span><br><span class="line">kubernetes            ClusterIP   10.1.0.1      &lt;none&gt;        443/TCP        7d5h</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod ivenssprobe-pod -owide</span><br><span class="line">NAME              READY   STATUS    RESTARTS   AGE     IP          NODE  </span><br><span class="line">ivenssprobe-pod   1/1     Running   0          3m53s   10.2.1.11   node01</span><br><span class="line"></span><br><span class="line">3、检查</span><br><span class="line">ivenssprobe-service这个资源相当于给他们做了负载均衡</span><br><span class="line">[root@master01 kubernetes]# curl 10.1.151.36</span><br><span class="line"><span class="built_in">test</span> k8s 存活性探针</span><br><span class="line">[root@master01 kubernetes]# curl 10.2.1.7 </span><br><span class="line"><span class="built_in">test</span> k8s 存活性探针</span><br><span class="line">[root@node01 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">test</span> k8s 存活性探针</span><br><span class="line"></span><br><span class="line">由于做了宿主机上的映射，可以浏览器访问   10.0.0.201:30000</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240920165623622.png" alt="image-20240920165623622"></p><p>测试探针</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">test</span> k8s 存活性探针</span><br><span class="line"></span><br><span class="line">1、删除主页面，再次浏览器访问，变成403</span><br><span class="line">[root@node01 ~]# <span class="built_in">rm</span> -rf /data</span><br><span class="line"></span><br><span class="line">2、再次查看主页面，还是空的，查看pod，还是running状态，没有任何问题，但网站确实挂了，pod虽然在运行，但是没啥用了，还占用资源</span><br></pre></td></tr></table></figure><p>在资源清单编写存活性探针的检验功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">1、删除旧的pod</span><br><span class="line">[root@master01 kubernetes]# kubectl delete pod ivenssprobe-pod </span><br><span class="line"></span><br><span class="line">2、在资源清单添加存活性探针的检验功能</span><br><span class="line">[root@master01 kubernetes]# vim ivenssprobe.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: ivenssprobe-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: ivenssprobe</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginx-data</span><br><span class="line">    hostPath:</span><br><span class="line">     path: /data/nginx</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"><span class="comment">#使用启动钩子给nginx一个初始页面，初始化容器或者启动钩子都行，不然挂载出来没页面</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 存活性探针&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    livenessProbe:</span><br><span class="line">      <span class="built_in">exec</span>:</span><br><span class="line"><span class="comment">#检测主页面，拿命令检测，当返回值不为0就是失败</span></span><br><span class="line">        <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;cat /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line"><span class="comment">#一定要写优化参数</span></span><br><span class="line">      <span class="comment">#延迟时间3s</span></span><br><span class="line">      initialDelaySeconds: 3 </span><br><span class="line">      <span class="comment">#容器每隔2s检测一次</span></span><br><span class="line">      periodSeconds: 2</span><br><span class="line">      <span class="comment">#超时时间 1s</span></span><br><span class="line">      timeoutSeconds: 1</span><br><span class="line">      <span class="comment">#成功之后3次连续失败，才是真失败，然后重新去拉起，避免网络波动的情况</span></span><br><span class="line">      failureThreshold: 3</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">      </span><br><span class="line">3、查看</span><br><span class="line">[root@master01 kubernetes]#  kubectl apply -f ivenssprobe.yml </span><br><span class="line">pod/ivenssprobe-pod created</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod ivenssprobe-pod -owide</span><br><span class="line">NAME              READY   STATUS    RESTARTS   AGE   IP          NODE  </span><br><span class="line">ivenssprobe-pod   1/1     Running   0          64s   10.2.1.12   node01</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">参数解释：</span><br><span class="line"></span><br><span class="line">initialDelaySeconds: <span class="comment">#第一次执行探针需要在容器启动后等待的时候时间</span></span><br><span class="line">periodSeconds: <span class="comment">#容器启动后每隔多少秒执行一次存活探针(心跳检测的间隔时间)</span></span><br><span class="line">timeoutSeconds: <span class="comment">#探针超时时间，默认1秒，最小1秒</span></span><br><span class="line">successThreshold: <span class="comment">#探针失败后最少连续探测成功多少次才被认定成功，默认1次，如果是liveness必须为1(一开始检测一个网站是403，代表网站失败，不可能一失败就立马去重新拉起pod,需要检查到几次成功才认为是成功的)</span></span><br><span class="line">failureThreshold: <span class="comment">#探针成功后被视为失败的探测的最小连续失败次数。默认3次。最小值为1(探针检测成功容器正常运行，那么还要检测几次失败才会重新拉起这个pod)</span></span><br></pre></td></tr></table></figure><p>再次测试  访问网页  10.0.0.201:30000  恢复正常</p><p><img src="../image/study_img/image-20240920173329296.png" alt="image-20240920173329296"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">test</span> k8s 存活性探针</span><br><span class="line">[root@node01 ~]# <span class="built_in">rm</span> -rf /data</span><br><span class="line">[root@node01 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">test</span> k8s 存活性探针</span><br><span class="line">[root@node01 ~]# <span class="built_in">rm</span> -rf /data</span><br><span class="line">[root@node01 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">cat</span>: /data/nginx/index.html: No such file or directory</span><br><span class="line">[root@node01 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">cat</span>: /data/nginx/index.html: No such file or directory</span><br><span class="line">[root@node01 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">test</span> k8s 存活性探针</span><br><span class="line"></span><br><span class="line">删掉主页面，查看主页面内容，会重新拉起，所以会看到内容</span><br><span class="line"></span><br><span class="line">但是<span class="built_in">exec</span>有缺陷，以后代码页面多，不能<span class="built_in">cat</span>，所以Httpget比较好用</span><br></pre></td></tr></table></figure><ul><li>2、存活性探针  httpget版</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">1、删除旧的pod</span><br><span class="line">[root@master01 kubernetes]# kubectl delete pod ivenssprobe-pod </span><br><span class="line"></span><br><span class="line">2、在资源清单添加存活性探针的检验功能</span><br><span class="line">[root@master01 kubernetes]# vim ivenssprobe.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: ivenssprobe-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: ivenssprobe</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginx-data</span><br><span class="line">    hostPath:</span><br><span class="line">     path: /data/nginx</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"><span class="comment">#使用启动钩子给nginx一个初始页面，初始化容器或者启动钩子都行，不然挂载出来没页面</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 存活性探针&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    livenessProbe:</span><br><span class="line">    <span class="comment">#http版本</span></span><br><span class="line">      httpGet:</span><br><span class="line">      <span class="comment">#host就是本机，但是可以默认就是本机，不需要写</span></span><br><span class="line">        <span class="comment">#host: 127.0.0.1</span></span><br><span class="line"><span class="comment">#path就是uri   http://k8s.driverzeng.com/v1.19/,比如说这个网站的uri就是/v1.19/     http://10.0.0.201:30000/，uri就是/</span></span><br><span class="line">        path: /</span><br><span class="line">      <span class="comment">#还可以加上端口</span></span><br><span class="line">        port: 80</span><br><span class="line">      </span><br><span class="line"><span class="comment">#一定要写优化参数</span></span><br><span class="line">      <span class="comment">#延迟时间3s</span></span><br><span class="line">      initialDelaySeconds: 3 </span><br><span class="line">      <span class="comment">#容器每隔2s检测一次</span></span><br><span class="line">      periodSeconds: 2</span><br><span class="line">      <span class="comment">#超时时间 1s</span></span><br><span class="line">      timeoutSeconds: 1</span><br><span class="line">      <span class="comment">#成功之后3次连续失败，才是真失败，然后重新去拉起，避免网络波动的情况</span></span><br><span class="line">      failureThreshold: 3</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line">不写host是因为不知道pod起来是什么ip,但以后得写，以后不可能吧nginx和mysql起在一个pod,数据库肯定要单独起一个pod</span><br><span class="line"></span><br><span class="line">3、查询</span><br><span class="line">[root@master01 kubernetes]#  kubectl delete pod ivenssprobe-pod </span><br><span class="line">pod <span class="string">&quot;ivenssprobe-pod&quot;</span> deleted</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f ivenssprobe.yml </span><br><span class="line">pod/ivenssprobe-pod created</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod ivenssprobe-pod -owide</span><br><span class="line">NAME              READY   STATUS    RESTARTS   AGE   IP          NODE  </span><br><span class="line">ivenssprobe-pod   1/1     Running   0          26s   10.2.1.13   node01</span><br><span class="line"></span><br><span class="line">4、#测试</span><br><span class="line">到node01删除主页文件</span><br><span class="line">[root@node01 ~]# <span class="built_in">rm</span> -rf /data</span><br><span class="line">速度快点，切换到浏览器网站，会看到403，一直刷新，网站就会恢复原样，不需要去<span class="built_in">cat</span>主页文件了</span><br><span class="line"></span><br><span class="line">查看主页文件，恢复原样</span><br><span class="line">[root@node01 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">test</span> k8s 存活性探针</span><br><span class="line"></span><br><span class="line"><span class="comment">#好处是监测它的80端口，访问这个uri，只要出现状态码40几，50几就会重新拉起，想wordpress这种代码多的情况下，不能用cat命令不可能每个文件都cat,所以httpget是检测nginx最后的方法</span></span><br></pre></td></tr></table></figure><ul><li>3、存活性探针  tcpSocket版   应用场景：比如说数据库，只有端口，没有网站</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">只能检测端口，不会检测页面，删掉页面，没有用，不会重新拉起，httpGet就相当于底层使用curl命令去检测</span><br><span class="line"></span><br><span class="line">tcpSocket: </span><br><span class="line">  host:     <span class="comment">#默认可以不写，他自己知道pod的ip,所以可以不写</span></span><br><span class="line">  port:     <span class="comment">#端口。如果只检测端口，页面删除没有意义，不会拉起</span></span><br><span class="line"></span><br><span class="line">1、在资源清单添加存活性探针的检验功能</span><br><span class="line">[root@master01 kubernetes]# vim ivenssprobe.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: ivenssprobe-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: ivenssprobe</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginx-data</span><br><span class="line">    hostPath:</span><br><span class="line">     path: /data/nginx</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"><span class="comment">#使用启动钩子给nginx一个初始页面，初始化容器或者启动钩子都行，不然挂载出来没页面</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 存活性探针&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    livenessProbe:</span><br><span class="line">      <span class="comment">#tcpSocket版</span></span><br><span class="line">      tcpSocket:</span><br><span class="line">        port: 80</span><br><span class="line">      </span><br><span class="line"><span class="comment">#一定要写优化参数</span></span><br><span class="line">      <span class="comment">#延迟时间3s</span></span><br><span class="line">      initialDelaySeconds: 3 </span><br><span class="line">      <span class="comment">#容器每隔2s检测一次</span></span><br><span class="line">      periodSeconds: 2</span><br><span class="line">      <span class="comment">#超时时间 1s</span></span><br><span class="line">      timeoutSeconds: 1</span><br><span class="line">      <span class="comment">#成功之后3次连续失败，才是真失败，然后重新去拉起，避免网络波动的情况</span></span><br><span class="line">      failureThreshold: 3</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">2、删除旧pod，运行新pod</span><br><span class="line">[root@master01 kubernetes]# kubectl delete pod ivenssprobe-pod &amp;&amp; kubectl apply -f ivenssprobe.yml </span><br><span class="line">pod <span class="string">&quot;ivenssprobe-pod&quot;</span> deleted</span><br><span class="line">pod/ivenssprobe-pod created</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod ivenssprobe-pod  -owide</span><br><span class="line">NAME              READY   STATUS    RESTARTS   AGE     IP          NODE  </span><br><span class="line">ivenssprobe-pod   1/1     Running   0          8m58s   10.2.1.14   node01</span><br><span class="line"></span><br><span class="line">3、连接进入容器，断开端口</span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it ivenssprobe-pod -c nginx-container -- /bin/sh</span><br><span class="line">/ <span class="comment">#  nginx -s stop</span></span><br><span class="line">执行之后容器会自动退出，因为存活性探针检测到端口不见了，把就容器删除，就会被强制踢出来</span><br></pre></td></tr></table></figure><p>2、就绪性探针</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#就绪性探针(就绪态探针) readnissprobe  </span></span><br><span class="line">就绪性探针配置语法和存活探针基本一样</span><br><span class="line"></span><br><span class="line">有时候我们Pod本身已经起来了，但是pod的容器还没有完全准备好对外提供服务，那么这时候流量进来就会造成请求失败的情况出现，针对这种情况k8s有一种探针叫就绪探针，他的作用就是让k8s知道你的Pod内应用是否准备好为请求提供服务。只有就绪探针ok了才会把流量转发到pod上。</span><br><span class="line"></span><br><span class="line">应用场景：比如说数据库需要初始化，初始化的时候速度比较慢，nginx容器起来的速度快，但是数据库没起来，访问肯定是502，就好比gitlab,nginx起来了，组件没起来，访问显示502，就绪探针就是等数据起来，才对外提供服务(就是浏览器正常访问)</span><br><span class="line">但是想要检测，就要用到service资源</span><br></pre></td></tr></table></figure><p>编写资源清单：需求</p><p>nginx的pod启动，前提条件是数据库pod也启动起来，并且数据库已初始化完了，然后再对外提供服务</p><ul><li>就绪探针  exec命令版</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">1、编写资源清单</span><br><span class="line">[root@master01 kubernetes]# vim readnessprobe.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: readnessprobe-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: readnessprobe</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginx-data</span><br><span class="line">    hostPath:</span><br><span class="line">     path: /data/nginx</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"><span class="comment">#使用启动钩子给nginx一个初始页面，初始化容器或者启动钩子都行，不然挂载出来没页面</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 就绪性探针readnessprobe&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    livenessProbe:</span><br><span class="line">      httpGet:</span><br><span class="line">        path: /</span><br><span class="line">        port: 80</span><br><span class="line"><span class="comment">#就绪性探针写法</span></span><br><span class="line">    readinessProbe:</span><br><span class="line">      <span class="built_in">exec</span>:</span><br><span class="line"><span class="comment">#检测文件是否有内容，如果没有文件就没有就绪</span></span><br><span class="line">        <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;cat /usr/share/nginx/html/healthy.html&quot;</span>]</span><br><span class="line">      </span><br><span class="line"><span class="comment">#一定要写优化参数</span></span><br><span class="line">      <span class="comment">#延迟时间3s</span></span><br><span class="line">      initialDelaySeconds: 3 </span><br><span class="line">      <span class="comment">#容器每隔2s检测一次</span></span><br><span class="line">      periodSeconds: 2</span><br><span class="line">      <span class="comment">#超时时间 1s</span></span><br><span class="line">      timeoutSeconds: 1</span><br><span class="line">      <span class="comment">#成功之后3次连续失败，才是真失败，然后重新去拉起，避免网络波动的情况</span></span><br><span class="line">      failureThreshold: 3</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">但是现在没有/usr/share/nginx/html/healthy.html这个文件，那容器肯定是一直不就绪的</span><br><span class="line"></span><br><span class="line">2、删除旧pod,创建新pod</span><br><span class="line">[root@master01 kubernetes]# kubectl delete pod ivenssprobe-pod</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f readnessprobe.yml </span><br><span class="line">pod/readnessprobe-pod created</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod readnessprobe-pod -owide</span><br><span class="line">NAME                READY   STATUS    RESTARTS   AGE   IP          NODE </span><br><span class="line">readnessprobe-pod   0/1     Running   0          69s   10.2.1.15   node01</span><br><span class="line"></span><br><span class="line">READY一直显示0/1,一直不就绪，就不对外提供流量，不对外提供流量，但是页面可以访问</span><br><span class="line">[root@master01 kubernetes]# curl 10.2.1.15</span><br><span class="line"><span class="built_in">test</span> k8s 就绪性探针readnessprobe</span><br><span class="line"></span><br><span class="line"><span class="comment">#对外提供流量前面要加负载均衡和端口映射，得用service负载出来</span></span><br><span class="line">3、编写service资源清单</span><br><span class="line">[root@master01 kubernetes]# <span class="built_in">cp</span> ivenssprobe-service.yml readnessprobe-service.yml</span><br><span class="line">[root@master01 kubernetes]# vim readnessprobe-service.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: readnessprobe-service</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: readnessprobe</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">    <span class="comment">#不能端口冲突，所以端口需要改一下</span></span><br><span class="line">    nodePort: 30001</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line"></span><br><span class="line">4、启动并查看</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f readnessprobe-service.yml</span><br><span class="line">service/readnessprobe-service created</span><br><span class="line">[root@master01 kubernetes]# kubectl get svc</span><br><span class="line">NAME                    TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes              ClusterIP   10.1.0.1      &lt;none&gt;        443/TCP        7d9h</span><br><span class="line">readnessprobe-service   NodePort    10.1.234.20   &lt;none&gt;        80:30001/TCP   17s</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1、测试curl</span><br><span class="line">[root@master01 kubernetes]# curl 10.1.234.20</span><br><span class="line">curl: (7) Failed connect to 10.1.234.20:80; Connection refused</span><br><span class="line">没有结果，因为就绪探针没有就绪</span><br><span class="line"></span><br><span class="line">2、在node节点映射的宿主机目录创建就绪文件</span><br><span class="line">[root@node01 ~]# <span class="built_in">touch</span> /data/nginx/healthy.html</span><br><span class="line"></span><br><span class="line">3、到master查看就绪状态，已经变成就绪完成</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod readnessprobe-pod -owide</span><br><span class="line">NAME                READY   STATUS    RESTARTS   AGE   IP          NODE  </span><br><span class="line">readnessprobe-pod   1/1     Running   0          16m   10.2.1.15   node01</span><br><span class="line">[root@master01 kubernetes]#  curl 10.1.234.20</span><br><span class="line"><span class="built_in">test</span> k8s 就绪性探针readnessprobe</span><br><span class="line"></span><br><span class="line">4、检查已经对外提供服务了</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240920201911358.png" alt="image-20240920201911358"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">5、删除就绪文件，curl失败，未就绪，网站无法访问</span><br><span class="line">[root@node01 ~]# <span class="built_in">rm</span> -rf /data/nginx/healthy.html</span><br><span class="line">[root@master01 kubernetes]#  curl 10.1.234.20</span><br><span class="line">curl: (7) Failed connect to 10.1.234.20:80; Connection refused</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod readnessprobe-pod -owide</span><br><span class="line"></span><br><span class="line">pod的ip可以通，代表对内提供服务</span><br><span class="line">[root@master01 kubernetes]# curl 10.2.1.15</span><br><span class="line"><span class="built_in">test</span> k8s 就绪性探针readnessprobe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如上是就绪探针的使用方法，但是正常不会这样子做，就像起wp,就要检测数据库有没有准备好</span><br></pre></td></tr></table></figure><p>nginx和mysql，检测mysql是否就绪，就像就对外提供服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 kubernetes]# vim readness-mysql.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: readnessprobe-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: readnessprobe</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginx-data</span><br><span class="line">    hostPath:</span><br><span class="line">     path: /data/nginx</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"><span class="comment">#使用启动钩子给nginx一个初始页面，初始化容器或者启动钩子都行，不然挂载出来没页面</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 就绪性探针readnessprobe&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    livenessProbe:</span><br><span class="line">      httpGet:</span><br><span class="line">        path: /</span><br><span class="line">        port: 80</span><br><span class="line"><span class="comment">#就绪性探针写法  #要检测数据只能用tcpsocket,除非是这个网站启动要依赖其他网站就用httpGet:</span></span><br><span class="line">    readinessProbe:</span><br><span class="line">      tcpSocket:</span><br><span class="line">        port: 3306</span><br><span class="line">      </span><br><span class="line"><span class="comment">#一定要写优化参数，存活性探针设置的频率要比就绪探针慢一些</span></span><br><span class="line">      <span class="comment">#延迟时间3s</span></span><br><span class="line">      initialDelaySeconds: 3 </span><br><span class="line">      <span class="comment">#容器每隔2s检测一次</span></span><br><span class="line">      periodSeconds: 2</span><br><span class="line">      <span class="comment">#超时时间 1s</span></span><br><span class="line">      timeoutSeconds: 1</span><br><span class="line">      successThreshold: 3</span><br><span class="line">      <span class="comment">#成功之后3次连续失败，才是真失败，然后重新去拉起，避免网络波动的情况</span></span><br><span class="line">      failureThreshold: 3</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">  - name: mysql-container</span><br><span class="line">    image: mysql:5.7.44</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">    - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">      value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    <span class="comment">#后面的优化，探针可以继续写</span></span><br><span class="line"></span><br><span class="line">2、启动检查</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f readness-mysql.yml</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod readnessprobe-pod</span><br><span class="line">NAME                READY   STATUS    RESTARTS   AGE</span><br><span class="line">readnessprobe-pod   1/2     Running   0          62s</span><br><span class="line"></span><br><span class="line">1/2是因为数据库没有写就绪探针，如果写了，就是0/2,数据库的就绪探针就写检测自己的3306端口</span><br><span class="line">等待一会，mysql初始化完成就绪完成</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod readnessprobe-pod</span><br><span class="line">NAME                READY   STATUS    RESTARTS   AGE</span><br><span class="line">readnessprobe-pod   2/2     Running   0          18s</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl get svc </span><br><span class="line">NAME                    TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes              ClusterIP   10.1.0.1      &lt;none&gt;        443/TCP        7d10h</span><br><span class="line">readnessprobe-service   NodePort    10.1.234.20   &lt;none&gt;        80:30001/TCP   52m</span><br><span class="line">[root@master01 kubernetes]# curl 10.1.234.20</span><br><span class="line"><span class="built_in">test</span> k8s 就绪性探针readnessprobe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#存活探针和就绪探针同时存在的情况下，数据库没有准备好就不就绪，页面就一直是502，出现502，存活探针频率配高了，检测到有问题就会重新拉起，这样就进入死循环，如果2个容器在一个pod里，数据永远起不来，因为把pod删了，会重新创建，进入死循环，所以存活探针要比就绪探针设置的频率慢</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">一：wordpress镜像</span><br><span class="line">在一个POD里启动两个容器</span><br><span class="line">- wordpress</span><br><span class="line">- mysql5.7</span><br><span class="line">1.就绪性探针</span><br><span class="line">2.存活性探针</span><br><span class="line">3.启动钩子</span><br><span class="line">4.停止钩子</span><br><span class="line">5.初始化容器</span><br><span class="line"></span><br><span class="line">二：尝试 wordpress 启动一个POD</span><br><span class="line">MySQL单独启动在一个POD里,如何连接，才能让网站能够正常访问</span><br><span class="line"></span><br><span class="line">三：尝试 nginx 和 php环境分开装，部署代码</span><br><span class="line">fastcgi_pass unix://dev/shm/php.sock</span><br><span class="line"></span><br><span class="line">一开始是这样子写的fastcgi_pass 127.0.0.1:9000，但是现在要分开安装，就要写内外ip  fastcgi_pass 172.16.1.8:9000</span><br><span class="line">测试，上传图片</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用资源清单编写初始化容器，钩子，探针</summary>
    
    
    
    <category term="k8s" scheme="https://www.fomal.cc/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>🍉4、标签的设置及使用</title>
    <link href="https://www.fomal.cc/posts/4666867d.html"/>
    <id>https://www.fomal.cc/posts/4666867d.html</id>
    <published>2024-09-22T06:45:27.000Z</published>
    <updated>2024-09-30T07:54:39.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标签的设置及使用">标签的设置及使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">kubectl get  [资源] -n [名称空间] --show-labels</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看node标签</span></span><br><span class="line">[root@master01 ~]# kubectl get nodes --show-labels</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看pod的标签</span></span><br><span class="line">[root@master01 ~]# kubectl get  pod -n kube-flannel --show-labels</span><br><span class="line"></span><br><span class="line"><span class="comment">#给node打标签</span></span><br><span class="line">[root@master01 ~]# kubectl label node node01 MEM=16G</span><br><span class="line">node/node01 labeled</span><br><span class="line">[root@master01 ~]# kubectl get nodes --show-labels</span><br><span class="line"></span><br><span class="line"><span class="comment">#给node打角色标签：为了区分项目名，或者配置</span></span><br><span class="line">node-role  角色标签的接口</span><br><span class="line">node-role.kubernetes.io  标识调角色标签的接口</span><br><span class="line">=变成-号，就是删除角色标签  node-</span><br><span class="line">node=  ：表示给角色打的标签名叫node</span><br><span class="line"></span><br><span class="line">[root@master01 ~]# kubectl label node node01 node-role.kubernetes.io/node=</span><br><span class="line">[root@master01 ~]# kubectl get nodes</span><br><span class="line">NAME       STATUS   ROLES    AGE     VERSION</span><br><span class="line">master01   Ready    master   5d23h   v1.19.3</span><br><span class="line">node01     Ready    node     5d23h   v1.19.3</span><br><span class="line">node02     Ready    node     5d23h   v1.19.3</span><br><span class="line">node03     Ready    node     5d23h   v1.19.3</span><br></pre></td></tr></table></figure><p><font color=red><strong>给pod打标签的方法：    如果不资源清单里面不写标签，起来的pod就没有标签，不会存在默认标签的说法，所以资源清单里面一定要写标签</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#给pod打标签为了以后通信用</span></span><br><span class="line">方法一：</span><br><span class="line">使用命令打标签：(一般很少用命令打标签，以后起pod是用资源清单的，所以在资源清单里面打标签比较常用)</span><br><span class="line">[root@master01 ~]# kubectl label pod kube-flannel-ds-4ncf5 run=flannel -n kube-flannel </span><br><span class="line">kube-flannel-ds-4ncf5：Pod名</span><br><span class="line">run=flannel：标签名</span><br><span class="line">kube-flannel：名称空间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line"><span class="comment">#给Pod打标签(用资源清单打，比较常用)</span></span><br><span class="line">[root@master01 kubernetes]# vim nginx-label.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata: </span><br><span class="line">  name: nginx-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    run: nginx</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx:alpine</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"></span><br><span class="line">运行资源清单 </span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx-label.yml </span><br><span class="line">查看</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod --show-labels</span><br><span class="line">NAME           READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">nginx-pod      1/1     Running   0          23s   run=nginx</span><br></pre></td></tr></table></figure><p>将pod起到指定的node上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">上面执行了命令给node01打MEM=16G的标签</span><br><span class="line">[root@master01 ~]# kubectl label node node01 MEM=16G</span><br><span class="line"></span><br><span class="line">将pod起在MEM=16的节点上</span><br><span class="line"><span class="comment">#启动pod在指定标签的node上</span></span><br><span class="line">[root@master01 kubernetes]# vim nginx2-label.yml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata: </span><br><span class="line">  name: nginx-pod-v2</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    run: nginx</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container-v2</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="comment">#将pod起在MEM=16的节点上</span></span><br><span class="line">  nodeSelector:</span><br><span class="line">    MEM: 16G</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#(一般来说不写如下内容，因为k8s会做资源计算和调度，但是在起redis或者数据库这种pod的时候，他两对内存的使用比较大，建议不要起在同一个机器上，这个情况就要使用如下命令了，避免k8s自己资源计算，将redis、mysql起在同一个机器) </span></span><br><span class="line">  nodeSelector:</span><br><span class="line">    MEM: 16G</span><br><span class="line"> </span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx2-label.yml </span><br><span class="line">pod/nginx-pod-v2 created</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-pod                1/1     Running   0          17m</span><br><span class="line">nginx-pod-v2             1/1     Running   0          32s</span><br><span class="line">查看起在node01上的</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod nginx-pod-v2  -o wide</span><br><span class="line">NAME           READY   STATUS    RESTARTS   AGE     IP         NODE  </span><br><span class="line">nginx-pod-v2   1/1     Running   0          6m26s   10.2.1.4   node01</span><br></pre></td></tr></table></figure><p>删除标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1、先查看</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod --show-labels</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">nginx-pod                1/1     Running   0          31m   run=nginx</span><br><span class="line">nginx-pod-v2             1/1     Running   0          14m   run=nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#删除标签</span><br><span class="line">kubectl label [资源] [资源名] [标签名/标签key]-</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl label pod nginx-pod-v2 run-</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod --show-labels</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">nginx-pod                1/1     Running   0          32m   run=nginx</span><br><span class="line">nginx-pod-v2             1/1     Running   0          15m   &lt;none&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据标签查找pod</span></span><br><span class="line">3、查看哪些pod打了run=nginx的标签，打了这个标签的都会被列出来</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -l run=nginx</span><br><span class="line">NAME        READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-pod   1/1     Running   0          35m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据标签删除pod</span></span><br><span class="line">4、打了标签比较方便，可以根据标签去筛选，还可以根据标签去删除pod</span><br><span class="line">[root@master01 kubernetes]# kubectl delete pod -l run=nginx</span><br><span class="line">pod <span class="string">&quot;nginx-pod&quot;</span> deleted</span><br><span class="line"></span><br><span class="line">  但是一个pod里面起2个容器怎么连</span><br><span class="line">  -c 永远只有3个引号</span><br><span class="line">  默认连第一个容器</span><br><span class="line">  -c指定容器名</span><br><span class="line">  <span class="comment">#当一个pod中有多个容器时</span></span><br></pre></td></tr></table></figure><p>连接到pod     容器可以使用命令连接进去，pod也可以使用命令连接进去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#连接到一个pod</span></span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it  nginx-pod-v2 -- /bin/sh</span><br><span class="line">/ <span class="comment"># ls</span></span><br><span class="line">bin           etc  </span><br><span class="line"></span><br><span class="line">--：相当于分隔符,--后面的所有都是命令</span><br><span class="line"></span><br><span class="line"><span class="comment">#问题：一个pod里面起2个容器怎么连？</span></span><br><span class="line">1、编写一个pod起2个容器的资源清单</span><br><span class="line">[root@master01 kubernetes]# vim nginx-busybox.yml</span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Pod&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-busybox</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: busybox-container</span><br><span class="line">    image: busybox</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;tail -f /etc/hosts&quot;</span>]</span><br><span class="line"> <span class="comment">#-c：表示永远只有3个引号，第3个引号可以写长的命令</span></span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"></span><br><span class="line">2、运行pod,并查看pod是否起来，查看pod起在哪个机器</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx-busybox.yml </span><br><span class="line">pod/nginx-busybox created</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-5f5d9d69c4-d8hvx   1/1     Running   0          19h</span><br><span class="line">nginx-busybox            2/2     Running   0          8s</span><br><span class="line">nginx-pod-v2             1/1     Running   0          43m</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod nginx-busybox -o wide</span><br><span class="line">NAME            READY   STATUS    RESTARTS   AGE     IP         NODE  </span><br><span class="line">nginx-busybox   2/2     Running   0          3m34s   10.2.2.5   node02</span><br><span class="line"></span><br><span class="line">3、连接进入容器</span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it nginx-busybox -- /bin/sh</span><br><span class="line">/ <span class="comment"># ls -l /usr</span></span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x    2 root     root            17 May 18  2023 bin</span><br><span class="line">drwxr-xr-x    2 daemon   daemon           6 May 18  2023 sbin</span><br><span class="line"></span><br><span class="line">该目录没有站点目录，所以进去的busybox容器，所以默认连第一个容器</span><br><span class="line"></span><br><span class="line">4、如果需要连接指定的容器，需要使用选项-c指定</span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it nginx-busybox -c nginx-container -- /bin/sh</span><br><span class="line">/ <span class="comment"># ls -l /usr/share/nginx/html/</span></span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--    1 root     root           497 Aug 14 06:12 50x.html</span><br><span class="line">-rw-r--r--    1 root     root           615 Aug 14 06:12 index.html</span><br><span class="line"></span><br><span class="line">-c：连接到指定的容器名</span><br><span class="line"></span><br><span class="line">作用：k8s只需要在master上操作，就可以连到需要连的容器</span><br></pre></td></tr></table></figure><h2 id="2、重新认识Pod">2、<strong>重新认识Pod</strong></h2><p>共享网络</p><p><img src="../image/study_img/image-20240919110354547.png" alt="image-20240919110354547"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、Pod内的容器使用Container模式共享根容器的网络</span><br><span class="line">2、容器看到的网络设备信息和根容器完全相同</span><br><span class="line">3、Pod内的多个容器可以使用localhost进行网络通讯</span><br><span class="line">4、Pod内的多个容器不能绑定相同的端口</span><br><span class="line">5、Pod的生命周期和根容器一样，如果根容器退出，Pod就退出</span><br></pre></td></tr></table></figure><h2 id="3、共享文件系统">3、<strong>共享文件系统</strong></h2><h3 id="1、本地共享储存">1、<strong>本地共享储存</strong></h3><p><img src="../image/study_img/image-20240919165826698.png" alt="image-20240919165826698"></p><p>第一种：hostPath  本地的映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行数据库</span></span><br><span class="line">docker run \</span><br><span class="line">--name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=wp_db \</span><br><span class="line">-e MYSQL_USER=wp_user \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:5.7.44</span><br><span class="line"></span><br><span class="line">1、编写资源清单</span><br><span class="line">[root@master01 kubernetes]# vim wp.yml</span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Pod&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: mysql57-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: mysql57</span><br><span class="line">    run: mysql57</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment">#设置挂载映射的写法   指定宿主机的挂载目录</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: mysql-data       <span class="comment">#名字一定要写，设置挂载的变量，相当于变量名</span></span><br><span class="line">    hostPath:</span><br><span class="line">      path: /data/mysql    <span class="comment">#宿主机的目录，相当于变量值</span></span><br><span class="line">  - name: test-data</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /opt/test</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: mysql57-container</span><br><span class="line">    image: mysql:5.7.44</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">    - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;123&quot;</span></span><br><span class="line">    - name: MYSQL_DATABASE</span><br><span class="line">      value: <span class="string">&quot;wp_db&quot;</span></span><br><span class="line">    - name: MYSQL_USER</span><br><span class="line">      value: <span class="string">&quot;wp_user&quot;</span></span><br><span class="line">    - name: MYSQL_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="comment">#指定字符集的写法</span></span><br><span class="line">    args:</span><br><span class="line">    - --character-set-server=utf8mb4</span><br><span class="line">    - --collation-server=utf8mb4_unicode_ci</span><br><span class="line"><span class="comment">#容器里面的目录挂载出来的写法</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: mysql-data             <span class="comment">#现在容器的目录要挂到宿主机的哪个目录，就写宿主机目录的变量名</span></span><br><span class="line">      mountPath: /var/lib/mysql    <span class="comment">#这里写容器里需要挂出来的目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###</span></span><br><span class="line">--xxx一般用args</span><br><span class="line">如果是一条完整的命令就用<span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">2、运行资源清单，并查看pod运行的node</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f mysql.yml </span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     IP          NODE  </span><br><span class="line">mysql57-pod              1/1     Running   0          3m42s   10.2.3.14   node03</span><br><span class="line"></span><br><span class="line">3、到node03节点查看目录是否映射</span><br><span class="line">[root@node03 ~]# ll /data/mysql/</span><br><span class="line">-rw-r----- 1 polkitd input       56 Sep 19 18:29 auto.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment">#目录映射出来了，如果mysql挂了，再拉起，数据是存在的，如果不做映射，k8s自动拉起，数据就会全部没有</span></span><br><span class="line"></span><br><span class="line">容器里面mysql用户的uid gid都是999，宿主机上uid为999的是polkitd,gid为999的是input，系统只认ID，不认字符串，字符串是给人看的，知道名字就更好区分</span><br><span class="line"></span><br><span class="line">4、连接到容器里面检查</span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it pod/mysql57-pod -- /bin/sh</span><br><span class="line">sh-4.2# mysql -uroot -p123</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">mysql&gt; <span class="keyword">select</span> host,user from mysql.user;</span><br><span class="line">mysql&gt; show create database wp_db;</span><br><span class="line">sh-4.2# mysql -uwp_user -p123</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:left">Behavior</th></tr></thead><tbody><tr><td style="text-align:left"><code>‌&quot;&quot;</code></td><td style="text-align:left">默认不需要创建，会自动创建</td></tr><tr><td style="text-align:left"><code>DirectoryOrCreate</code></td><td style="text-align:left">目录必须存在，权限必须是755</td></tr><tr><td style="text-align:left"><code>Directory</code></td><td style="text-align:left">目录必须存在</td></tr><tr><td style="text-align:left"><code>FileOrCreate</code></td><td style="text-align:left">文件必须存在，权限必须是644</td></tr><tr><td style="text-align:left"><code>File</code></td><td style="text-align:left">文件必须存在</td></tr><tr><td style="text-align:left"><code>Socket</code></td><td style="text-align:left">挂载socket文件</td></tr><tr><td style="text-align:left"><code>CharDevice</code></td><td style="text-align:left">挂载字符设备文件（键盘，鼠标，终端…）</td></tr><tr><td style="text-align:left"><code>BlockDevice</code></td><td style="text-align:left">挂载快设备文件（磁盘，U盘，移动硬盘…）</td></tr></tbody></table><p>第二种：emptyDir</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">1、编写资源清单</span><br><span class="line">[root@master01 kubernetes]# vim wp.yml</span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Pod&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: mysql57-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: mysql57</span><br><span class="line">    run: mysql57</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment">#设置挂载映射的写法   指定宿主机的挂载目录</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: mysql-data       <span class="comment">#名字一定要写，设置挂载的变量，相当于变量名</span></span><br><span class="line">    hostPath:</span><br><span class="line">      path: /data/mysql    <span class="comment">#宿主机的目录，相当于变量值</span></span><br><span class="line">  - name: empty-data</span><br><span class="line">    emptyDir: &#123;&#125;           <span class="comment">#默认是空的话就写&#123;&#125;</span></span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: mysql57-container</span><br><span class="line">    image: mysql:5.7.44</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">    - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;123&quot;</span></span><br><span class="line">    - name: MYSQL_DATABASE</span><br><span class="line">      value: <span class="string">&quot;wp_db&quot;</span></span><br><span class="line">    - name: MYSQL_USER</span><br><span class="line">      value: <span class="string">&quot;wp_user&quot;</span></span><br><span class="line">    - name: MYSQL_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="comment">#指定字符集的写法</span></span><br><span class="line">    args:</span><br><span class="line">    - --character-set-server=utf8mb4</span><br><span class="line">    - --collation-server=utf8mb4_unicode_ci</span><br><span class="line"><span class="comment">#容器里面的目录挂载出来的写法</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: empty-data             <span class="comment">#现在容器的目录要挂到宿主机的哪个目录，就写宿主机目录的变量名</span></span><br><span class="line">      mountPath: /var/lib/mysql    <span class="comment">#这里写容器里需要挂出来的目录</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、删除node03的data目录</span><br><span class="line">[root@node03 ~]# <span class="built_in">rm</span> -rf /data/mysql/</span><br><span class="line"></span><br><span class="line">3、删除上一次实验起的pod,重新运行资源清单</span><br><span class="line">[root@master01 kubernetes]# kubectl delete pod  mysql57-pod</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f mysql.yml </span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     IP          NODE  </span><br><span class="line">mysql57-pod              1/1     Running   0          59s     10.2.3.24   node03</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、查询映射的datam目录</span><br><span class="line">[root@node03 ~]# docker inspect 1dd8436185b0</span><br><span class="line"><span class="comment">#查找Mounts</span></span><br><span class="line"><span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/kubelet/pods/b3994de1-53ba-4ccf-b3b1-a7bdc8f1b08d/volumes/kubernetes.io~empty-dir/empty-data&quot;</span>,</span><br><span class="line"></span><br><span class="line">[root@node03 ~]# ll /var/lib/kubelet/pods/b3994de1-53ba-4ccf-b3b1-a7bdc8f1b08d/volumes/kubernetes.io~empty-dir/empty-data</span><br><span class="line">total 188484</span><br><span class="line">-rw-r----- 1 polkitd input       56 Sep 19 20:05 auto.cnf</span><br><span class="line"></span><br><span class="line">emptyDir: &#123;&#125;</span><br><span class="line">只是临时使用：随机的临时目录  容器删除，这个目录就会被删除，做不到持久化</span><br><span class="line"></span><br><span class="line">作用：在同一个Pod里,2个容器之间的文件是互相隔离的，想让他们互通某个目录就可以使用到，让2个容器同时都挂载到这个目录，这样子这两个容器就找到共享这个目录</span><br></pre></td></tr></table></figure><p>将一个POD内的两个容器共享目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">1、编写资源清单</span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Pod&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: c7-nginx</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: empty-data</span><br><span class="line">    emptyDir: &#123;&#125; </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: empty-data</span><br><span class="line">      mountPath: /usr/share/nginx/html     </span><br><span class="line">      <span class="comment">#让busybox挂到宿主机的随机目录</span></span><br><span class="line"> </span><br><span class="line">  - name: c7-container</span><br><span class="line">    image: centos:7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;tail -f /etc/hosts&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: empty-data</span><br><span class="line">      mountPath: /opt/html    </span><br><span class="line">      <span class="comment">#让c7挂到宿主机的随机目录</span></span><br><span class="line">      <span class="comment">#都是挂到宿主机的临时目录，这两个目录里面的文件肯定是互通的</span></span><br><span class="line">      </span><br><span class="line">2、运行资源清单，并查看pod运行的node</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f c7-busybox-emptyDir.yml </span><br><span class="line">pod/c7-nginx created</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     IP          NODE  </span><br><span class="line">c7-nginx                 2/2     Running   0          5s      10.2.3.30   node03</span><br><span class="line"></span><br><span class="line">3、测试2个容器是否共享了目录</span><br><span class="line">[root@node03 ~]# docker inspect dbb9f576eacd</span><br><span class="line">        <span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/kubelet/pods/bed3c777-7aff-4593-a7bc-f2bc3ed47827/volumes/kubernetes.io~empty-dir/empty-data&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/opt/html&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span><br><span class="line">                </span><br><span class="line">4、查看挂载的随机目录，是空的               </span><br><span class="line">[root@node03 ~]# ll /var/lib/kubelet/pods/bed3c777-7aff-4593-a7bc-f2bc3ed47827/volumes/kubernetes.io~empty-dir/empty-data</span><br><span class="line">total 0     </span><br><span class="line"></span><br><span class="line">5、连进容器里面查看挂载目录，是空的  </span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it c7-nginx -c nginx-container -- /bin/sh</span><br><span class="line">/ <span class="comment"># ls -l /usr/share/nginx/html/</span></span><br><span class="line"></span><br><span class="line">[root@master01 ~]# kubectl <span class="built_in">exec</span> -it c7-nginx -c c7-container -- /bin/bash</span><br><span class="line">[root@c7-nginx /]# <span class="built_in">ls</span> -l /opt/html/</span><br><span class="line">total 0</span><br><span class="line"></span><br><span class="line">6、进入随机目录，并且创建一个文件</span><br><span class="line">[root@node03 ~]# <span class="built_in">cd</span> /var/lib/kubelet/pods/bed3c777-7aff-4593-a7bc-f2bc3ed47827/volumes/kubernetes.io~empty-dir/empty-data</span><br><span class="line">[root@node03 empty-data]# <span class="built_in">echo</span> <span class="string">&quot;test 将一个POD内的两个容器共享目录&quot;</span> &gt; index.html</span><br><span class="line"></span><br><span class="line">7、进入容器，查看文件可以看到2个容器都可以看到创建的文件内容</span><br><span class="line">/ <span class="comment"># cat /usr/share/nginx/html/index.html </span></span><br><span class="line"><span class="built_in">test</span> 将一个POD内的两个容器共享目录</span><br><span class="line">/ <span class="comment"># curl 127.0.0.1</span></span><br><span class="line"><span class="built_in">test</span> 将一个POD内的两个容器共享目录</span><br><span class="line"></span><br><span class="line">[root@c7-nginx /]# <span class="built_in">cat</span> /opt/html/index.html </span><br><span class="line"><span class="built_in">test</span> 将一个POD内的两个容器共享目录</span><br><span class="line">[root@c7-nginx /]# curl 127.0.0.1</span><br><span class="line"><span class="built_in">test</span> 将一个POD内的两个容器共享目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#当Pod结束了，共享就结束了，如果数据很重要，需要持久化，emptyDir就不建议使用，就使用Hostoath</span></span><br><span class="line"></span><br><span class="line">一个pod起在node02,一个起在node03,只能用nfs共享</span><br><span class="line"></span><br><span class="line"><span class="built_in">command</span>后面的命令会让容器把后面的命令当初PID为1的进程，那条命令结束，进程就结束了</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">比如说想改nginx端口，想用8080，用资源清单怎么改配置文件</span><br><span class="line">pod不能自动拉取</span><br><span class="line">pod初始化容器，想临时改里面某些东西，比如说添加www用户，统一用户</span><br><span class="line"></span><br><span class="line">钩子 启动钩子：启动之前让他做一些事情</span><br><span class="line">停止钩子：pod结束了就停止钩子，结束之前想让他发邮件告警</span><br><span class="line">探针：k8s挂了可以重新拉起，那么pod没挂，但是网站是404或者50几，网站不能正常访问，但是k8s只检测pod有没有挂或者被删除，但是10个pod都是404，pod在，不会重新拉起，就要用探针</span><br><span class="line">存活探针 救续探针  自动扩缩容</span><br></pre></td></tr></table></figure><p><strong>wordpress镜像</strong></p><p>在一个POD里启动两个容器 wordpress和mysql5.7，用户上传数据的目录做持久化，该打标签的打标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行数据库</span></span><br><span class="line">docker run \</span><br><span class="line">--name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=wp_db \</span><br><span class="line">-e MYSQL_USER=wp_user \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:5.7.44</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行wordpress容器</span></span><br><span class="line">docker run \</span><br><span class="line">--name wp \</span><br><span class="line">--<span class="built_in">link</span> mysql57 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-e WORDPRESS_DB_HOST=mysql57 \</span><br><span class="line">-e WORDPRESS_DB_USER=wp_user \</span><br><span class="line">-e WORDPRESS_DB_PASSWORD=123 \</span><br><span class="line">-e WORDPRESS_DB_NAME=wp_db \</span><br><span class="line">-d wordpress-df:v2 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# vim wp.yml</span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Namespace&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: wp</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: wp-pod</span><br><span class="line">  namespace: wp</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: wp-containers</span><br><span class="line">    image: wordpress-df:v2</span><br><span class="line">    imagePullPolicy: Never</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">    - name: WORDPRESS_DB_HOST</span><br><span class="line">      value: <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    - name: WORDPRESS_DB_USER</span><br><span class="line">      value: <span class="string">&quot;wp_user&quot;</span></span><br><span class="line">    - name: WORDPRESS_DB_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;123&quot;</span></span><br><span class="line">    - name: WORDPRESS_DB_NAME</span><br><span class="line">      value: <span class="string">&quot;wp_db&quot;</span></span><br><span class="line"></span><br><span class="line">  - name: mysql-containers</span><br><span class="line">    image: mysql:5.7.44</span><br><span class="line">    imagePullPolicy: Never</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 3306</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">    - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;123&quot;</span></span><br><span class="line">    - name: MYSQL_DATABASE</span><br><span class="line">      value: <span class="string">&quot;wp_db&quot;</span></span><br><span class="line">    - name: MYSQL_USER</span><br><span class="line">      value: <span class="string">&quot;wp_user&quot;</span></span><br><span class="line">    - name: MYSQL_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;123&quot;</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: db</span><br><span class="line">      mountPath: /var/lib/mysql</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">给pod打标签以及共享文件系统</summary>
    
    
    
    <category term="k8s" scheme="https://www.fomal.cc/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>🍉3、POD资源</title>
    <link href="https://www.fomal.cc/posts/763f53e4.html"/>
    <id>https://www.fomal.cc/posts/763f53e4.html</id>
    <published>2024-09-22T06:44:58.000Z</published>
    <updated>2024-09-30T07:54:12.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="POD资源的介绍">POD资源的介绍</h2><h3 id="1、kubernetes资源对象操作">1、<strong>kubernetes资源对象操作</strong></h3><table><thead><tr><th>资源对象</th><th>增</th><th>删</th><th>改</th><th>查</th></tr></thead><tbody><tr><td>nodes</td><td></td><td>kubectl delete node</td><td></td><td>kubectl get nodes</td></tr><tr><td>namespace</td><td>kubectl create ns  [资源名]</td><td>kubectl delete ns  [资源名]</td><td>kubectl edit ns  [资源名]</td><td>kubectl get ns</td></tr><tr><td>pod</td><td>kubectl create deployment [资源名]</td><td>kubectl delete pod  [pod名]</td><td></td><td>kubectl get pod</td></tr></tbody></table><p>1、nodes</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">增</span><br><span class="line"><span class="comment">#忘记node加入master集群命令,那么需要重新执行如下命令</span></span><br><span class="line">[root@master01 ~]# kubeadm token create --print-join-command</span><br><span class="line"></span><br><span class="line">删</span><br><span class="line">kubectl delete node</span><br><span class="line"></span><br><span class="line">查</span><br><span class="line"><span class="comment">#查看集群节点状态</span></span><br><span class="line">[root@master01 ~]# kubectl get nodes</span><br><span class="line">NAME       STATUS   ROLES    AGE    VERSION</span><br><span class="line">master01   Ready    master   5d2h   v1.19.3</span><br><span class="line">node01     Ready    &lt;none&gt;   5d2h   v1.19.3</span><br><span class="line">node02     Ready    &lt;none&gt;   5d2h   v1.19.3</span><br><span class="line">node03     Ready    &lt;none&gt;   5d2h   v1.19.3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看名称空间</span></span><br><span class="line">[root@master01 ~]# kubectl get ns</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   5d2h</span><br><span class="line">kube-flannel      Active   5d1h</span><br><span class="line">kube-node-lease   Active   5d2h</span><br><span class="line">kube-public       Active   5d2h</span><br><span class="line">kube-system       Active   5d2h</span><br></pre></td></tr></table></figure><p>2、namespace</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">增</span><br><span class="line">kubectl create ns  [资源名]</span><br><span class="line"></span><br><span class="line">删</span><br><span class="line">kubectl delete ns  [资源名]</span><br><span class="line"></span><br><span class="line">改</span><br><span class="line">kubectl edit ns  [资源名]</span><br><span class="line"></span><br><span class="line">查</span><br><span class="line">kubectl get ns </span><br></pre></td></tr></table></figure><p>3、pod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">查</span><br><span class="line"><span class="comment">#查看pod(默认查看default名称空间)</span></span><br><span class="line">[root@master01 ~]# kubectl get pod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看pod(查看指定的名称空间)</span></span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-flannel</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看帮助</span></span><br><span class="line">[root@master01 ~]# kubectl get pod --<span class="built_in">help</span></span><br><span class="line">-o或者--output：指定输出格式</span><br><span class="line">json：输出json格式</span><br><span class="line">yaml：输出yaml格式</span><br><span class="line">wide：输出详细信息</span><br><span class="line"></span><br><span class="line">-n：指定名称空间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定输出格式</span></span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-flannel -o json</span><br><span class="line"></span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-flannel </span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-flannel-ds-4ncf5   1/1     Running   0          5d2h</span><br><span class="line">kube-flannel-ds-7dnxx   1/1     Running   1          5d2h</span><br><span class="line">kube-flannel-ds-dpzqp   1/1     Running   0          5d2h</span><br><span class="line">kube-flannel-ds-knmch   1/1     Running   0          5d2h</span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-flannel kube-flannel-ds-4ncf5 -o json</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看指定的pod</span></span><br><span class="line">[root@master01 ~]# kubectl get pod nginx-5f5d9d69c4-pk4c4 -o yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出pod详细信息</span></span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-flannel -o wide</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE    IP           NODE       NOMINATED NODE   READINESS GATES</span><br><span class="line">kube-flannel-ds-4ncf5   1/1     Running   0          5d2h   10.0.0.203   node03     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-7dnxx   1/1     Running   1          5d2h   10.0.0.200   master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-dpzqp   1/1     Running   0          5d2h   10.0.0.201   node01     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-knmch   1/1     Running   0          5d2h   10.0.0.202   node02     &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">增</span><br><span class="line"><span class="comment">#创建pod(默认创建在default名称空间)</span></span><br><span class="line">kubectl create deployment pod名 --image=镜像:版本</span><br><span class="line">[root@master01 ~]# kubectl create deployment nginx --image=nginx:alpine</span><br><span class="line"></span><br><span class="line">删</span><br><span class="line"><span class="comment">#删除pod</span></span><br><span class="line">[root@master01 ~]# kubectl delete pod nginx-65cc99f84f-8k9rj</span><br><span class="line"></span><br><span class="line">改</span><br><span class="line"><span class="comment">#当创建pod，镜像名写错了，需要修改时</span></span><br><span class="line">[root@master01 ~]# kubectl edit deployment nginx </span><br><span class="line">就会进入像vi编辑器一样的东西，找到image，改后面的镜像名</span><br><span class="line"></span><br><span class="line">等待一会，这次查看pod,就会正常运行</span><br><span class="line">[root@master01 ~]#  kubectl get pod</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-5f5d9d69c4-pk4c4   1/1     Running   0          8m14s</span><br></pre></td></tr></table></figure><h3 id="2、POD的资源清单">2、<strong>POD的资源清单</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# vim nginx.yaml </span><br><span class="line">apiVersion: v1                        <span class="comment">## K8S资源接口</span></span><br><span class="line">kind: Pod                             <span class="comment">## 资源类型</span></span><br><span class="line">metadata:                             <span class="comment">## 资源的元数据</span></span><br><span class="line">  name: nginx-pod                     <span class="comment">## POD名字</span></span><br><span class="line">  namespace: default                  <span class="comment">## 资源启动在哪个名称空间</span></span><br><span class="line">spec:                                 <span class="comment">## 容器相关信息</span></span><br><span class="line">  containers:                         <span class="comment">## 容器信息</span></span><br><span class="line">  - image: nginx:alpine               <span class="comment">## 指定容器的镜像</span></span><br><span class="line">    imagePullPolicy: IfNotPresent     <span class="comment">## 镜像拉取规则  IfNotPresent：不存在则拉取</span></span><br><span class="line">    name: nginx-containers            <span class="comment">## 容器名字</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">Always：总是拉取，不管当前机器上是否有改镜像都拉取</span><br><span class="line">Never：从不拉取镜像，需要提前docker pull</span><br><span class="line">IfNotPresent：不存在则拉取</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#K8S资源接口：</span></span><br><span class="line">apiVersion: v1  </span><br><span class="line">可以理解为https://master的ip:6443/pod/v1一开始init初始化的时候就写了master的ip为10.0.0.200，会自动补全，可以理解为前面可以不写，会自动补全,这些接口全都注册在etcd里面</span><br><span class="line">https://10.0.0.200:6443/pod/v1</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240918150439792.png" alt="image-20240918150439792"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动pod</span></span><br><span class="line">[root@master01 ~]# kubectl create -f nginx.yml </span><br><span class="line">pod/nginx-pod created</span><br><span class="line">[root@master01 ~]# kubectl get pod</span><br><span class="line">nginx-pod                0/1     ContainerCreating   0          13s</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看这个pod起在哪个node</span></span><br><span class="line">[root@master01 ~]# kubectl get pod -o wide</span><br><span class="line">NAME                     READY   STATUS             RESTARTS   AGE     IP         NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-pod                0/1     ImagePullBackOff   0          4m49s   10.2.3.6   node03   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="3、手写资源清单">3、<strong>手写资源清单</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参考网址：http://k8s.driverzeng.com/v1.19/</span><br><span class="line">这4个必写的</span><br><span class="line"></span><br><span class="line">object数据类型写法：直接回车，和上一个缩进写key: value的形式</span><br><span class="line">[]列表数据类型写法：回车之后写一个减号-，再空格</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240918153235543.png" alt="image-20240918153235543"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">1、编写资源清单  <span class="comment"># 这里有坑，需要继续往下查看更新后的资源清单</span></span><br><span class="line">[root@master01 ~]# vim busybox.yml</span><br><span class="line"><span class="comment">#如果后面要指定名称空间，就要先创建名称空间</span></span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Namespace&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: aaa</span><br><span class="line"><span class="comment">#分隔符，分隔上面和下面的资源</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#这个是1个pod里面起2个容器</span></span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Pod&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: busybox-pod</span><br><span class="line">  namespace: aaa</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: busybox-containers</span><br><span class="line">    image: busybox</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"> </span><br><span class="line">  - name: nginx-containers</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    </span><br><span class="line">2、启动资源</span><br><span class="line">[root@master01 ~]# kubectl apply -f busybox.yml </span><br><span class="line">namespace/aaa created</span><br><span class="line">pod/busybox-pod created</span><br><span class="line"></span><br><span class="line">3、查看名称空间里面起的资源，只看到一个</span><br><span class="line">[root@master01 ~]# kubectl get pod -n aaa</span><br><span class="line">NAME          READY   STATUS             RESTARTS   AGE</span><br><span class="line">busybox-pod   1/2     CrashLoopBackOff   3          94s</span><br><span class="line"></span><br><span class="line">4、由于名称空间里面起的资源，只看到一个，所以有问题，要检查原因排错</span><br><span class="line"><span class="comment">#排查命令</span></span><br><span class="line"><span class="comment">#kubectl describe [资源] [资源名] [-n 名称空间]</span></span><br><span class="line"></span><br><span class="line">[root@master01 ~]# kubectl describe pod busybox-pod -n aaa</span><br><span class="line"></span><br><span class="line">[root@master01 ~]# kubectl describe namespace  aaa</span><br><span class="line"></span><br><span class="line">其实原因就是busybox没卡住，这个是网络相关的镜像，需要加命令卡住</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">5、更新资源清单</span><br><span class="line">[root@master01 ~]# vim busybox.yml</span><br><span class="line"><span class="comment">#如果后面要指定名称空间，就要先创建名称空间</span></span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Namespace&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: aaa</span><br><span class="line"><span class="comment">#分隔符，分隔上面和下面的资源</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#这个是1个pod里面起2个容器</span></span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Pod&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: busybox-pod</span><br><span class="line">  namespace: aaa</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: busybox-containers</span><br><span class="line">    image: busybox</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="comment">#加入卡住的命令</span></span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/tail&quot;</span>,<span class="string">&quot;-f&quot;</span>,<span class="string">&quot;/etc/hosts&quot;</span>]</span><br><span class="line"> </span><br><span class="line">  - name: nginx-containers</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    </span><br><span class="line">6、删除就得pod</span><br><span class="line">[root@master01 ~]# kubectl delete -f busybox.yml</span><br><span class="line"></span><br><span class="line">7、再次创建pod,并查看</span><br><span class="line">[root@master01 ~]# kubectl apply -f busybox.yml </span><br><span class="line">[root@master01 ~]# kubectl get pod -n aaa</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE</span><br><span class="line">busybox-pod   2/2     Running   0          13s</span><br><span class="line"><span class="comment">#查看详细信息</span></span><br><span class="line">[root@master01 ~]# kubectl get pod -n aaa -o wide</span><br></pre></td></tr></table></figure><h3 id="4、使用VScode编写资源清单">4、<strong>使用VScode编写资源清单</strong></h3><p>1、配置VScode</p><p>先远程连接主节点</p><p><img src="../image/study_img/image-20240918170551193.png" alt="image-20240918170551193"></p><p>统一资源清单的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# <span class="built_in">mkdir</span> /opt/kubernetes</span><br><span class="line">[root@master01 ~]# <span class="built_in">mv</span> *.yml /opt/kubernetes</span><br></pre></td></tr></table></figure><p>连接成功，打开创建的/opt/kubernetes目录</p><p><img src="../image/study_img/image-20240918171056628.png" alt="image-20240918171056628"></p><p><img src="../image/study_img/image-20240918171219206.png" alt="image-20240918171219206"></p><p>配置梯子加速下载，安装kubernetes插件，安装插件可能需要7分钟左右</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# vim ~/.bashrc </span><br><span class="line"><span class="built_in">export</span> https_proxy=https://192.168.10.200:7890</span><br><span class="line"></span><br><span class="line">[root@master01 ~]# <span class="built_in">source</span> .bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用完成后，执行如下：</span></span><br><span class="line">[root@master01 ~]# vim ~/.bashrc </span><br><span class="line"><span class="comment">#export https_proxy=https://192.168.10.200:7890</span></span><br><span class="line"></span><br><span class="line">[root@master01 ~]# <span class="built_in">unset</span> https_proxy</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240918172406539.png" alt="image-20240918172406539"></p><p><img src="../image/study_img/image-20240918173241749.png" alt="image-20240918173241749"></p><p>安装插件可能需要7分钟左右，安装完成</p><p><img src="../image/study_img/image-20240918174036219.png" alt="image-20240918174036219"></p><p>2、使用插件</p><p>查看镜像的状态和ip</p><p><img src="../image/study_img/image-20240918174854465.png" alt="image-20240918174854465"></p><p>编写资源清单</p><p><img src="../image/study_img/image-20240918175229795.png" alt="image-20240918175229795"></p><p><img src="../image/study_img/image-20240918175420732.png" alt="image-20240918175420732"></p><p><img src="../image/study_img/image-20240918175433243.png" alt="image-20240918175433243"></p><p>根据模版修改内容    资源限制不需要，所以删除，删除之后有黄线，不用管</p><p><img src="../image/study_img/image-20240918175813043.png" alt="image-20240918175813043"></p>]]></content>
    
    
    <summary type="html">编写pod资源清单，使用一个很好用的工具VScode编写资源清单，本文有写操作方法哦，非常实用</summary>
    
    
    
    <category term="k8s" scheme="https://www.fomal.cc/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>🍉2、kubernets安装部署v1.19-源码安装</title>
    <link href="https://www.fomal.cc/posts/8b2778bc.html"/>
    <id>https://www.fomal.cc/posts/8b2778bc.html</id>
    <published>2024-09-22T06:44:18.000Z</published>
    <updated>2024-10-02T08:05:43.445Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kubernets安装部署v1-19-源码安装">kubernets安装部署v1.19  (源码安装)</h2><h3 id="1、k8s的安装方式">1、<strong>k8s的安装方式</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## K8S的方式有一堆</span></span><br><span class="line">二进制安装  生产推荐</span><br><span class="line">kubeadm    生产推荐</span><br><span class="line">Ansible    二进制安装</span><br><span class="line">Rancher    虽然k8s是有自带的图形化界面，但在企业里面用Rancher的还是比较多</span><br><span class="line">阿里云ACK</span><br><span class="line">亚马逊云EKS</span><br><span class="line"></span><br><span class="line">安装k8s1.19版，k8s中小版本变了影响很大，接口是不一样的</span><br></pre></td></tr></table></figure><p>环境准备</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th><th>配置</th><th>配置</th></tr></thead><tbody><tr><td>master01</td><td>10.0.0.200  /  172.16.1.200</td><td>master</td><td>kubectl,apiserver,scheduler,controller,<br>etcd,kubelet,kube-proxy</td><td>1h2G</td></tr><tr><td>node01</td><td>10.0.0.201  /  172.16.1.201</td><td>node</td><td>kubectl，apiserver,<br>kube-proxy</td><td>1h2G</td></tr><tr><td>node02</td><td>10.0.0.202  /  172.16.1.202</td><td>node</td><td>kubectl，apiserver,<br>kube-proxy</td><td>1h2G</td></tr><tr><td>node03</td><td>10.0.0.203  /  172.16.1.203</td><td>node</td><td>kubectl，apiserver,<br>kube-proxy</td><td>2h4G</td></tr></tbody></table><p>IP规划</p><p>为什么规划IP?  因为所有的POD起来应该在同一个网段，Cluster IP也在同一个网段</p><table><thead><tr><th>三种service</th><th>IP</th></tr></thead><tbody><tr><td>POD IP</td><td>10.2.0.0</td></tr><tr><td>Cluster IP</td><td>10.1.0.0</td></tr><tr><td>Node IP</td><td>10.0.0.0</td></tr></tbody></table><p>注意：如果是二进制安装，默认的pod IP是10.0.0.0网段，宿主机的网段和pod ip·不能一样</p><p><strong>①、部署前的环境优化</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######4台机器都执行   </span></span><br><span class="line"><span class="comment">#(kubelet:控制容器运行时启动容器的东西,要把master当作node节点，所以master也要安装)</span></span><br><span class="line">1、配置kublet配置文件，使用系统自带的Cgroup驱动和禁用swap     </span><br><span class="line"><span class="built_in">cat</span> &gt;/etc/sysconfig/kubelet &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">KUBELET_CGROUP_ARGS=&quot;--cgroup-driver=systemd&quot;</span></span><br><span class="line"><span class="string">KUBELET_EXTRA_ARGS=&quot;--fail-swap-on=false&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#让kubelet使用系统自带的Cgroup驱动 </span></span><br><span class="line">KUBELET_CGROUP_ARGS=<span class="string">&quot;--cgroup-driver=systemd&quot;</span></span><br><span class="line"><span class="comment">#让kubelet禁止使用swap(虚拟内存) </span></span><br><span class="line">KUBELET_EXTRA_ARGS=<span class="string">&quot;--fail-swap-on=false&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、内参数调优，要把iptable功能开启(因为底层端口的转发端口映射都是防火墙做的)</span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables=1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables=1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward=1</span></span><br><span class="line"><span class="string">vm.swappiness=0</span></span><br><span class="line"><span class="string">fs.file-max=52706963</span></span><br><span class="line"><span class="string">fs.nr_open=52706963</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开启iptables功能   ipv4</span></span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line"><span class="comment">#开启iptables功能   ipv6</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line"><span class="comment">#开启内核转发</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line"><span class="comment">#内核参数禁用swap</span></span><br><span class="line">vm.swappiness=0</span><br><span class="line"><span class="comment">#文件描述符文件最大值</span></span><br><span class="line">fs.file-max=52706963</span><br><span class="line"><span class="comment">#文件描述符开启数量</span></span><br><span class="line">fs.nr_open=52706963</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、检查是否配置成功</span><br><span class="line">sysctl --system</span><br><span class="line">执行之后输出结果倒数的行会显示第2步配置的内容</span><br><span class="line">* Applying /etc/sysctl.d/k8s.conf ...</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">vm.swappiness = 0</span><br><span class="line">fs.file-max = 52706963</span><br><span class="line">fs.nr_open = 52706963</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、更改docker源</span><br><span class="line">[root@master01 ~]# <span class="built_in">cat</span> &gt; /etc/yum.repos.d/docker-ce.repo &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[docker-ce-stable]</span></span><br><span class="line"><span class="string">name=Docker CE Stable - $basearch</span></span><br><span class="line"><span class="string">baseurl=https://download.docker.com/linux/centos/7/x86_64/stable</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://download.docker.com/linux/centos/gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">[root@master01 ~]# sed -i <span class="string">&#x27;s+download.docker.com+mirrors.huaweicloud.com/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">5、安装时间同步服务 (这个不需要写在定时任务里面)</span><br><span class="line">yum install -y chrony</span><br><span class="line">systemctl start chronyd</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6、关闭swap</span><br><span class="line">swapoff -a</span><br><span class="line">sed -i <span class="string">&#x27;/swap/d&#x27;</span> /etc/fstab</span><br><span class="line">free -m</span><br><span class="line">[root@master01 ~]# free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1846         100        1271           9         474        1564</span><br><span class="line">Swap:             0           0           0#变成0就是关闭了</span><br><span class="line"></span><br><span class="line"><span class="comment">#临时关闭swap</span></span><br><span class="line">swapoff -a</span><br><span class="line"><span class="comment">#永久关闭swap</span></span><br><span class="line">sed -i <span class="string">&#x27;/swap/d&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7、加载ipvs模块   做k8s，底层有转发，需要配合ipvs模块才可以</span><br><span class="line"><span class="built_in">cat</span>  &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">modprobe -- ip_vs</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_rr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_wrr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_sh</span></span><br><span class="line"><span class="string">modprobe -- nf_conntrack_ipv4</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> +x /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"><span class="built_in">source</span> /etc/sysconfig/modules/ipvs.modules</span><br><span class="line">lsmod|grep -e <span class="string">&#x27;ip_vs&#x27;</span> -e <span class="string">&#x27;nf_conntrack_ipv&#x27;</span>  </span><br><span class="line"><span class="comment">#过滤出ip_vs模块就加载出来了</span></span><br><span class="line"></span><br><span class="line">ipvs:LVS做四层负载,不需要装任何软件,需要下载ipvsadm命令,用ipvsadm这个命令去改主机的路由、路由表、网络相关的东西改掉,把这个主机当成四层负载的机器,底层要做转发的，LVS这个服务比较独特的，没有专门的应用，不像nginx、HAproxy做负载均衡需要安装nginx、HAproxy,LVS没有服务安装，需要安装ipvsadm,用这个命令去修改路由修改转发这些东西，让整个物理机变成转发的机器</span><br></pre></td></tr></table></figure><p><strong>②、安装docker指定版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######4台机器都执行 ####</span></span><br><span class="line">1、查询docker版本  </span><br><span class="line"><span class="comment">#(只显示yum仓库里的最新版)</span></span><br><span class="line">yum list docker-ce </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有的版本</span></span><br><span class="line">yum list docker-ce --showduplicates</span><br><span class="line"></span><br><span class="line">2、安装docke 19.03.15版本，因为这个版本比较稳定</span><br><span class="line">yum install -y docker-ce-19.03.15 docker-ce-cli-19.03.15 containerd.io</span><br><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">containerd.io：容器运行时，用k8s新版本，可以直接无痕从docke对接到containerd，默认安装最新版</span><br><span class="line"></span><br><span class="line">3、查看是否出现警告，再看一下显示的版本是否对的上</span><br><span class="line">[root@node01 ~]# docker info</span><br><span class="line">Client:</span><br><span class="line">...</span><br><span class="line"> Server Version: 19.03.15</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#生产中再加2个步骤：</span></span><br><span class="line"><span class="comment">#4、修改数据目录</span></span><br><span class="line"><span class="comment">#5、docker图形化界面</span></span><br><span class="line"> </span><br><span class="line">4、配置镜像加速和Cgroup驱动</span><br><span class="line"> <span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [</span></span><br><span class="line"><span class="string">  &quot;https://docker.1panel.live&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://dockercf.jsdelivr.fyi&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker-cf.registry.cyou&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.chenby.cn&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.jsdelivr.fyi&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.m.daocloud.io&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.m.daocloud.io&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.nju.edu.cn&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://dockerproxy.com&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.rainbond.cc&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.registry.cyou&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://dockertest.jsdelivr.fyi&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://hub-mirror.c.163.com&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://hub.rat.dev/&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://mirror.aliyuncs.com&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://mirror.baidubce.com&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://mirror.iscas.ac.cn&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、测试拉取</span><br><span class="line">[root@node01 ~]# docker pull busybox</span><br><span class="line">[root@node01 ~]# docker images</span><br></pre></td></tr></table></figure><p><strong>③、安装kubeadm</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######4台机器都执行 ####</span></span><br><span class="line">1、更换华为源</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.huaweicloud.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.huaweicloud.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.huaweicloud.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">2、安装kubelet node节点容器运行时的控制器 kubeadm做k8s集群 kubectl是k8s的客户端命令 ipvsadm加载jpvs模块</span><br><span class="line">yum install kubelet-1.19.3 kubeadm-1.19.3  kubectl-1.19.3  ipvsadm -y</span><br><span class="line"></span><br><span class="line">systemctl start kubelet.service &amp;&amp; systemctl <span class="built_in">enable</span> kubelet.service </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubelet-1.19.3 ：控制容器运行时</span><br><span class="line">kubeadm-1.19.3  ：类似于stream</span><br><span class="line">kubectl-1.19.3  ：执行k8s命令需要的客户端</span><br><span class="line">ipvsadm：上面配置IPVS模块，需要使用这个命令</span><br></pre></td></tr></table></figure><p><strong>④、master01初始化集群</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####如下操作只能master01执行(master节点执行)，其他机器不要执行</span></span><br><span class="line">1、初始化集群   大概要等待几分钟</span><br><span class="line">[root@master01 ~]# kubeadm init \</span><br><span class="line">--apiserver-advertise-address=10.0.0.200 \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers  \</span><br><span class="line">--kubernetes-version=v1.19.3 \</span><br><span class="line">--service-cidr=10.1.0.0/16 \</span><br><span class="line">--pod-network-cidr=10.2.0.0/16 \</span><br><span class="line">--service-dns-domain=cluster.local \</span><br><span class="line">--ignore-preflight-errors=Swap \</span><br><span class="line">--ignore-preflight-errors=NumCPU</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#只有一个master的写法</span></span><br><span class="line">--apiserver-advertise-address=master的ip \</span><br><span class="line"><span class="comment">#镜像仓库的地址 阿里云的谷歌容器的</span></span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers  \</span><br><span class="line">--kubernetes-version=v1.19.3 \</span><br><span class="line"><span class="comment">#service资源，设置cluster ip网段</span></span><br><span class="line">--service-cidr=10.1.0.0/16 \</span><br><span class="line"><span class="comment">#设置pod ip的网段</span></span><br><span class="line">--pod-network-cidr=10.2.0.0/16 \</span><br><span class="line"><span class="comment">#使用本地的dns</span></span><br><span class="line">--service-dns-domain=cluster.local \</span><br><span class="line"><span class="comment">#忽略swap的报错</span></span><br><span class="line">--ignore-preflight-errors=Swap \</span><br><span class="line"><span class="comment">#忽略cpu的报错</span></span><br><span class="line">--ignore-preflight-errors=NumCPU</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、保存最后几行内容</span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line">  <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line">  <span class="comment">#其他node节点加入集群</span></span><br><span class="line">Then you can <span class="built_in">join</span> any number of worker nodes by running the following on each as root:</span><br><span class="line">kubeadm <span class="built_in">join</span> 10.0.0.200:6443 --token cgex1m.9ck6cjchon5xn4j5 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:273cdce81c642065666a2d0eb4fd0c3097df69e984fa50836b8daf2ed10de18a </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#翻译</span></span><br><span class="line">您的Kubernetes控制平面已成功初始化！</span><br><span class="line">要开始使用集群，您需要以普通用户身份运行以下命令：</span><br><span class="line">mkdir-p<span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="built_in">sudo</span> cp-i/etc/kubernetes/admin.conf<span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span>$（id-u）：$（id-g）<span class="variable">$HOME</span>/.kube/config</span><br><span class="line">现在，您应该将pod网络部署到集群。</span><br><span class="line">使用以下列出的选项之一运行“kubectl apply-f[podnetwork].yaml”：</span><br><span class="line">https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line">然后，您可以通过以root身份在每个工作节点上运行以下命令来加入任意数量的工作节点：</span><br><span class="line">kubeadm <span class="built_in">join</span> 10.0.0.200:6443 --token cgex1m.9ck6cjchon5xn4j5 \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:273cdce81c642065666a2d0eb4fd0c3097df69e984fa50836b8daf2ed10de18a</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">3、可以看到多了好几个镜像，说明刚才的命令执行成功，拉取了需要的镜像</span><br><span class="line">[root@master01 ~]# docker images</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">4、执行这几个命令   创建隐藏目录，拷贝配置文件，授权</span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、查看k8s集群节点， 会看到master主节点</span><br><span class="line">[root@master01 ~]# kubectl get nodes</span><br><span class="line">NAME       STATUS     ROLES    AGE     VERSION</span><br><span class="line">master01   NotReady   master   4m32s   v1.19.3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###############node节点操作第6步  node01 node02 node03</span></span><br><span class="line">6、目前只有一个节点，所以要将其他节点加入集群</span><br><span class="line"><span class="comment">##注意：这个命令要保存好，因为横向扩展，将节点加入集群需要使用</span></span><br><span class="line">[root@master01 ~]# kubeadm <span class="built_in">join</span> 10.0.0.200:6443 --token cgex1m.9ck6cjchon5xn4j5 \</span><br><span class="line">--discovery-token-ca-cert-hash</span><br><span class="line">sha256:273cdce81c642065666a2d0eb4fd0c3097df69e984fa50836b8daf2ed10de18a </span><br><span class="line"><span class="comment">##########################################  </span></span><br><span class="line">  </span><br><span class="line">7、加入集群命令执行之后，最后一行信息显示如下</span><br><span class="line">Run <span class="string">&#x27;kubectl get nodes&#x27;</span> on the control-plane to see this node <span class="built_in">join</span> the cluster.</span><br><span class="line">在控制平面上(master)运行“kubectl get nodes”以查看此节点加入集群。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8、#到master01执行kubectl get nodes</span><br><span class="line">[root@master01 ~]# kubectl get nodes</span><br><span class="line">NAME       STATUS     ROLES    AGE     VERSION</span><br><span class="line">master01   NotReady   master   9m33s   v1.19.3</span><br><span class="line">node01     NotReady   &lt;none&gt;   3m48s   v1.19.3</span><br><span class="line">node02     NotReady   &lt;none&gt;   118s    v1.19.3</span><br><span class="line">node03     NotReady   &lt;none&gt;   106s    v1.19.3</span><br><span class="line"></span><br><span class="line">现在的状态是NotReady没有准备好的，因为网络还没配</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9、设置kube-proxy使用ipvs模式</span><br><span class="line">k8s默认使用的是iptables防火墙，可以修改成性能更高的ipvs模式，该模式LVS也在使用</span><br><span class="line">[root@master01 ~]# kubectl edit cm kube-proxy -n kube-system</span><br><span class="line"> 44行     </span><br><span class="line"> mode: <span class="string">&quot; &quot;</span> 改为 mode: <span class="string">&quot;ipvs&quot;</span></span><br><span class="line"> </span><br><span class="line">10、查看名称空间</span><br><span class="line">[root@master01 ~]# kubectl get ns</span><br><span class="line">或者</span><br><span class="line">[root@master01 ~]# kubectl get namespace</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   45m</span><br><span class="line">kube-node-lease   Active   45m</span><br><span class="line">kube-public       Active   45m</span><br><span class="line">kube-system       Active   45m</span><br><span class="line"></span><br><span class="line">11、查看指定名称空间中的pod信息</span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-system</span><br><span class="line">NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-6d56c8448f-85k2r           0/1     Pending   0          46m <span class="comment">#DNS服务器</span></span><br><span class="line">coredns-6d56c8448f-cn2t9           0/1     Pending   0          46m <span class="comment">#DNS服务器</span></span><br><span class="line">etcd-master01                      1/1     Running   0          46m <span class="comment">#数据库etcd</span></span><br><span class="line">kube-apiserver-master01            1/1     Running   0          46m <span class="comment">#司令部ipserver</span></span><br><span class="line">kube-controller-manager-master01   1/1     Running   0          46m <span class="comment">#控制器controller</span></span><br><span class="line">kube-proxy-2wfhq                   1/1     Running   0          38m <span class="comment">#网络、端口映射射kube-proxy  有4个是因为这个集群里面有4台机器</span></span><br><span class="line">kube-proxy-8tmqx                   1/1     Running   0          40m <span class="comment">#网络、端口映射射kube-proxy</span></span><br><span class="line">kube-proxy-fr9dl                   1/1     Running   0          39m <span class="comment">#网络、端口映射射kube-proxy</span></span><br><span class="line">kube-proxy-pz4ms                   1/1     Running   0          46m <span class="comment">#网络、端口映射射kube-proxy</span></span><br><span class="line">kube-scheduler-master01            1/1     Running   0          46m <span class="comment">#资源调度scheduler</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">12、查看指定名称空间中pod的详细信息  可以看到起在哪台机器上</span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-system -o wide</span><br><span class="line"></span><br><span class="line">用的DaemonSet控制器，每台有且只能起一个</span><br><span class="line"></span><br><span class="line">13、重启pod</span><br><span class="line">把他删掉，就会自动拉起，以后有哪个组件坏了，就删掉重新拉起</span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-system|grep <span class="string">&#x27;kube-proxy&#x27;</span>|awk <span class="string">&#x27;&#123;print &quot;kubectl delete pod -n kube-system &quot;$1&#125;&#x27;</span>|bash</span><br></pre></td></tr></table></figure><p>**⑤、master 配置flanale **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#部署网络插件flanale，让所有节点网络打通</span></span><br><span class="line"><span class="comment">##############master01执行#####</span></span><br><span class="line">链接地址：</span><br><span class="line">https://github.com/flannel-io/flannel/blob/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line">1、下载资源清单</span><br><span class="line">[root@master01 ~]# wget https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、修改flannel资源清单</span><br><span class="line">[root@master01 ~]# vim  kube-flannel.yml </span><br><span class="line">       <span class="comment">#搜索net-conf.json，修改网段为规划的pod ip  </span></span><br><span class="line">      <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;10.2.0.0/16&quot;</span>,</span><br><span class="line">      ......</span><br><span class="line">      .....</span><br><span class="line">      containers:</span><br><span class="line">      - args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        <span class="comment">#搜索 containers，新增使用的网卡</span></span><br><span class="line">        - --iface=eth0</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">#搜索containers，如果出现这个标签，就把这个标签里面的3行内容删掉</span></span><br><span class="line">        spec:</span><br><span class="line">          selector:  <span class="comment">#删掉</span></span><br><span class="line">            matchLabels:  <span class="comment">#删掉</span></span><br><span class="line">            app: flannel  <span class="comment">#删掉</span></span><br><span class="line"></span><br><span class="line">app: flannel是一个标签选择器，只有打了app标签的node，才会安装flannel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、只要修改了flannel资源清单，就要执行应用flannel资源清单</span><br><span class="line">[root@master01 ~]# kubectl apply -f kube-flannel.yml</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">4、#检查这几个状态</span><br><span class="line">①、检查flannel的pod是否启动成功   4个STATUS显示Running就是成功</span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-flannel</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-flannel-ds-4ncf5   1/1     Running   0          4m20s</span><br><span class="line">kube-flannel-ds-7dnxx   1/1     Running   0          4m20s</span><br><span class="line">kube-flannel-ds-dpzqp   1/1     Running   0          4m20s</span><br><span class="line">kube-flannel-ds-knmch   1/1     Running   0          4m20s</span><br><span class="line"></span><br><span class="line">②、检查k8s集群节点状态    STATUS显示Ready就是准备好的，集群之间起的pod就可以互相通信了</span><br><span class="line">[root@master01 ~]# kubectl get nodes</span><br><span class="line">NAME       STATUS   ROLES    AGE   VERSION</span><br><span class="line">master01   Ready    master   81m   v1.19.3</span><br><span class="line">node01     Ready    &lt;none&gt;   75m   v1.19.3</span><br><span class="line">node02     Ready    &lt;none&gt;   73m   v1.19.3</span><br><span class="line">node03     Ready    &lt;none&gt;   73m   v1.19.3</span><br><span class="line"></span><br><span class="line">③、检查coredns是否正常运行   只要网络配好，dns就ok了，STATUS显示Running状态</span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-system</span><br><span class="line">NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-6d56c8448f-85k2r           1/1     Running   0          81m</span><br><span class="line">coredns-6d56c8448f-cn2t9           1/1     Running   0          81m</span><br><span class="line">etcd-master01                      1/1     Running   0          81m</span><br><span class="line">kube-apiserver-master01            1/1     Running   0          81m</span><br><span class="line">kube-controller-manager-master01   1/1     Running   0          81m</span><br><span class="line">kube-proxy-2skng                   1/1     Running   0          30m</span><br><span class="line">kube-proxy-fxwbg                   1/1     Running   0          30m</span><br><span class="line">kube-proxy-w6v6r                   1/1     Running   0          30m</span><br><span class="line">kube-proxy-zng7l                   1/1     Running   0          30m</span><br><span class="line">kube-scheduler-master01            1/1     Running   0          81m</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#node设置角色信息   </span></span><br><span class="line"> kubectl label node node01 node-role.kubernetes.io/node=</span><br><span class="line"> kubectl label node node02 node-role.kubernetes.io/node=</span><br><span class="line"> kubectl label node node03 node-role.kubernetes.io/node=</span><br></pre></td></tr></table></figure><h3 id="2、安装kubectl命令补全黑科技">2、<strong>安装kubectl命令补全黑科技</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以tab补全的工具</span></span><br><span class="line"></span><br><span class="line">yum install -y bash-completion</span><br><span class="line"><span class="built_in">source</span> /usr/share/bash-completion/bash_completion </span><br><span class="line"><span class="built_in">source</span> &lt;(kubectl completion bash) </span><br><span class="line">kubectl completion bash &gt; /etc/bash_completion.d/kubectl</span><br><span class="line"></span><br><span class="line">安装完成需要退出在重新连接</span><br><span class="line"><span class="built_in">logout</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master01 ~]# kubectl ap 按tab可以补全了</span><br><span class="line">api-resources  api-versions   apply          </span><br><span class="line">[root@master01 ~]# kubectl get namespaces 按tab可以补全了</span><br><span class="line">default          kube-flannel     kube-node-lease  kube-public      kube-system  </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这篇文章写了部署k8s，超级详细，有需要的小伙伴可以查看</summary>
    
    
    
    <category term="K8s" scheme="https://www.fomal.cc/categories/K8s/"/>
    
    
  </entry>
  
  <entry>
    <title>🍉1、K8s基础和资源介绍</title>
    <link href="https://www.fomal.cc/posts/4b5e2999.html"/>
    <id>https://www.fomal.cc/posts/4b5e2999.html</id>
    <published>2024-09-22T06:42:38.000Z</published>
    <updated>2024-09-30T07:51:03.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="K8s基础和资源介绍">K8s基础和资源介绍</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">k8是对容器的编排工具，之前使用的docker-compose是单机编排</span><br><span class="line"></span><br><span class="line">k8s原生的语言：go语言</span><br><span class="line"></span><br><span class="line">管理k8s集群工具：</span><br><span class="line">1、vsocde</span><br><span class="line">2、rancher（web图形化界面）</span><br><span class="line">3、k9s</span><br><span class="line"></span><br><span class="line"><span class="comment">#和k8s类似的编排工具</span></span><br><span class="line">borg   </span><br><span class="line">swarm(docker写的)</span><br><span class="line">mesos </span><br><span class="line">这些都在之前使用的编排工具，但现在k8s火起来了，他们就不怎么用了</span><br></pre></td></tr></table></figure><h3 id="1、K8s参考网站">1、<strong>K8s参考网站</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">官网：https://kubernetes.io</span><br><span class="line">官方文档：https://kubernetes.io/zh-cn/docs/home/</span><br><span class="line">kubeadm官方文档：https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/</span><br><span class="line">docker官方文档：https://docs.docker.com/</span><br><span class="line">prometheus官方文档：https://prometheus.io/docs/introduction/overview/</span><br><span class="line">ansible安装k8s项目：https://github.com/easzlab/kubeasz?tab=readme-ov-file</span><br><span class="line">阿里云ACK：https://www.aliyun.com/product/kubernetes</span><br><span class="line">亚马逊云EKS：https://aws.amazon.com/cn/eks/?nc2=h_ql_prod_ct_eks</span><br></pre></td></tr></table></figure><h3 id="2、K8s的2大组件">2、<strong>K8s的2大组件</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c/s结构的</span><br><span class="line"></span><br><span class="line">1、master组件(控制平面组件（Control Plane Components）)</span><br><span class="line"></span><br><span class="line">2、node组件</span><br></pre></td></tr></table></figure><ul><li><strong>1、master组件    (控制平面组件（Control Plane Components）)</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、kube-apiserver(apiserver)：类似于司令部，所有master上的组件工作都要经过apiserver</span><br><span class="line">(当在客户端执行命令或者在UI界面操作起一个容器都需要经过api,他会通知其他组件，所有组件调用什么东西或者计算什么东西都要经过他)</span><br><span class="line"></span><br><span class="line">2、etcd：所有组价产生的数据存放位置，储存所有命令、资源清单、证书信任、web操作及其他组件数据</span><br><span class="line">(如果这个宕了，这一套集群就废了，也就是说这套集群需要重新搭建，而不是修复一台etcd)</span><br><span class="line"></span><br><span class="line">3、kube-scheduler(scheduler  时该丢了儿)：资源计算、资源调度</span><br><span class="line">(比如说在命令行执行创建10台容器，先经过他apiserver，会把期望值存档etcd,然后通知scheduler去etcd把数据取出来)</span><br><span class="line"></span><br><span class="line">4、kube-controller-manager(controller  抗抽了儿)：控制器，控制node组件启动容器</span><br><span class="line">(schedule做完资源的计算调度,数据存档etcd了,controller通过apiserver拿到数据，会控制node组件启动)</span><br></pre></td></tr></table></figure><ul><li><strong>2、node组件</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1、kubelet：控制docker启动容器(控制容器运时，启动指定容器)</span><br><span class="line">(每一个node都要装)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、容器运行时（Container runtime）</span><br><span class="line"> (每一个node节点上得装一个容器运行时)</span><br><span class="line">    - containerd</span><br><span class="line">    - CRI-O</span><br><span class="line">    - Docker Engine</span><br><span class="line">    - Mirantis Container Runtime</span><br><span class="line"></span><br><span class="line">3、kube-proxy（可选）：POD端口映射，网络相关</span><br><span class="line">可以理解为pod就是容器</span><br><span class="line">起pod需要做端口映射，他就是做端口映射的工具</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#k8s三大接口API二次开发，调用接口</span></span><br><span class="line">CRI：runtime，容器操作接口</span><br><span class="line">CNI：network，网络操作接口</span><br><span class="line">CSI：storage，储存操作接口</span><br></pre></td></tr></table></figure><h3 id="3、K8s架构">3、<strong>K8s架构</strong></h3><p>单机节点架构</p><p><img src="../image/study_img/image-20240912101412211.png" alt="image-20240912101412211"></p><p>高可用架构</p><p><img src="../image/study_img/image-20240912163330677.png" alt="image-20240912163330677"></p><p><img src="../image/study_img/image-20240912102531543.png" alt="image-20240912102531543"></p><p>pod创建流程</p><p><img src="../image/study_img/image-20240912103904760.png" alt="image-20240912103904760"></p><p><img src="../image/study_img/image-20240912173745374.png" alt="image-20240912173745374"></p><h3 id="4、k8s核心资源-操作对象">4、<strong>k8s核心资源(操作对象)</strong></h3><p><strong>①、pod资源</strong></p><p>①什么是pod<br>1、Pod是K8s的最小单位<br>2、Pod的IP地址是随机的，删除Pod会改变IP<br>3、Pod都有一个根容器<br>4、一个Pod内可以由一个容器或多个容器组成<br>5、一个Pod内的容器共享根容器的网络、名称空间、和文件系统卷    (比如说起一个nginx的pod,他会和根容器共享网络、名称空间、和文件系统。原理是：根容器里面的网络模式用的是docker网络模式中的Container模式)<br>6、一个Pod内的网络地址由根容器提供</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请问贵公司k8s架构一个pod里面起几个容器</span><br><span class="line"></span><br><span class="line"> 答精确的数字就是错误的，首先应该pod里面起几个容器取决于项目</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240912104532405.png" alt="image-20240912104532405"></p><p>②pod运行状态，只要记住不是runing状态就是有问题的</p><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>Pending（等待）</td><td>Pod已经被K8S系统接受，但是有一个或多个容器，尚未创建，亦未运行。此阶段包括等待Pod被调度的时间和通过网络下载镜像的时间</td></tr><tr><td>Running（运行）</td><td>Pod已经绑定到某个节点(node)，Pod中所有容器都已被创建，至少有一个容器仍在运行，或者处于启动或重启状态</td></tr><tr><td>Succeeded（成功）</td><td>Pod中所有容器都已成功终止，并且不会再重启</td></tr><tr><td>Failed（失败）</td><td>Pod中所有容器都已成功终止，并且有一个容器是因为失败而终止</td></tr><tr><td>Unknown（未知）</td><td>因为某些原因无法获取Pod状态，这种情况，通常是因为与Pod所在主机通信失败</td></tr></tbody></table><p><strong>②、service资源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service也是k8s核心资源之一，service定义了服务的入口地址，用来将后端的pod服务暴露给外部的用户访问</span><br></pre></td></tr></table></figure><p>service提供了2种网络资源</p><p><img src="../image/study_img/image-20240912180101026.png" alt="image-20240912180101026"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">第一种：NodePort  宿主机端口映射clusterip端口，对外提供服务</span><br><span class="line"></span><br><span class="line">第二种：ClusterIP  pod的负载均衡(起10个pod,clusterip可以给这些pod负载，但是clusterip是内网ip，宿主机还是不能访问，所以service又提供了nodeport)</span><br><span class="line"></span><br><span class="line"><span class="comment">#问题：POD的IP是随机的，如果一个POD宕机了，k8s会自动拉起一个新的pod,ip变了如何加入到ClusterIP这个负载均衡集群中？</span></span><br><span class="line">解决方案：使用DNS解析POD的IP到一个<span class="string">&#x27;字符串上&#x27;</span>(每个pod启动都要到标签app:nginx)</span><br><span class="line">DNS的服务：</span><br><span class="line">    - coreDNS(k8s用这个)</span><br><span class="line">    - bind9(比较麻烦)</span><br><span class="line">    - dnsmsq(内外的dns用)</span><br></pre></td></tr></table></figure><p><strong>③、label标签资源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Label标签是K8S中非常重要的一个属性，Label标签就像身份证一样，可以用来识别K8S的对象。</span><br><span class="line">传统架构中，不同的服务应用之间通讯，都是通过IP和端口，但是在K8S中很多匹配关系都是通过标签来找。</span><br></pre></td></tr></table></figure><p><strong>④、Namespace资源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Namespace（名称空间）是K8S中非常重要的一个概念，Namespace将集群内部的资源进行隔离划分。</span><br><span class="line">在Namespace中，形成逻辑上的不同项目组或用户组。</span><br></pre></td></tr></table></figure><p><strong>⑤、Controller控制器资源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Controller用来管理Pod。</span></span><br><span class="line"><span class="comment">## Pod控制器的种类有很多：</span></span><br><span class="line">  - RC资源：可以做的自动拉起，控制多个副本，但现在不用了</span><br><span class="line">  - RS   RC控制器的升级版，可以自动拉起宕机的POD</span><br><span class="line">  - Deployment  生产中常用的控制器，功能强大，包含了RS控制器，对镜像做版本管理(比较常用)</span><br><span class="line">  - DaemonSet   保证所有node节点上，有且只有一个pod运行</span><br><span class="line">  - Staefulset  有状态的应用(如mysql的主从复制)，为pod提供唯一标识</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  后面起pod会写资源清单起10个nginx，挂了一台就直接挂了，pod不会再起一台，而能够拉起的是controller资源，他会检测资源清单是不是10个pod都在，如果少一个，控制器会重新拉起一个再加入集群</span><br></pre></td></tr></table></figure><p><strong>pod RC Service 的关系</strong></p><p><img src="../image/study_img/image-20240912120405666.png" alt="image-20240912120405666"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">自动扩缩容：</span><br><span class="line">比如说现在有10台nginx,双十一流量上来了，10台不够用，怎么办？</span><br><span class="line">k8s有一个资源，一开始10个nginx就够了，流量上来了会自动扩容，流量下去了会自动缩容，而且扩出来的pod和之前的pod一模一样</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">开始写k8s的基础介绍啦</summary>
    
    
    
    <category term="k8s" scheme="https://www.fomal.cc/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>🍡十一、group资源控制/添加磁盘</title>
    <link href="https://www.fomal.cc/posts/cb5f694f.html"/>
    <id>https://www.fomal.cc/posts/cb5f694f.html</id>
    <published>2024-09-22T06:33:37.000Z</published>
    <updated>2024-10-02T07:54:56.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Cgroup-资源控制-添加磁盘">Cgroup(资源控制)/添加磁盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1、#docker如何做资源限制的(比如说内存的限制)</span><br><span class="line">docker run -m 去限制内存</span><br><span class="line"></span><br><span class="line">2、#原理是什么</span><br><span class="line">-m指定限制内存的数量，docker通过内核参数，也就是Cgroup对资源进行限制</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、#Cgroup的作用</span><br><span class="line">在操作系统解决了资源相与隔离的问题以后，还需要解决资源限制的问题，也就是避免在同一个操作系统中，防止有些资源消耗较大的容器，将整个物理机器(宿主机)的硬件资源(CPU,Memory)占满。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在Linux 系统中能够控制的资源列表如下</span><br><span class="line">memory      <span class="comment">#内存限制</span></span><br><span class="line">hugetlb     <span class="comment">#huge pages 使用量</span></span><br><span class="line">cpu         <span class="comment">#限制CPU使用率</span></span><br><span class="line">cpuacct     <span class="comment">#统计cgroups中的进程的CPU使用报告</span></span><br><span class="line">cpuset      <span class="comment">#绑定cgroups到指定 CPUs和 NUMA节点</span></span><br><span class="line">innodb_lock_wait_timeout  <span class="comment">#block设备的I0速度</span></span><br><span class="line">not_cls     <span class="comment">#网络接口设置优先级</span></span><br><span class="line">devices     <span class="comment">#mknode访问设备权限</span></span><br><span class="line">freezer     <span class="comment">#suspend和restore cgroups 进程</span></span><br><span class="line">perf_event  <span class="comment">#性能监控</span></span><br><span class="line">pids        <span class="comment">#限制子树 cgroups 总进程数</span></span><br><span class="line"></span><br><span class="line">4、#容器与容器之间的资源如何隔离？</span><br><span class="line">Namespace  名称空间隔离</span><br><span class="line"></span><br><span class="line">5、#为什么容器之间的资源可以通过ns进行隔离？</span><br><span class="line">因为docker容器运行起来是一个进程，每一个容器都是一个进程，进程之间用来资源隔离的就是Namespace</span><br></pre></td></tr></table></figure><p>查看系统实现的限制资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 node]# <span class="built_in">cat</span> /proc/cgroups </span><br><span class="line"><span class="comment">#subsys_name    hierarchy       num_cgroups     enabled</span></span><br><span class="line">cpuset  11      7       1</span><br><span class="line">cpu     3       77      1</span><br><span class="line">cpuacct 3       77      1</span><br><span class="line">memory  7       77      1</span><br><span class="line">devices 5       77      1</span><br><span class="line">freezer 10      7       1</span><br><span class="line">net_cls 2       7       1</span><br><span class="line">blkio   9       77      1</span><br><span class="line">perf_event      4       7       1</span><br><span class="line">hugetlb 6       7       1</span><br><span class="line">pids    8       77      1</span><br><span class="line">net_prio        2       7       1</span><br></pre></td></tr></table></figure><h3 id="1、案例：限制SSH内存使用">1、<strong>案例：限制SSH内存使用</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1、限制系统服务内存</span><br><span class="line">[root@docker01 node]# <span class="built_in">cd</span> /sys/fs/cgroup/memory/system.slice/sshd.service/</span><br><span class="line"></span><br><span class="line">2、查看内存服务限制(byte)</span><br><span class="line">[root@docker01 sshd.service]# <span class="built_in">cat</span> memory.limit_in_bytes </span><br><span class="line">9223372036854771712</span><br><span class="line"></span><br><span class="line">3、计算一下，大概是7G,这个是默认值，不管系统内存多大，每个进程默认最大使用7G,这样就相当于没有做任何限制·</span><br><span class="line">[root@docker01 sshd.service]# python</span><br><span class="line">&gt;&gt;&gt; 9223372036854771712/1024/1024/1024/1024/1024/1024</span><br><span class="line">7</span><br><span class="line"></span><br><span class="line">4、ssh服务不是拿容器起起来的，如果想给他限制，就需要改文件里面的数字大小</span><br><span class="line">设置限制内存</span><br><span class="line">[root@docker01 sshd.service]# <span class="built_in">echo</span> 64K &gt; memory.limit_in_bytes </span><br><span class="line">执行之后，ssh就立马端口连接了，只写1个字节，根本就连不上ssh</span><br><span class="line"></span><br><span class="line">5、到虚拟机里面查看日志</span><br><span class="line">tailf /var/log/messages</span><br><span class="line"></span><br><span class="line">6、可以发现，远程连接时，会杀进程，因为远程连接会产生一个进程，但是ssh被做了限制</span><br><span class="line">，会杀掉连接的进程</span><br><span class="line"></span><br><span class="line">Cgroup调用内核参数，如果做限制，就改memory.limit_in_bytes文件，内核来读取这个文件来进行限制</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240912151039561.png" alt="image-20240912151039561"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 sshd.service]# <span class="built_in">echo</span> 9223372036854771712 &gt; memory.limit_in_bytes</span><br><span class="line"></span><br><span class="line">[root@docker01 sshd.service]# <span class="built_in">cat</span> memory.limit_in_bytes</span><br><span class="line">9223372036854771712</span><br></pre></td></tr></table></figure><h3 id="2、OverlayFS">2、<strong>OverlayFS</strong></h3><p><strong>OverlayFS</strong> <strong>实现方式</strong></p><p>OverlayFS通过三个目录：lower目录、upper目录、以及work目录实现,其中lower目录可以是多个,upper目录为可以进行读写操作的目录, work目录为工作基础目录,挂载后内容会被清空,且在使用过程中其内容用户不可见,最后联合挂载完成给用户呈现的统一视图称为merged目录。</p><p><img src="../image/study_img/image-20240913170119816.png" alt="image-20240913170119816"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模拟overlayfs存储方式</span></span><br><span class="line">1.创建文件</span><br><span class="line">[root@k8s01 ~]# <span class="built_in">mkdir</span> /lower&#123;1..3&#125;</span><br><span class="line">[root@k8s01 ~]# <span class="built_in">mkdir</span> /upper /work /merged</span><br><span class="line"></span><br><span class="line">2.挂载文件系统</span><br><span class="line">[root@k8s01 ~]# mount -t overlay overlay -o</span><br><span class="line">lowerdir=/lower1:/lower2:/lower3,upperdir=/upper,workdir=/work /merged</span><br><span class="line"></span><br><span class="line">3.查看挂载</span><br><span class="line">[root@k8s01 ~]# mount | grep merged</span><br><span class="line"></span><br><span class="line">4.在/upper 目录中写入文件,在merged中可以显示</span><br><span class="line">[root@k8s01 /]# <span class="built_in">touch</span> /upper/upper.txt</span><br><span class="line">[root@k8s01 /]# ll /merged/</span><br><span class="line">-rw-r--r-- 1 root root 0 Mar 14 02:17 upper.txt</span><br><span class="line"></span><br><span class="line">5. 在merged中写入文件, 实际存储到了/uppper</span><br><span class="line">[root@k8s01 /]# <span class="built_in">touch</span> /merged/d.txt</span><br><span class="line">[root@k8s01 /]# ll /upper/</span><br><span class="line">-rw-r--r-- 1 root root 0 Mar 14 02:19 d.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注:如果没有upperdir， merged是只读的</span><br><span class="line">[root@node-2 overlay2]# umount /merged</span><br><span class="line">[root@node-2 overlay2]# mount -t overlay overlay -o lowerdir=/lower1:/lower2 /merged</span><br><span class="line">[root@k8s01 /]# <span class="built_in">touch</span> /merged/c.txt</span><br><span class="line"><span class="built_in">touch</span>: cannot <span class="built_in">touch</span> ‘/merged/c.txt’: Read-only file system</span><br></pre></td></tr></table></figure><h3 id="3、扩展添加磁盘和更改docker默认数据目录">3、<strong>扩展添加磁盘和更改docker默认数据目录</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、先关机</span><br><span class="line"></span><br><span class="line">2、添加磁盘</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240913172422996.png" alt="image-20240913172422996"></p><p><img src="../image/study_img/image-20240913172442557.png" alt="image-20240913172442557"></p><p><img src="../image/study_img/image-20240913172500576.png" alt="image-20240913172500576"></p><p><img src="../image/study_img/image-20240913172538917.png" alt="image-20240913172538917"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">3、查看添加的磁盘</span><br><span class="line">[root@docker01 ~]# fdisk -l</span><br><span class="line">Disk /dev/sda: 21.5 GB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">......</span><br><span class="line">.....</span><br><span class="line"><span class="comment">#/dev/sdb是新添加的磁盘</span></span><br><span class="line">Disk /dev/sdb: 10.7 GB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line">4、创建分区</span><br><span class="line">[root@docker01 ~]# fdisk /dev/sdb</span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition <span class="built_in">type</span>: <span class="comment">## 选择主分区还是扩展分区</span></span><br><span class="line">    p primary (0 primary, 0 extended, 4 free)</span><br><span class="line">    e extended</span><br><span class="line">Select (default p): p <span class="comment"># 主分区</span></span><br><span class="line">Partition number (1-4, default 1): 1 <span class="comment"># 一个分区</span></span><br><span class="line">First sector (2048-104857599, default 2048): <span class="comment">## 设置开头扇区大小，我选择默认</span></span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-104857599, default 104857599): <span class="comment">## 设置最后扇区大小，我选择默认</span></span><br><span class="line">Partition 1 of <span class="built_in">type</span> Linux and of size 50 GiB is <span class="built_in">set</span>  <span class="comment">## 分区成功</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w <span class="comment">## 退出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、再次查看磁盘</span><br><span class="line">[root@docker01 ~]# fdisk -l</span><br><span class="line">.....</span><br><span class="line">Disk /dev/sdb: 10.7 GB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x481c9cdc</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1            2048    20971519    10484736   83  Linux</span><br><span class="line"><span class="comment">#新分区 /dev/sdb1 </span></span><br><span class="line"></span><br><span class="line">5、格式化分区</span><br><span class="line">[root@docker01 ~]# mkfs.xfs /dev/sdb1</span><br><span class="line"></span><br><span class="line">6、查看分区的UUID</span><br><span class="line">[root@docker01 ~]# blkid /dev/sdb1</span><br><span class="line">/dev/sdb1: UUID=<span class="string">&quot;65cdcede-223b-40ad-aa68-6165b7606b71&quot;</span> TYPE=<span class="string">&quot;xfs&quot;</span> </span><br><span class="line"></span><br><span class="line">7、#设置永久挂载</span><br><span class="line">方法一：这个方法如果写错一个字母，很可能造成系统起不来，所以写完了要仔细检查</span><br><span class="line">[root@docker01 ~]# vim /etc/fstab </span><br><span class="line"><span class="comment">#把内容加入最后一行</span></span><br><span class="line">UUID=65cdcede-223b-40ad-aa68-6165b7606b71   /docker_data  xfs     defaults        0 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法二：写入自启动文件   这个写错了不会造成系统起不来的情况</span><br><span class="line">vim /root/.bashrc </span><br><span class="line">mount -t xfs /dev/sdb1 /docker_data </span><br><span class="line">不要影响文件原先的内容</span><br><span class="line"></span><br><span class="line">8、临时挂载</span><br><span class="line">[root@docker01 ~]# <span class="built_in">mkdir</span> /docker_data</span><br><span class="line">[root@docker01 ~]# mount -a</span><br><span class="line"></span><br><span class="line">9、查看磁盘分区</span><br><span class="line">[root@docker01 ~]# <span class="built_in">df</span> -Th</span><br><span class="line">Filesystem              Type      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/centos-root xfs        19G   14G  5.1G  73% /</span><br><span class="line">devtmpfs                devtmpfs  1.6G     0  1.6G   0% /dev</span><br><span class="line">tmpfs                   tmpfs     1.6G     0  1.6G   0% /dev/shm</span><br><span class="line">tmpfs                   tmpfs     1.6G   12M  1.6G   1% /run</span><br><span class="line">tmpfs                   tmpfs     1.6G     0  1.6G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1               xfs       497M  126M  372M  26% /boot</span><br><span class="line">tmpfs                   tmpfs     318M     0  318M   0% /run/user/0</span><br><span class="line">/dev/sdb1               xfs        10G   33M   10G   1% /docker_data</span><br></pre></td></tr></table></figure><p>如下步骤可以不需要操作，如果不更改docker默认数据目录的话，不需要操作，如果更改了数据目录，之前拉的镜像就需要重新拉取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改docker默认数据目录的操作</span></span><br><span class="line"></span><br><span class="line">1、在配置文件里面添加目录信息</span><br><span class="line">[root@docker01 docker_data]# vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://10.0.0.105&quot;</span>,<span class="string">&quot;http://172.16.1.101:5000&quot;</span>],</span><br><span class="line"><span class="string">&quot;data-root&quot;</span>: <span class="string">&quot;/docker_data&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">[root@docker01 docker_data]# systemctl daemon-reload</span><br><span class="line">[root@docker01 docker_data]# systemctl restart docker</span><br><span class="line"></span><br><span class="line">2、查看docker信息</span><br><span class="line">[root@docker01 docker_data]# docker info</span><br><span class="line">Docker Root Dir: /docker_data</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">docker做资源限制的方法</summary>
    
    
    
    <category term="docker" scheme="https://www.fomal.cc/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>🍡十、容器化监控Prometheus</title>
    <link href="https://www.fomal.cc/posts/f75a8470.html"/>
    <id>https://www.fomal.cc/posts/f75a8470.html</id>
    <published>2024-09-22T06:12:54.000Z</published>
    <updated>2024-10-02T07:53:51.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="容器化监控Promethues">容器化监控Promethues</h2><h3 id="1、Docker自带的监控命令">1、<strong>Docker自带的监控命令</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker02 ~]# docker ps</span><br><span class="line">[root@docker02 ~]# docker top mysql80</span><br><span class="line">[root@docker02 ~]# docker top jenkins</span><br><span class="line">[root@docker02 ~]# docker stats</span><br></pre></td></tr></table></figure><p>有了上面的命令，我们就可以使用zabbix来监控docker容器了，但是问题就是， zabbix-agent 的端口，我们在宿主机上只能映射出来一个。<br><strong>解决方案：</strong><br>1.起多块网卡<br>2.每个容器装一个zabbix-server<br>3.修改不同容器的agent端口<br>4.映射容器的相关文件，然后监控宿主机上的对应文件<br>5.不用zabbix</p><h3 id="2、监控软件的介绍">2、<strong>监控软件的介绍</strong></h3><p><em>服务端</em></p><p>prometheus：类似于zabbix-server服务端，负责收集客户端监控指标(Metrics)</p><p><em>客户端</em></p><p>cAdvisor：类似 zabbix-agent 客户端，用来收集容器里面的监控指标<br>node_exporter：类似 zabbix-agent 客户端，用来收集宿主机的监控指标</p><p><em>组件</em></p><p>Grafana：出图工具</p><p>1、cAdvisor介绍     凯得歪热儿</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cAdvisor介绍</span><br><span class="line">cAdvisor是谷歌开发的容器监控工具，cAdvisor会显示当前host资源使用情况，包括CPU、内存、网络、文件系统等。</span><br><span class="line"></span><br><span class="line">不过cAdvisor提供的操作界面略显简陋，而且要在不同的页面之间跳转，并且只能监控一个host，不免让人质疑它的实用性，但是cAdvisor有一个亮点，就是将监控数据导出给其他第三方工具，而且它兼容很多第三方工具，所以我们把它定位成是一个 监控数据收集器 ，收集和导出是它的强项，而非展示</span><br><span class="line"></span><br><span class="line">dokcer stats 可以查看运行的 Docker 镜像的运行状态，例如：这种方式比较原始，因为你无法通过http 的方式来获取数据，而且没有界面，数据可视化还需要做大量的工作。</span><br><span class="line"></span><br><span class="line">由于 dokcer stats 有这些问题，所以 cadvisor 诞生了。 cadvisor 不仅可以搜集一台机器上所有运行的容器信息还提供基础查询界面和 http 接口，方便 Prometheus 进行数据抓取。</span><br></pre></td></tr></table></figure><p>2、grafana介绍<br>grafana是一个支持多种数据源的图形展示工具</p><p>3、prometheus介绍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">promethues官网：https://prometheus.io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">prometheus是一个非常优秀的监控工具，提供了监控数据的收集、存储、处理、可视化、和告警等一系列完整的监控体系。</span><br><span class="line"></span><br><span class="line">组件包含：</span><br><span class="line">Node Exporter：负责收集host硬件和操作系统数据，以容器的形式运行在所有的host上。</span><br><span class="line">cAdvisor：负责收集容器数据，以容器的形式运行在所有的host上。</span><br><span class="line"></span><br><span class="line">zabbix是在客户端配服务端的地址，所以数据能从客户端推送给服务端</span><br><span class="line"></span><br><span class="line">prometheus数据获取的来源：</span><br><span class="line">服务端配客户端的地址，prometheus-server去其他客户端拉过来的数据，只有告警是推的</span><br><span class="line">设置触发器出现告警了，出发告警方式，才会推送数据</span><br></pre></td></tr></table></figure><p>支持：<br>1、MySQL、Oracle、Postgre、es等数据库<br>2、zabbix、prometheus等监控系统</p><h3 id="3、Prometheus架构">3、<strong>Prometheus架构</strong></h3><p><img src="../image/study_img/image-20240911085025512.png" alt="image-20240911085025512"></p><p>TSDB：时序数据库，和时间轴有关的</p><p>influxDB：时序数据库</p><h3 id="4、部署Prometheus">4、<strong>部署Prometheus</strong></h3><p>环境准备</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th><th>应用</th></tr></thead><tbody><tr><td>docker01</td><td>10.0.0.101  /  172.16.1.101</td><td>被监控端</td><td>cadvisor、node_exporter</td></tr><tr><td>docker02</td><td>10.0.0.102  /  172.16.1.102</td><td>被监控端</td><td>cadvisor、node_exporter</td></tr><tr><td>docker03</td><td>10.0.0.103  /  172.16.1.103</td><td>被监控端</td><td>cadvisor、node_exporter</td></tr><tr><td>elk01</td><td>10.0.0.76  /  172.16.1.76</td><td>监控端、服务端</td><td>prometheus、grafana、cadvisor</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## docker run命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动node-exporter</span></span><br><span class="line">docker run -d -p 9100:9100 -v <span class="string">&quot;/:/host:ro,rslave&quot;</span> --name=node_exporter</span><br><span class="line">quay.io/prometheus/node-exporter --path.rootfs /host</span><br><span class="line"></span><br><span class="line">-v <span class="string">&quot;/:/host：相当于监控宿主机</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 启动cadvisor</span></span><br><span class="line"><span class="string">docker run --volume=/:/rootfs:ro --volume=/var/run:/var/run:rw --</span></span><br><span class="line"><span class="string">volume=/sys:/sys:ro --volume=/var/lib/docker/:/var/lib/docker:ro -p 8080:8080 -d --name=cadvisor google/cadvisor:latest</span></span><br></pre></td></tr></table></figure><p>1、elk机器 部署docker compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">1、准备工作目录</span><br><span class="line">[root@elk1 ~]# <span class="built_in">mkdir</span> prometheus &amp;&amp; <span class="built_in">cd</span> prometheus/</span><br><span class="line"></span><br><span class="line">2、准备promethues配置文件</span><br><span class="line">[root@elk1 prometheus]# vim prometheus.yml</span><br><span class="line">scrape_configs:</span><br><span class="line">- job_name: cadvisor</span><br><span class="line">  scrape_interval: 5s</span><br><span class="line">  static_configs:</span><br><span class="line">  - targets:</span><br><span class="line">    - 10.0.0.101:8080</span><br><span class="line">    - 10.0.0.102:8080</span><br><span class="line">    - 10.0.0.103:8080</span><br><span class="line"></span><br><span class="line">- job_name: prometheus</span><br><span class="line">  scrape_interval: 5s</span><br><span class="line">  static_configs:</span><br><span class="line">  - targets:</span><br><span class="line">    - 10.0.0.76:9090</span><br><span class="line"></span><br><span class="line">- job_name: node_exporter</span><br><span class="line">  scrape_interval: 5s</span><br><span class="line">  static_configs:</span><br><span class="line">  - targets:</span><br><span class="line">    - 10.0.0.101:9100</span><br><span class="line">    - 10.0.0.102:9100</span><br><span class="line">    - 10.0.0.103:9100</span><br><span class="line"></span><br><span class="line">3、编写docker-compose</span><br><span class="line">[root@elk1 prometheus]# vim pro-docker-compose.yml </span><br><span class="line">version: <span class="string">&#x27;3.2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  prometheus:</span><br><span class="line">    image: prom/prometheus:latest</span><br><span class="line">    container_name: prometheus</span><br><span class="line">    ports:</span><br><span class="line">      - 9090:9090</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - --config.file=/etc/prometheus/prometheus.yml</span><br><span class="line">    volumes:</span><br><span class="line">      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro</span><br><span class="line">    restart: always</span><br><span class="line">    </span><br><span class="line">  grafana:</span><br><span class="line">    image: grafana/grafana:latest</span><br><span class="line">    container_name: grafana</span><br><span class="line">    ports:</span><br><span class="line">      - 3000:3000</span><br><span class="line">    restart: always</span><br><span class="line">    </span><br><span class="line">  cadvisor:</span><br><span class="line">    image: google/cadvisor:latest</span><br><span class="line">    container_name: cadvisor</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:8080</span><br><span class="line">    volumes:</span><br><span class="line">      - /:/rootfs:ro</span><br><span class="line">      - /var/run:/var/run:rw</span><br><span class="line">      - /sys:/sys:ro</span><br><span class="line">      - /var/lib/docker:/var/lib/docker:ro</span><br><span class="line">    restart: always</span><br><span class="line">      </span><br><span class="line">  node-exporter:</span><br><span class="line">    image: prom/node-exporter:latest</span><br><span class="line">    container_name: node_exporter</span><br><span class="line">    ports:</span><br><span class="line">      - 9100:9100</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">[root@elk1 promethenus]# docker-compose -f pro-docker-compose.yml up -d</span><br></pre></td></tr></table></figure><p>2、docker01 02 03</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 node]# <span class="built_in">mkdir</span> node &amp;&amp; <span class="built_in">cd</span> node</span><br><span class="line">[root@docker01 node]# vim node-docker-compose.yml </span><br><span class="line">version: <span class="string">&#x27;3.2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  node-exporter:</span><br><span class="line">    image: prom/node-exporter:latest</span><br><span class="line">    container_name: node_exporter</span><br><span class="line">    ports:</span><br><span class="line">      - 9100:9100</span><br><span class="line">    restart: always</span><br><span class="line">    </span><br><span class="line">  cadvisor:</span><br><span class="line">    image: google/cadvisor:latest</span><br><span class="line">    container_name: cadvisor</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:8080</span><br><span class="line">    volumes:</span><br><span class="line">      - /:/rootfs:ro</span><br><span class="line">      - /var/run:/var/run:rw</span><br><span class="line">      - /sys:/sys:ro</span><br><span class="line">      - /var/lib/docker:/var/lib/docker:ro</span><br><span class="line">    restart: always</span><br><span class="line">    </span><br><span class="line">[root@docker02 node]# docker-compose -f node-docker-compose.yml up</span><br></pre></td></tr></table></figure><p>3、访问网页 10.0.0.76:9090，可以看到监控的其他客户端</p><p><img src="../image/study_img/image-20240911093304356.png" alt="image-20240911093304356"></p><p><img src="../image/study_img/image-20240911163131170.png" alt="image-20240911163131170"></p><p>收集到的数据指标是Key:value的格式</p><p>数据查询操作</p><p><img src="../image/study_img/image-20240911163606439.png" alt="image-20240911163606439"></p><p><img src="../image/study_img/image-20240911163702757.png" alt="image-20240911163702757"></p><p>如果只想看101的数据  ：  就用{ }花括号里面写想要查看的字段  花括号里面的字段相当于过滤</p><p><img src="../image/study_img/image-20240911170150515.png" alt="image-20240911170150515"></p><p>4、访问cadvisor页面 10.0.0.101:8080</p><p><img src="../image/study_img/image-20240911165134739.png" alt="image-20240911165134739"></p><p><img src="../image/study_img/image-20240911165240850.png" alt="image-20240911165240850"></p><p><img src="../image/study_img/image-20240911165311636.png" alt="image-20240911165311636"></p><p>5、grafana模版出图</p><p>登录自己搭建的grafana ：10.0.0.76:3000/</p><p><img src="../image/study_img/image-20240911160356809.png" alt="image-20240911160356809"></p><p>进入grafana官网：<a href="https://grafana.com/">https://grafana.com/</a>     进入官网首页，来到首页的页面最底下</p><p><img src="../image/study_img/image-20240911170835247.png" alt="image-20240911170835247"></p><p><img src="../image/study_img/image-20240911171206521.png" alt="image-20240911171206521"></p><p>选择一个自己想要的模版点击进去，自动他的ID，之后添加</p><p><img src="../image/study_img/image-20240911171354848.png" alt="image-20240911171354848"></p><p>①、回到自己搭建的grafana</p><p><img src="../image/study_img/image-20240911171850344.png" alt="image-20240911171850344"></p><p>②、找到prometheus的图标，双击进去，添加prometheus的URL,然后点击最下面的save &amp; test  可看到Successfully添加成功的信息</p><p><img src="../image/study_img/image-20240911172651580.png" alt="image-20240911172651580"></p><p>③测试：  再点击左边的数据源栏 可看到添加成功，之后添加模版</p><p><img src="../image/study_img/image-20240911173117487.png" alt="image-20240911173117487"></p><p><img src="../image/study_img/image-20240911173228995.png" alt="image-20240911173228995"></p><p><img src="../image/study_img/image-20240911173445043.png" alt="image-20240911173445043"></p><p>模版里面可以点击进去看看，有的有数据，有的没有数据</p><p><img src="../image/study_img/image-20240911173624110.png" alt="image-20240911173624110"></p><p>其实可以把刚刚添加的3个模版删除，因为不是我需要的，接下来会添加需要的模版</p><p>④、添加cAdcisor的模版</p><p><img src="../image/study_img/image-20240911174519155.png" alt="image-20240911174519155"></p><p>8919    11277  这两个ID比较常用</p><p><img src="../image/study_img/image-20240911174945815.png" alt="image-20240911174945815"></p><p><img src="../image/study_img/image-20240911175011030.png" alt="image-20240911175011030"></p><p><img src="../image/study_img/image-20240911175141393.png" alt="image-20240911175141393"></p><p>可以看到数据，但是目前默认是看101的数据，项目和主机都是空的，想看指定主机的数据没有，所以需要改模版</p><p><img src="../image/study_img/image-20240911175238626.png" alt="image-20240911175238626"></p><p><em>6、修改模版</em></p><p>需要使用prometheus查询数据的语句 ：promeQL</p><p><img src="../image/study_img/image-20240911181443564.png" alt="image-20240911181443564"></p><p><img src="../image/study_img/image-20240911181734944.png" alt="image-20240911181734944"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、project</span><br><span class="line">label_values(container_last_seen, project)</span><br><span class="line"></span><br><span class="line">2、server</span><br><span class="line">label_values(container_last_seen&#123;project=~<span class="string">&quot;<span class="variable">$project</span>&quot;</span>&#125;, server)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、instance</span><br><span class="line">label_values(container_last_seen&#123;project=~<span class="string">&quot;<span class="variable">$project</span>&quot;</span>,server=~<span class="string">&quot;<span class="variable">$server</span>&quot;</span>&#125;, instance)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、project</span><br><span class="line">label_values(container_last_seen, project)</span><br><span class="line">获取的是container_last_seen里面的project，去prometheus里面去查一下是否有这个值</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240911192227950.png" alt="image-20240911192227950"></p><p>可以看到这个版本的project项目名叫job，所以project应该改成job</p><p><img src="../image/study_img/image-20240911194340683.png" alt="image-20240911194340683"></p><p>把project修改成job成功</p><p><img src="../image/study_img/image-20240911194429236.png" alt="image-20240911194429236"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2、server</span><br><span class="line">label_values(container_last_seen&#123;project=~<span class="string">&quot;<span class="variable">$project</span>&quot;</span>&#125;, server)</span><br></pre></td></tr></table></figure><p>这里面只要instance和job,没有server,所以把server删除</p><p><img src="../image/study_img/image-20240911194700416.png" alt="image-20240911194700416"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3、instance</span><br><span class="line">label_values(container_last_seen&#123;project=~<span class="string">&quot;<span class="variable">$project</span>&quot;</span>,server=~<span class="string">&quot;<span class="variable">$server</span>&quot;</span>&#125;, instance)</span><br><span class="line">server没有，不要，可以删除</span><br><span class="line"></span><br><span class="line">label_values(container_last_seen&#123;job=~<span class="string">&quot;<span class="variable">$project</span>&quot;</span>&#125;, instance)</span><br><span class="line"></span><br><span class="line"><span class="variable">$project</span>这个表示获取project里面的变量</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240911200218534.png" alt="image-20240911200218534"></p><p><img src="../image/study_img/image-20240911195320041.png" alt="image-20240911195320041"></p><p>修改完成，保存</p><p><img src="../image/study_img/image-20240911195411815.png" alt="image-20240911195411815"></p><p><img src="../image/study_img/image-20240911200333043.png" alt="image-20240911200333043"></p><p>查看没有数据，添加数据</p><p><img src="../image/study_img/image-20240911200507280.png" alt="image-20240911200507280"></p><p><img src="../image/study_img/image-20240911200625330.png" alt="image-20240911200625330"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">count(container_last_seen&#123;project=~<span class="string">&quot;<span class="variable">$project</span>&quot;</span>,instance=~<span class="string">&quot;<span class="variable">$instance</span>&quot;</span>,image!=<span class="string">&quot;&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">把变量和job换一下</span><br><span class="line">count(container_last_seen&#123;job=~<span class="string">&quot;cadvisor&quot;</span>,instance=~<span class="string">&quot;10.0.0.101:8080&quot;</span>,image!=<span class="string">&quot;&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>可以获取到数据</p><p><img src="../image/study_img/image-20240911200945018.png" alt="image-20240911200945018"></p><p><img src="../image/study_img/image-20240911201650404.png" alt="image-20240911201650404"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">因为prometheus里面查出来的没有project标签，只有job标签</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">container_last_seen&#123;<span class="built_in">id</span>=<span class="string">&quot;/&quot;</span>, instance=<span class="string">&quot;10.0.0.101:8080&quot;</span>, job=<span class="string">&quot;cadvisor&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>目前只改了一个数据，但是不可能一个一个去修改，所以需要批量修改</p><p><img src="../image/study_img/image-20240911201813116.png" alt="image-20240911201813116"></p><p>这个json文件就是模版，但往下看，这个json文件里面还是project，可以复制出来，批量替换成job</p><p><img src="../image/study_img/image-20240911201937730.png" alt="image-20240911201937730"></p><p><img src="../image/study_img/image-20240911202129508.png" alt="image-20240911202129508"></p><p>把替换后的json文件粘贴</p><p><img src="../image/study_img/image-20240911202309412.png" alt="image-20240911202309412"></p><p>保存之后，重新进入，查看数据</p><p><img src="../image/study_img/image-20240911202434264.png" alt="image-20240911202434264"></p><p><img src="../image/study_img/image-20240911202449993.png" alt="image-20240911202449993"></p><p>⑤、添加node_exporter的模版</p><p>在官网搜索模版ID</p><p><img src="../image/study_img/image-20240911215221833.png" alt="image-20240911215221833"></p><p><img src="../image/study_img/image-20240911215237958.png" alt="image-20240911215237958"></p><p>回到自己安装的grafana，添加模版</p><p><img src="../image/study_img/image-20240911215341094.png" alt="image-20240911215341094"></p><p><img src="../image/study_img/image-20240911215432195.png" alt="image-20240911215432195"></p><p><img src="../image/study_img/image-20240911215458213.png" alt="image-20240911215458213"></p><p>数据生成</p><p><img src="../image/study_img/image-20240911215516206.png" alt="image-20240911215516206"></p><p><img src="../image/study_img/image-20240911215800737.png" alt="image-20240911215800737"></p><p><img src="../image/study_img/image-20240911215816266.png" alt="image-20240911215816266"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node_filesystem_size_bytes&#123;instance=<span class="string">&quot;<span class="variable">$node</span>&quot;</span>,job=<span class="string">&quot;<span class="variable">$job</span>&quot;</span>,mountpoint=<span class="string">&quot;/&quot;</span>,fstype!=<span class="string">&quot;rootfs&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">想要展示数据就把,fstype!=<span class="string">&quot;rootfs&quot;</span>删掉</span><br><span class="line">node_filesystem_size_bytes&#123;instance=<span class="string">&quot;<span class="variable">$node</span>&quot;</span>,job=<span class="string">&quot;<span class="variable">$job</span>&quot;</span>,mountpoint=<span class="string">&quot;/&quot;</span>,fstype!=<span class="string">&quot;rootfs&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240911215845909.png" alt="image-20240911215845909"></p><p>想要展示数据就把,fstype!=&quot;rootfs&quot;删掉</p><p><img src="../image/study_img/image-20240911220402516.png" alt="image-20240911220402516"></p><p><img src="../image/study_img/image-20240911220531172.png" alt="image-20240911220531172"></p><p>再查看没数据的框，查看没数据的原因，并修改</p><p><img src="../image/study_img/image-20240911220656392.png" alt="image-20240911220656392"></p><p>无法查询数据，CPU没有等待时间，查询不出数据，所以没有数据没关系</p><p><img src="../image/study_img/image-20240911221251157.png" alt="image-20240911221251157"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irate(node_pressure_cpu_waiting_seconds_total&#123;instance=<span class="string">&quot;<span class="variable">$node</span>&quot;</span>,job=<span class="string">&quot;<span class="variable">$job</span>&quot;</span>&#125;[<span class="variable">$__rate_interval</span>])</span><br></pre></td></tr></table></figure><p>再继续排查下一个没有数据的原因，并修改</p><p><img src="../image/study_img/image-20240911221454957.png" alt="image-20240911221454957"></p><p><img src="../image/study_img/image-20240911221632432.png" alt="image-20240911221632432"></p><p><img src="../image/study_img/image-20240911222204013.png" alt="image-20240911222204013"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">没有数据就去prometheus里面查一下，看看是否有相关字段</span><br><span class="line"></span><br><span class="line">比较好用的模版有</span><br><span class="line">11277</span><br><span class="line">8919</span><br></pre></td></tr></table></figure><p>8919的模版图</p><p><img src="../image/study_img/image-20240911224138667.png" alt="image-20240911224138667"></p>]]></content>
    
    
    <summary type="html">不仅业务服务器可以监控，容器也可以监控，本文使用Promethues对容器进行监控，已经使用Grafana出好看的</summary>
    
    
    
    <category term="docker" scheme="https://www.fomal.cc/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>🍡九、docker的资源限制</title>
    <link href="https://www.fomal.cc/posts/79ab352e.html"/>
    <id>https://www.fomal.cc/posts/79ab352e.html</id>
    <published>2024-09-22T06:03:04.000Z</published>
    <updated>2024-10-02T07:53:38.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker的资源限制">docker的资源限制</h2><h3 id="1、docker资源限制介绍"><strong>1、docker资源限制介绍</strong></h3><p>官网： <a href="https://docs.docker.com/engine/containers/resource_constraints/">https://docs.docker.com/engine/containers/resource_constraints/</a></p><p>带有内存、CPU 和 GPU 的运行时选项<br>默认情况下，容器没有资源限制，可以使用主机内核调度程序允许的尽可能多的给定资源。Docker 提供了控制容器可以使用多少内存或 CPU 的方法，设置docker run命令的运行时配置标志。本节提供有关何时应该设置此类限制以及设置这些限制的可能影响的详细信息。</p><p>其中许多功能需要您的内核支持 Linux 功能。要检查支持，您可以使用该 docker info命令。如果您的内核中禁用了某个功能，您可能会在输出的末尾看到如下警告：<br>WARNING: no swap limit support</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">阿里云上面没有swap空间，因为swap是虚拟的，阿里云也是虚拟的</span><br><span class="line">docker k8s都不要搞swap,本来就是虚拟化的产品，把虚拟磁盘再变成虚拟内存，性能更低</span><br><span class="line"></span><br><span class="line">当磁盘被沾满了，会内存溢出，会启动OOM <span class="built_in">kill</span>,会杀进程</span><br></pre></td></tr></table></figure><h4 id="Dokcer内存限制"><strong>Dokcer内存限制</strong></h4><p>Docker限制内存的相关参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1、拉取压测工具的镜像</span><br><span class="line">[root@docker03 ~]# docker pull akarshes/docker-stress-ng:latest</span><br><span class="line"></span><br><span class="line">2、# 内存限制测试</span><br><span class="line"><span class="comment"># 没有内存限制</span></span><br><span class="line">[root@docker02 ~]# docker run --name mem_test -it --<span class="built_in">rm</span> akarshes/docker-stress-ng --vm 8</span><br><span class="line">[root@docker03 ~]# docker stats</span><br><span class="line">CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O         BLOCK I/O         PIDS</span><br><span class="line">9450d02cb9a1   mem_test          234.65%   2.006GiB / 2.885GiB   69.55%    586B / 0B       5.55MB / 0B       17</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#对容器做资源限制</span></span><br><span class="line">[root@docker03 ~]# docker run --name mem_test -it --<span class="built_in">rm</span>  -m 200m akarshes/docker-stress-ng --vm 8</span><br><span class="line">[root@docker03 ~]# docker stats</span><br><span class="line">CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O          BLOCK I/O         PIDS</span><br><span class="line">7870345de325   mem_test          136.94%   193.2MiB / 200MiB     96.59%    656B / 0B        59.7MB / 7.41GB   15</span><br><span class="line"></span><br><span class="line">-m：允许容器使用的最大内存，单位：k、m、g</span><br><span class="line">--oom-kill-disable</span><br><span class="line"><span class="comment">#查看命令的帮助</span></span><br><span class="line">docker run --name mem_test -it --<span class="built_in">rm</span> akarshes/docker-stress-ng --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Example: stress-ng --cpu 8 --io 4 --vm 2 --vm-bytes 128M --fork 4 --<span class="built_in">timeout</span> 10s</span><br></pre></td></tr></table></figure><h4 id="Dokcer限制CPU"><strong>Dokcer限制CPU</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没做CPU限制</span></span><br><span class="line">[root@docker02 ~]# docker run --name mem_test -it --<span class="built_in">rm</span> akarshes/docker-stress-ng --cpu 4</span><br><span class="line">[root@docker03 ~]# docker stats</span><br><span class="line">CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O         BLOCK I/O         PIDS</span><br><span class="line">3c74f649be1e   mem_test          214.19%   25.6MiB / 2.885GiB    0.87%     656B / 0B       0B / 0B           9</span><br><span class="line"><span class="comment">#cpu数据一直增加，在超载</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制CPU</span></span><br><span class="line">[root@docker02 ~]# docker run --name mem_test -it --<span class="built_in">rm</span> --cpus 0.5 akarshes/docker-stress-ng -cpu 8</span><br></pre></td></tr></table></figure><p>我们资源限制不是目的，目的是我们要随时监控到我们的资源，能看到容器对宿主机资源的使用，才能更好的做限制，不要盲目限制，不知道资源使用的情况下，就对容器资源限制，是很危险的。所以我们要对容器进行监控，如果不监控。容器超载了就会出现OMM内存溢出，杀进程的情况</p>]]></content>
    
    
    <summary type="html">docker资源限制介绍</summary>
    
    
    
    <category term="docker" scheme="https://www.fomal.cc/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>🍡八、docker容器跨主机通信</title>
    <link href="https://www.fomal.cc/posts/f36f1204.html"/>
    <id>https://www.fomal.cc/posts/f36f1204.html</id>
    <published>2024-09-22T05:57:59.000Z</published>
    <updated>2024-10-02T07:53:12.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker容器跨主机通信">docker容器跨主机通信</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">起那么多台docker，想做集群，就要让容器之间互相通信，然后做成一个架构</span><br><span class="line"></span><br><span class="line"><span class="comment">#docker-compos多机编排，需要配合docker-swarm</span></span><br><span class="line"></span><br><span class="line">现在起一个容器自己决定起在哪一台上，没有对这台的资源进行计算</span><br><span class="line">多机编排工具可以计算哪台机器适合把服务起在哪台机器</span><br></pre></td></tr></table></figure><p><strong>Docker跨主机网络类型</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、静态路由</span><br><span class="line">2、flannel (k8s里面用的比较多)</span><br><span class="line">3、overlay</span><br><span class="line">4、macvlan</span><br><span class="line">5、calico</span><br></pre></td></tr></table></figure><h3 id="1、静态路由模式"><strong>1、静态路由模式</strong></h3><p><img src="C:%5CUsers%5CMac%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240910090901456.png" alt="image-20240910090901456"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">静态路由做起来简单，但是阿里云不让添加路由</span><br><span class="line"></span><br><span class="line">1. 添加一条到达网络192.168.1.0/24的路由，网关为192.168.0.1，距离值为10：</span><br><span class="line">route add -net 192.168.1.0 netmask 255.255.255.0 gw 192.168.0.1 metric 10</span><br><span class="line"></span><br><span class="line">2. 添加一条到达主机192.168.1.100的路由，网关为192.168.0.1：</span><br><span class="line">route add -host 192.168.1.100 gw 192.168.0.1</span><br><span class="line"></span><br><span class="line">3. 添加一条到达网络192.168.0.0/16的路由，网关为192.168.1.1，距离值为20，经过eth0接口：</span><br><span class="line">route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 metric 20 dev eth0</span><br></pre></td></tr></table></figure><p>2、flannel (k8s里面用的比较多)</p><p><img src="C:%5CUsers%5CMac%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240910091610337.png" alt="image-20240910091610337"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flannel图形化界面需要配置证书</span><br></pre></td></tr></table></figure><h3 id="2、flanne网络模式的部署"><strong>2、flanne网络模式的部署</strong></h3><p>环境准备</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th><th>应用</th></tr></thead><tbody><tr><td>docker01</td><td>10.0.0.101  /  172.16.1.101</td><td>互相通信的容器</td><td>flanne</td></tr><tr><td>docker02</td><td>10.0.0.102  /  172.16.1.102</td><td>互相通信的容器</td><td>flanne</td></tr><tr><td>docker03</td><td>10.0.0.103  /  172.16.1.103</td><td>互相通信的容器</td><td>flanne</td></tr><tr><td>elk01</td><td>10.0.0.76  /  172.16.1.76</td><td>储存数据的中介</td><td>ETCD</td></tr></tbody></table><p>1、部署ETCD</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1、安装etcd</span><br><span class="line">[root@elk1 ~]# yum -y install etcd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、修改etcd配置文件</span><br><span class="line">[root@elk1 ~]# vim /etc/etcd/etcd.conf </span><br><span class="line"><span class="comment"># [member]</span></span><br><span class="line">ETCD_NAME=default</span><br><span class="line">ETCD_DATA_DIR=<span class="string">&quot;/var/lib/etcd/default.etcd&quot;</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">&quot;http://172.16.1.76:2379,http://127.0.0.1:2379&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [cluster]</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=<span class="string">&quot;new&quot;</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">&quot;etcd-cluster&quot;</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">&quot;http://172.16.1.76:2379&quot;</span></span><br><span class="line"></span><br><span class="line">3、启动etcd并加入开机自启</span><br><span class="line">[root@elk1 ~]# systemctl start etcd</span><br><span class="line">[root@elk1 ~]# systemctl <span class="built_in">enable</span> etcd</span><br><span class="line">查看端口 2380是图形化界面连接的端口</span><br></pre></td></tr></table></figure><p>ETCD的基础操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-c  调接口</span><br><span class="line"></span><br><span class="line">1、检查集群的健康状态</span><br><span class="line">[root@elk1 ~]# etcdctl -C http://127.0.0.1:2379 cluster-health</span><br><span class="line"></span><br><span class="line">2、写入数据</span><br><span class="line">[root@elk1 ~]# etcdctl -C http://127.0.0.1:2379 <span class="built_in">set</span> /testdir/testkey <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line">3、查看数据</span><br><span class="line">[root@elk1 ~]# etcdctl -C http://127.0.0.1:2379 get /testdir/testkey </span><br></pre></td></tr></table></figure><p>2、3台机器安装配置flannel</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1、3台机器安装flannel</span><br><span class="line">[root@docker01 ~]# yum -y install flannel</span><br><span class="line">[root@docker02 ~]# yum -y install flannel</span><br><span class="line">[root@docker02 ~]# yum -y install flannel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、3台机器修改flannle配置文件</span><br><span class="line">[root@docker02 ~]# vim /etc/sysconfig/flanneld</span><br><span class="line"><span class="comment">#写etcd端的ip</span></span><br><span class="line">FLANNEL_ETCD_ENDPOINTS=<span class="string">&quot;http://172.16.1.76:2379&quot;</span></span><br><span class="line"><span class="comment">#这段是默认的，不需要修改，一会要在改目录下创建文件</span></span><br><span class="line">FLANNEL_ETCD_PREFIX=<span class="string">&quot;/atomic.io/network&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、创建flannel数据再etcd中</span><br><span class="line">[root@elk1 ~]# etcdctl mk /atomic.io/network/config <span class="string">&#x27;&#123;&quot;Network&quot;:&quot;192.168.0.0/16&quot;&#125;&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;Network&quot;</span>:<span class="string">&quot;192.168.0.0/16&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">[root@elk1 ~]# etcdctl -C http://127.0.0.1:2379 <span class="built_in">set</span> /atomic.io/network/config <span class="string">&#x27;&#123;&quot;Network&quot;:&quot;192.168.0.0/16&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">4、3台机器启动flannel</span><br><span class="line">[root@docker01 ~]# systemctl start flanneld &amp;&amp; systemctl <span class="built_in">enable</span> flanneld</span><br><span class="line"></span><br><span class="line">5、3台机器查看flannel0网卡信息</span><br><span class="line">[root@docker01 ~]# ifconfig</span><br><span class="line">flannel0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1472</span><br><span class="line">        inet 192.168.54.0  netmask 255.255.0.0  destination 192.168.54.0</span><br></pre></td></tr></table></figure><p>3、关联flannel和docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">1、3台机器查看改文件，一会会在启动脚本里面加信息</span><br><span class="line">[root@docker02 ~]# <span class="built_in">cat</span> /run/flannel/docker </span><br><span class="line">DOCKER_OPT_BIP=<span class="string">&quot;--bip=192.168.22.1/24&quot;</span></span><br><span class="line">DOCKER_OPT_IPMASQ=<span class="string">&quot;--ip-masq=true&quot;</span></span><br><span class="line">DOCKER_OPT_MTU=<span class="string">&quot;--mtu=1472&quot;</span></span><br><span class="line">DOCKER_NETWORK_OPTIONS=<span class="string">&quot; --bip=192.168.22.1/24 --ip-masq=true --mtu=1472&quot;</span></span><br><span class="line"></span><br><span class="line">2、3台机器修改docker启动脚本</span><br><span class="line">[root@docker02 ~]# vim /usr/lib/systemd/system/docker.service</span><br><span class="line">[Service]</span><br><span class="line"><span class="comment">#添加这行读取环境变量文件</span></span><br><span class="line">EnviromentFile=/run/flannel/docker </span><br><span class="line"><span class="comment">#在最后面添加变量</span></span><br><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock <span class="variable">$DOCKER_NETWORK_OPTIONS</span></span><br><span class="line"></span><br><span class="line">[root@docker03 ~]# systemctl daemon-reload &amp;&amp; systemctl restart flanneld</span><br><span class="line"></span><br><span class="line">3、3台机器开启内核转发</span><br><span class="line">[root@docker03 ~]# <span class="built_in">echo</span> <span class="string">&#x27;net.ipv4.ip_forward=1&#x27;</span>  &gt;&gt; /etc/sysctl.conf </span><br><span class="line"></span><br><span class="line">4、3台机器开做如下操作</span><br><span class="line">[root@docker01 ~]# systemctl restart docker</span><br><span class="line">[root@docker01 ~]# systemctl start firewalld</span><br><span class="line">[root@docker01 ~]# systemctl stop firewalld</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# systemctl start firewalld &amp;&amp; systemctl stop firewalld</span><br><span class="line">[root@docker01 ~]#  systemctl restart network</span><br><span class="line">[root@docker01 ~]#  systemctl restart flanneld </span><br><span class="line">[root@docker01 ~]#  systemctl restart docker</span><br><span class="line"></span><br><span class="line">------------注意---------------------</span><br><span class="line">1、# 执行docker info 出现警告</span><br><span class="line"><span class="comment">#需要配置内核转发支持iptables</span></span><br><span class="line">WARNING: bridge-nf-call-iptables is disabled</span><br><span class="line">WARNING: bridge-nf-call-ip6tables is disabled</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysctl.d/docker.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables=1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables=1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward=1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">[root@docker01 ~]#  systemctl restart network</span><br><span class="line">[root@docker01 ~]#  systemctl restart flanneld </span><br><span class="line">[root@docker01 ~]#  systemctl restart docker</span><br></pre></td></tr></table></figure><p>3、测试是否可以通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1、进去查看3台机器的ip,然后再互相ping  IP，如果可以ping通则ok</span><br><span class="line">[root@docker01 ~]# docker run -it busybox /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:36:02  </span><br><span class="line">          inet addr:192.168.54.2  Bcast:192.168.54.255  Mask:255.255.255.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@docker02 ~]# docker run -it busybox /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:16:05  </span><br><span class="line">          inet addr:192.168.22.5  Bcast:192.168.22.255  Mask:255.255.255.0</span><br><span class="line">          </span><br><span class="line">[root@docker03 ~]# docker run -it busybox /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:39:05  </span><br><span class="line">          inet addr:192.168.57.5  Bcast:192.168.57.255  Mask:255.255.255.0</span><br></pre></td></tr></table></figure><h3 id="3、overlay跨主机通信"><strong>3、overlay跨主机通信</strong></h3><p><img src="C:%5CUsers%5CMac%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240910144826332.png" alt="image-20240910144826332"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">http://www.cnblogs.com/CloudMan6/p/7270551.html</span><br><span class="line"></span><br><span class="line">docker03上： consul存储ip地址的分配</span><br><span class="line">docker run -d -p 8500:8500 -h consul --name consul progrium/consul -server -bootstrap</span><br><span class="line"></span><br><span class="line">设置容器的主机名</span><br><span class="line">consul：kv类型的存储数据库（key:value）</span><br><span class="line">docker01、02上：</span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;cluster-store&quot;</span>: <span class="string">&quot;consul://10.0.0.13:8500&quot;</span>,</span><br><span class="line"><span class="string">&quot;cluster-advertise&quot;</span>: <span class="string">&quot;10.0.0.11:2376&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vim /usr/lib/systemd/system/docker.service</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line">2）创建overlay网络</span><br><span class="line">docker network create -d overlay --subnet 172.16.2.0/24 --gateway 172.16.2.254 ol1</span><br><span class="line"></span><br><span class="line">3）启动容器测试</span><br><span class="line">docker run -it --network ol1 --name oldboy01 busybox /bin/sh</span><br><span class="line">每个容器有两块网卡,eth0实现容器间的通讯,eth1实现容器访问外网</span><br></pre></td></tr></table></figure><h3 id="4、macvlan"><strong>4、macvlan</strong></h3><p>默认一个物理网卡，只有一个物理mac地址，虚拟多个mac地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建macvlan网络</span></span><br><span class="line">docker network create --driver macvlan --subnet 10.0.0.0/24 --gateway 10.0.0.254 -o parent=eth0 macvlan_1</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置eth0的网卡为混杂模式</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> eth0 promisc on</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建使用macvlan网络的容器</span></span><br><span class="line">docker run -it --network macvlan_1 --ip=10.0.0.200 busybox</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Docker跨主机网络模式的介绍</summary>
    
    
    
    <category term="docker" scheme="https://www.fomal.cc/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>🍡七、Docker单机编排工具</title>
    <link href="https://www.fomal.cc/posts/c7b1e5e1.html"/>
    <id>https://www.fomal.cc/posts/c7b1e5e1.html</id>
    <published>2024-09-22T05:54:39.000Z</published>
    <updated>2024-10-02T07:54:30.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker单机编排工具">Docker单机编排工具</h2><h3 id="1、docker-compose的介绍">1、<strong>docker-compose的介绍</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Compose是用于定义和运行多容器Docker应用工具通过Compose 可以使用YML文件来配置应用程序所需要的所有服务，用来管理容器的起停，查看容器的日志，比较方便</span><br><span class="line">不像docker run命令比较长，而且是临时执行的</span><br><span class="line"></span><br><span class="line">DockerCompose使用的三步:</span><br><span class="line">1.使用docker file 定义应用程序的环境镜像</span><br><span class="line">2.docker-compose定义构成应用程序的服务</span><br><span class="line">3.启动Compose，就相当于启动应用</span><br></pre></td></tr></table></figure><p><strong>版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">compose文件版本：version: <span class="string">&#x27;2.3&#x27;</span></span><br><span class="line"></span><br><span class="line">docker-compose程序安装的版本：</span><br><span class="line">[root@harbor harbor]# docker-compose --version</span><br><span class="line">docker-compose version 1.18.0, build 8dd22a9</span><br><span class="line"></span><br><span class="line">docker版本：</span><br><span class="line">[root@harbor harbor]# docker --version</span><br><span class="line">Docker version 26.1.4, build 5650f9b</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240909134745384.png" alt="image-20240909134745384"></p><h3 id="2、安装bocker-compose">2、<strong>安装bocker-compose</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方法一：版本不可控，安装的版本稍微偏老  1.18的</span></span><br><span class="line">1、安装bocker-compose </span><br><span class="line">[root@docker01 ~]# yum install -y docker-compose</span><br><span class="line">[root@docker01 ~]# docker-compose --version</span><br><span class="line">docker-compose version 1.18.0, build 8dd22a9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、方法二  可能要开代理下载</span><br><span class="line">[root@docker02 bin]# curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/2.29.2/dockercompose-Linux-x86_64&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# <span class="built_in">mv</span> docker-compose-linux-x86_64\ \(2\)  docker-compose</span><br><span class="line">[root@docker01 ~]# <span class="built_in">mv</span> docker-compose /usr/local/bin/</span><br><span class="line">[root@docker01 ~]# <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose    </span><br><span class="line">[root@docker01 ~]# docker-compose  --version</span><br><span class="line">Docker Compose version v2.29.2</span><br><span class="line"></span><br><span class="line"><span class="comment">#想要其他机器能够使用docker-compose命令,可以把这个文件scp过去</span></span><br><span class="line">scp /usr/local/bin/docker-compose 10.0.0.102:/usr/local/bin/</span><br></pre></td></tr></table></figure><h3 id="3、docker-compose的模版">3、<strong>docker-compose的模版</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;版本号&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  服务名称1:</span><br><span class="line">    image: 容器镜像</span><br><span class="line">    container_name: 容器名称(容器名称和服务名称保持一致)</span><br><span class="line">    environment:</span><br><span class="line">      - 环境变量1=值1</span><br><span class="line">      - 环境变量2=值2</span><br><span class="line">    volumes:</span><br><span class="line">      - 宿主机数据目录:容器内数据目录</span><br><span class="line">    ports:</span><br><span class="line">      - 宿主机端口:容器内映射端口</span><br><span class="line">    networks:</span><br><span class="line">      - 自定义网络名称</span><br><span class="line">    links:</span><br><span class="line">      - namenode</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - 数据库使用字符集变量时可以用</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  服务名称2:</span><br><span class="line">    image: 容器镜像</span><br><span class="line">    container_name: 容器名称(容器名称和服务名称保持一致)</span><br><span class="line">    environment:</span><br><span class="line">      - 环境变量1=值1</span><br><span class="line">      - 环境变量2=值2</span><br><span class="line">    user: 宿主机用户:容器用户</span><br><span class="line">    volumes:</span><br><span class="line">      - 宿主机数据目录:容器内数据目录</span><br><span class="line">    ports:</span><br><span class="line">      - 宿主机端口:容器内映射端口</span><br><span class="line">    networks:</span><br><span class="line">      - 自定义网络名称</span><br><span class="line">    links:</span><br><span class="line">      - namenode</span><br><span class="line">    depends_on:</span><br><span class="line">      - 依赖服务</span><br><span class="line">    restart: always</span><br><span class="line"> </span><br><span class="line"><span class="comment">#如果没有网络，就会自动创建</span></span><br><span class="line">networks:</span><br><span class="line">  default:</span><br><span class="line">  externnal: <span class="literal">true</span></span><br><span class="line">  name: 自定义网络名称</span><br></pre></td></tr></table></figure><h3 id="4、docker-compose——单机编排mysql">4、<strong>docker-compose——单机编排mysql</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">1、#找到运行mysql的命令</span><br><span class="line">docker run \</span><br><span class="line">--name mysql80 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=zabbix \</span><br><span class="line">-e MYSQL_USER=zabbix \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:8.0 \</span><br><span class="line">--character-set-server=utf8mb4 \</span><br><span class="line">--collation-server=utf8mb4_bin \</span><br><span class="line">--log_bin_trust_function_creators</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#编写docker-compose</span><br><span class="line">如果之前运行有其他版本的mysql，需要清除目录</span><br><span class="line">[root@docker01 mysql]# <span class="built_in">rm</span> -rf /data/</span><br><span class="line">[root@docker01 ~]# <span class="built_in">mkdir</span> mysql</span><br><span class="line">[root@docker01 ~]# <span class="built_in">cd</span> mysql/</span><br><span class="line">[root@docker01 mysql]# vim mysql-compose.yml    (名字最好叫docker-compose.yml)</span><br><span class="line">version: <span class="string">&#x27;2.0&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  mysql80:</span><br><span class="line">    image: mysql:8.0</span><br><span class="line">    container_name: mysql80</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=123</span><br><span class="line">      - MYSQL_DATABASE=zabbix</span><br><span class="line">      - MYSQL_USER=zabbix</span><br><span class="line">      - MYSQL_PASSWORD=123</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/mysql:/var/lib/mysql</span><br><span class="line">    ports:</span><br><span class="line">      - 3306:3306</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - --character-set-server=utf8mb4</span><br><span class="line">      - --collation-server=utf8mb4_bin</span><br><span class="line">      - --log_bin_trust_function_creators</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、#第一次启动使用up,会创建容器并启动容器,前台输出日志</span><br><span class="line">如果创建的文件名叫docker-compose.yml，启动命令是：</span><br><span class="line">      docker-compose up</span><br><span class="line">      </span><br><span class="line">如果创建的文件名不叫docker-compose.yml，启动命令是：</span><br><span class="line">[root@docker01 mysql]# docker-compose -f mysql-compose.yml up</span><br><span class="line"></span><br><span class="line">检查没问题就ctrl+c</span><br></pre></td></tr></table></figure><p>docker-compose的操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一次启动创建容器并前台输出日志</span></span><br><span class="line">[root@docker01 mysql]# docker-compose -f mysql-compose.yml up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果日志没有报错，直接后台启动</span></span><br><span class="line">[root@docker01 mysql]# docker-compose -f mysql-compose.yml up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">[root@docker01 mysql]# docker-compose -f mysql-compose.yml stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">[root@docker01 mysql]# docker-compose -f mysql-compose.yml start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">[root@docker01 mysql]# docker-compose -f mysql-compose.yml restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看该compose中的所有容器运行状态</span></span><br><span class="line">[root@docker01 mysql]# docker-compose -f mysql-compose.yml ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除compose中的容器</span></span><br><span class="line">[root@docker01 mysql]# docker-compose <span class="built_in">rm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">[root@docker01 mysql]# docker-compose logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定服务启停</span></span><br><span class="line">[root@harbor harbor]# docker-compose start proxy</span><br></pre></td></tr></table></figure><h3 id="5、docker-compose——单机编排zabbix">5、<strong>docker-compose——单机编排zabbix</strong></h3><p>1、找到运行zabbix的docker命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">mysql要初始化。所以web-server要后启动  写成=如果报错。就要写成key: value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、#找到运行mysql的命令</span><br><span class="line">docker run \</span><br><span class="line">--name mysql80 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=zabbix \</span><br><span class="line">-e MYSQL_USER=zabbix \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:8.0 \</span><br><span class="line">--character-set-server=utf8mb4 \</span><br><span class="line">--collation-server=utf8mb4_bin \</span><br><span class="line">--log_bin_trust_function_creators</span><br><span class="line"></span><br><span class="line">2、运行容器化zabbix-server</span><br><span class="line">docker run \</span><br><span class="line">--<span class="built_in">link</span> mysql80 \</span><br><span class="line">--name zabbix-server \</span><br><span class="line">-p 10051:10051 \</span><br><span class="line">-e DB_SERVER_HOST=<span class="string">&quot;mysql80&quot;</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">&quot;zabbix&quot;</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">&quot;123&quot;</span> \</span><br><span class="line">-d zabbix/zabbix-server-mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、容器化zabbix-web</span><br><span class="line">docker run \</span><br><span class="line">--<span class="built_in">link</span> zabbix-server \</span><br><span class="line">--<span class="built_in">link</span> mysql80 \</span><br><span class="line">--name zabbix-web \</span><br><span class="line">-p 80:8080 \</span><br><span class="line">-p 8443:8443 \</span><br><span class="line">-e DB_SERVER_HOST=<span class="string">&quot;mysql80&quot;</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">&quot;zabbix&quot;</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">&quot;123&quot;</span> \</span><br><span class="line">-e ZBX_SERVER_HOST=<span class="string">&quot;zabbix-server&quot;</span> \</span><br><span class="line">-e PHP_TZ=<span class="string">&quot;Asia/Shanghai&quot;</span> \</span><br><span class="line">-d zabbix/zabbix-web-nginx-mysql</span><br></pre></td></tr></table></figure><p>2、编写zabbix的docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]# <span class="built_in">rm</span> -rf /data/</span><br><span class="line">[root@docker01 ~]# <span class="built_in">mkdir</span> zabbix</span><br><span class="line">[root@docker01 ~]# <span class="built_in">cd</span> zabbix/</span><br><span class="line">[root@docker01 zabbix]# vim docker-compose.yml</span><br><span class="line">version: <span class="string">&#x27;2.0&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  mysql80:</span><br><span class="line">    image: mysql:8.0</span><br><span class="line">    container_name: mysql80</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=123</span><br><span class="line">      - MYSQL_DATABASE=zabbix</span><br><span class="line">      - MYSQL_USER=zabbix</span><br><span class="line">      - MYSQL_PASSWORD=123</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/mysql:/var/lib/mysql</span><br><span class="line">    ports:</span><br><span class="line">      - 3306:3306</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - --character-set-server=utf8mb4</span><br><span class="line">      - --collation-server=utf8mb4_bin</span><br><span class="line">      - --log_bin_trust_function_creators</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  zabbix-server:</span><br><span class="line">    image: zabbix/zabbix-server-mysql</span><br><span class="line">    container_name: zabbix-server</span><br><span class="line">    environment:</span><br><span class="line">      - DB_SERVER_HOST=mysql80</span><br><span class="line">      - MYSQL_USER=zabbix</span><br><span class="line">      - MYSQL_PASSWORD=123</span><br><span class="line">    ports:</span><br><span class="line">      - 10051:10051</span><br><span class="line">    links:</span><br><span class="line">      - mysql80</span><br><span class="line">    restart: always</span><br><span class="line">    </span><br><span class="line">  zabbix-web:</span><br><span class="line">    image: zabbix/zabbix-web-nginx-mysql</span><br><span class="line">    container_name: zabbix-web</span><br><span class="line">    environment:</span><br><span class="line">      - DB_SERVER_HOST=mysql80</span><br><span class="line">      - MYSQL_USER=zabbix</span><br><span class="line">      - MYSQL_PASSWORD=123</span><br><span class="line">      - ZBX_SERVER_HOST=zabbix-server</span><br><span class="line">      - PHP_TZ=Asia/Shanghai</span><br><span class="line">    ports:</span><br><span class="line">      - 80:8080</span><br><span class="line">      - 443:8443</span><br><span class="line">    links:</span><br><span class="line">      - mysql80</span><br><span class="line">      - zabbix-server</span><br><span class="line">    restart: always</span><br><span class="line">    </span><br><span class="line"><span class="comment">#  networks:</span></span><br><span class="line"><span class="comment">#    default:</span></span><br><span class="line"><span class="comment">#      externnal: true</span></span><br><span class="line"><span class="comment">#      name: zabbix-net</span></span><br><span class="line"><span class="comment">#基于默认的default-bridge类型创建一个bridge类型的网桥</span></span><br></pre></td></tr></table></figure><p>####报错</p><p><img src="../image/study_img/image-20240909153932154.png" alt="image-20240909153932154"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 如果有环境变量的报错，就取消单引号试一下，不行再换成key:value格式</span></span><br><span class="line">environment:</span><br><span class="line">- DB_SERVER_HOST: <span class="string">&#x27;mysql80&#x27;</span></span><br><span class="line">- MYSQL_USER: <span class="string">&#x27;zabbix&#x27;</span></span><br><span class="line">- MYSQL_PASSWORD: <span class="string">&#x27;zabbix&#x27;</span></span><br></pre></td></tr></table></figure><p>3、启动zabbix</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、前台检查是否有报错</span><br><span class="line">[root@docker01 zabbix]# docker-compose up </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、没有报错就放后台运行</span><br><span class="line">[root@docker01 zabbix]# docker-compose up -d</span><br><span class="line"></span><br><span class="line">3、浏览器访问</span><br><span class="line">10.0.0.101</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240909154947402.png" alt="image-20240909154947402"></p><h3 id="6、docker-compose——单机编排jenkins">6、<strong>docker-compose——单机编排jenkins</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">1、gitlab镜像</span><br><span class="line">docker run \</span><br><span class="line">--hostname 10.0.0.102 \</span><br><span class="line">--<span class="built_in">env</span> GITLAB_OMNIBUS_CONFIG=<span class="string">&quot;external_url &#x27;http://10.0.0.102&#x27;&quot;</span> \</span><br><span class="line">-p 443:443 -p 80:80 -p 2222:22 \</span><br><span class="line">--name gitlab \</span><br><span class="line">--restart always \</span><br><span class="line">-v /data/gitlab/config:/etc/gitlab \</span><br><span class="line">-v /data/gitlab/logs:/var/log/gitlab \</span><br><span class="line">-v /data/gitlab/data:/var/opt/gitlab \</span><br><span class="line">-d gitlab/gitlab-ce</span><br><span class="line"></span><br><span class="line">2、运行jenkins容器</span><br><span class="line">docker run \</span><br><span class="line">--name jenkins \</span><br><span class="line">--privileged \</span><br><span class="line">--user=root \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /data/jenkins/:/var/jenkins_home \</span><br><span class="line">-v /usr/bin/docker:/usr/bin/docker \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">-v /root/.ssh/:/root/.ssh/ \</span><br><span class="line">-v /root/.docker/config.json:/root/.docker/config.json \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-p 5000:5000 \</span><br><span class="line">-d jenkins/jenkins:2.422</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# <span class="built_in">mkdir</span> jenkins &amp;&amp; <span class="built_in">cd</span> jenkins</span><br><span class="line">[root@docker01 jenkins]# vim jenkins-docker-compose.yml</span><br><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  gitlab:</span><br><span class="line">    image: gitlab/gitlab-ce</span><br><span class="line">    container_name: gitlab</span><br><span class="line">    hostname: 10.0.0.102</span><br><span class="line">    environment:</span><br><span class="line">      GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">        external_url <span class="string">&#x27;http://10.0.0.102</span></span><br><span class="line"><span class="string">        gitlab_rails[&#x27;</span>gitlab_shell_ssh_port<span class="string">&#x27;] = 2222 </span></span><br><span class="line"><span class="string">        alertmanager[&#x27;</span><span class="built_in">enable</span><span class="string">&#x27;] = false</span></span><br><span class="line"><span class="string">        node_exporter[&#x27;</span><span class="built_in">enable</span><span class="string">&#x27;] = false</span></span><br><span class="line"><span class="string">        redis_exporter[&#x27;</span><span class="built_in">enable</span><span class="string">&#x27;] = false</span></span><br><span class="line"><span class="string">        postgres_exporter[&#x27;</span><span class="built_in">enable</span><span class="string">&#x27;] = false</span></span><br><span class="line"><span class="string">    volumes:</span></span><br><span class="line"><span class="string">      - /data/gitlab/config:/etc/gitlab </span></span><br><span class="line"><span class="string">      - /data/gitlab/logs:/var/log/gitlab </span></span><br><span class="line"><span class="string">      - /data/gitlab/data:/var/opt/gitlab</span></span><br><span class="line"><span class="string">    ports:</span></span><br><span class="line"><span class="string">      - 443:443 </span></span><br><span class="line"><span class="string">      - 80:80 </span></span><br><span class="line"><span class="string">      - 2222:22</span></span><br><span class="line"><span class="string">    restart: always</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">  jenkins:</span></span><br><span class="line"><span class="string">    image: jenkins/jenkins:2.422</span></span><br><span class="line"><span class="string">    container_name: jenkins</span></span><br><span class="line"><span class="string">    user: root</span></span><br><span class="line"><span class="string">    privileged: ture</span></span><br><span class="line"><span class="string">    volumes:</span></span><br><span class="line"><span class="string">      - /data/jenkins/:/var/jenkins_home</span></span><br><span class="line"><span class="string">      - /usr/bin/docker:/usr/bin/docker</span></span><br><span class="line"><span class="string">      - /var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line"><span class="string">      - /root/.ssh/:/root/.ssh/</span></span><br><span class="line"><span class="string">      - /root/.docker/config.json:/root/.docker/config.json</span></span><br><span class="line"><span class="string">    ports:</span></span><br><span class="line"><span class="string">      - 8080:8080 </span></span><br><span class="line"><span class="string">      - 5000:5000 </span></span><br><span class="line"><span class="string">    restart: always</span></span><br></pre></td></tr></table></figure><h3 id="7、docker-compose——单机编排wordpress">7、<strong>docker-compose——单机编排wordpress</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行数据库</span></span><br><span class="line">docker run \</span><br><span class="line">--name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=wp_db \</span><br><span class="line">-e MYSQL_USER=wp_user \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:5.7.44</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行wordpress容器</span></span><br><span class="line">docker run \</span><br><span class="line">--name wp \</span><br><span class="line">--<span class="built_in">link</span> mysql57 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-e WORDPRESS_DB_HOST=mysql57 \</span><br><span class="line">-e WORDPRESS_DB_USER=wp_user \</span><br><span class="line">-e WORDPRESS_DB_PASSWORD=123 \</span><br><span class="line">-e WORDPRESS_DB_NAME=wp_db \</span><br><span class="line">-d wordpress-df:v1 </span><br></pre></td></tr></table></figure><p>2、编写docker-compos</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]# <span class="built_in">mkdir</span> wp</span><br><span class="line">[root@docker01 ~]# <span class="built_in">cd</span> wp/</span><br><span class="line">[root@docker01 wp]# vim wp-docker-compose.yml</span><br><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  mysql57:</span><br><span class="line">    image: mysql:5.7.44</span><br><span class="line">    container_name: mysql57</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=123</span><br><span class="line">      - MYSQL_DATABASE=wp_db</span><br><span class="line">      - MYSQL_USER=wp_user</span><br><span class="line">      - MYSQL_PASSWORD=123</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/mysql:/var/lib/mysql</span><br><span class="line">    ports:</span><br><span class="line">      - 3306:3306</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  wp:</span><br><span class="line">    image:  wordpress-df:v2</span><br><span class="line">    container_name: wp</span><br><span class="line">    environment:</span><br><span class="line">      - WORDPRESS_DB_HOST=mysql57</span><br><span class="line">      - WORDPRESS_DB_USER=wp_user</span><br><span class="line">      - WORDPRESS_DB_PASSWORD=123</span><br><span class="line">      - WORDPRESS_DB_NAME=wp_db</span><br><span class="line">    ports:</span><br><span class="line">      - 80:80</span><br><span class="line">    links:</span><br><span class="line">      - mysql57</span><br><span class="line">    restart: always</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">[root@docker01 wp]# docker-compose -f wp-docker-compose.yml up -d</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用docker-compose理容器的起停</summary>
    
    
    
    <category term="docker" scheme="https://www.fomal.cc/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>🍡六、docker的容器化代码上线</title>
    <link href="https://www.fomal.cc/posts/93124e7b.html"/>
    <id>https://www.fomal.cc/posts/93124e7b.html</id>
    <published>2024-09-22T05:24:52.000Z</published>
    <updated>2024-10-02T07:53:01.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="容器化代码上线">容器化代码上线</h2><h3 id="1、容器化gitlab"><strong>1、容器化gitlab</strong></h3><p>环境准备  先检查可以内存Avail(最少还有10G)比较多的机器，去拉取gitlab，不然会拉取失败</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th><th>内存</th></tr></thead><tbody><tr><td>docker03</td><td>10.0.0.102  /  172.16.1.102</td><td>部署容器化gitlab</td><td>8G</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器化代码上线坑：</span></span><br><span class="line">1.gitlab如何使用非22端口拉代码</span><br><span class="line">2.jenkins容器如何使用docker命令</span><br><span class="line">3.jenkins的密钥上传到gitlab</span><br><span class="line">4.jenkins如何登录 harbor</span><br><span class="line"></span><br><span class="line">开发把代码提交到gitlab，jekins去拉取代码到容器里面</span><br></pre></td></tr></table></figure><p>容器化代码上线流程图</p><p><img src="../image/study_img/image-20240905093733661.png" alt="image-20240905093733661"></p><p>1、去官网查找运行容器的代码  <a href="https://about.gitlab.com/">https://about.gitlab.com/</a></p><p><img src="../image/study_img/image-20240907130711368.png" alt="image-20240907130711368"></p><p>往下滑 找到容器安装</p><p><img src="../image/study_img/image-20240907130745739.png" alt="image-20240907130745739"></p><p><img src="../image/study_img/image-20240907131037286.png" alt="image-20240907131037286"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1、拉取镜像   Git-ce 是社区版，gitlab-ee是企业版，收费的。</span><br><span class="line">[root@docker02 ~]# docker pull gitlab/gitlab-ce:latest</span><br><span class="line"></span><br><span class="line">2、运行镜像</span><br><span class="line">docker run \</span><br><span class="line">--hostname 10.0.0.102 \</span><br><span class="line">--<span class="built_in">env</span> GITLAB_OMNIBUS_CONFIG=<span class="string">&quot;external_url &#x27;http://10.0.0.102&#x27;&quot;</span> \</span><br><span class="line">-p 443:443 -p 80:80 -p 2222:22 \</span><br><span class="line">--name gitlab \</span><br><span class="line">--restart always \</span><br><span class="line">-v /data/gitlab/config:/etc/gitlab \</span><br><span class="line">-v /data/gitlab/logs:/var/log/gitlab \</span><br><span class="line">-v /data/gitlab/data:/var/opt/gitlab \</span><br><span class="line">-d gitlab/gitlab-ce</span><br><span class="line"></span><br><span class="line">-p 2222:22  宿主机的22端口被占用了，所有使用宿主机的2222端口</span><br><span class="line">--detach=-d</span><br><span class="line"></span><br><span class="line">3、运行之后，执行</span><br><span class="line">[root@docker02 ~]# docker ps</span><br><span class="line">可能一开始看不到运行结果，因为镜像比较大，运行起来比较慢，后面还要做优化，先进入容器里面，查看启动状态</span><br><span class="line">[root@docker02 ~]# docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line">root@10:/# gitlab-ctl status</span><br><span class="line">run: alertmanager: (pid 1281) 314s; run: <span class="built_in">log</span>: (pid 1008) 429s</span><br><span class="line">run: gitaly: (pid 1231) 318s; run: <span class="built_in">log</span>: (pid 559) 642s</span><br><span class="line">run: gitlab-exporter: (pid 1219) 319s; run: <span class="built_in">log</span>: (pid 939) 448s</span><br><span class="line">run: gitlab-kas: (pid 751) 626s; run: <span class="built_in">log</span>: (pid 768) 623s</span><br><span class="line">run: gitlab-workhorse: (pid 1155) 321s; run: <span class="built_in">log</span>: (pid 885) 461s</span><br><span class="line">run: logrotate: (pid 502) 655s; run: <span class="built_in">log</span>: (pid 514) 653s</span><br><span class="line">run: nginx: (pid 1169) 320s; run: <span class="built_in">log</span>: (pid 917) 455s</span><br><span class="line">run: postgres-exporter: (pid 1289) 314s; run: <span class="built_in">log</span>: (pid 1032) 420s</span><br><span class="line">run: postgresql: (pid 583) 632s; run: <span class="built_in">log</span>: (pid 594) 631s</span><br><span class="line">run: prometheus: (pid 1238) 318s; run: <span class="built_in">log</span>: (pid 984) 437s</span><br><span class="line">run: puma: (pid 835) 474s; run: <span class="built_in">log</span>: (pid 842) 473s</span><br><span class="line">run: redis: (pid 519) 649s; run: <span class="built_in">log</span>: (pid 532) 647s</span><br><span class="line">run: redis-exporter: (pid 1221) 319s; run: <span class="built_in">log</span>: (pid 968) 441s</span><br><span class="line">run: sidekiq: (pid 852) 468s; run: <span class="built_in">log</span>: (pid 860) 467s</span><br><span class="line">run: sshd: (pid 37) 676s; run: <span class="built_in">log</span>: (pid 36) 676s</span><br><span class="line"></span><br><span class="line">4、看到nginx服务起来了，就可以访问网页</span><br><span class="line">10.0.0.102</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240907152247060.png" alt="image-20240907152247060"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">登录的用户名是root</span><br><span class="line"></span><br><span class="line">5、查看gitlab的初始密码</span><br><span class="line">[root@docker02 ~]# docker <span class="built_in">exec</span> -it gitlab grep <span class="string">&#x27;Password:&#x27;</span> /etc/gitlab/initial_root_password</span><br><span class="line">Password: dUs0tOCn+nDOkWoShlwCvYYWlnIZUwaiBujL9BkO2TU=</span><br></pre></td></tr></table></figure><p>6、创建一个项目</p><p><img src="../image/study_img/image-20240907153032437.png" alt="image-20240907153032437"></p><p><img src="../image/study_img/image-20240907153123588.png" alt="image-20240907153123588"></p><p><img src="../image/study_img/image-20240907155134996.png" alt="image-20240907155134996"></p><p>7、拉取代码：目前项目创建完成后，使用其他机器拉取代码，无法拉取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、拉取代码的机器需要安装git</span><br><span class="line">[root@docker01 ~]# yum -y install git</span><br><span class="line"></span><br><span class="line">2、生成密钥对，配置到gitlab仓库</span><br><span class="line">[root@docker01 ~]# ssh-keygen</span><br><span class="line">[root@docker01 ~]# <span class="built_in">cat</span> ~/.ssh/id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDQrHuOoZahkYpkUthbzbVLMH3ijST4TSPGuKWm77QBIredxGGKpoq2TN71pysOPUiGUKpBQnttyfo5AOealp0knNFuxqiShcRa8IlJQMX6mJfVFrY6jI5g/AnDvIayurVVBsf6T7h6sQNV8Pj4bzGpO8PXi8Z8GGslZ2LbmqA+LsfLLX/KR3BJce4JC/0PsK4DqAVO/WVYd7H0qeSUK5arrnpt7ncYVx02k63KI47Tb4W+nyqhlChwxD55V3ArzbvVpQy3BnRoOQQ5cr7le6HP+kl27jHTxCNJ7bf5uU1O4Polc3ODBkq2gZC9JaN6O8RuyB2UeCe5odVYOmxb5IKJ root@docker01</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240907154118623.png" alt="image-20240907154118623"></p><p><img src="../image/study_img/image-20240907154153334.png" alt="image-20240907154153334"></p><p><img src="../image/study_img/image-20240907154228630.png" alt="image-20240907154228630"></p><p>修改为中文字体，再刷新</p><p><img src="../image/study_img/image-20240907154846257.png" alt="image-20240907154846257"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1、使用这个命令拉取代码时，还需要输入密码，所以配置的ssh密钥对到gitlab时是不太行的</span><br><span class="line">[root@docker01 ~]# git <span class="built_in">clone</span> git@10.0.0.102:root/web.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#gitlab使用非22端口拉代码</span><br><span class="line">[root@docker01 ~]# git <span class="built_in">clone</span> ssh://git@10.0.0.102:2222/root/web.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、由于每次拉取代码都要输入协议和端口，效率不高，可以修改配置文件设置自动出现协议和端口，直接复制</span><br><span class="line"><span class="comment">#修改配置文件和做gitlab的优化</span></span><br><span class="line">由于配置文件已经映射出来了，直接修改</span><br><span class="line">[root@docker02 ~]# vim /data/gitlab/config/gitlab.rb</span><br><span class="line"><span class="comment">#32行：url的配置</span></span><br><span class="line">external_url <span class="string">&#x27;http://10.0.0.102&#x27;</span>  </span><br><span class="line"><span class="comment"># 698行：端口的配置</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = 2222 </span><br><span class="line"><span class="comment">###优化内容  把这几行加入配置文件</span></span><br><span class="line"><span class="comment">#告警关闭</span></span><br><span class="line">alertmanager[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br><span class="line"><span class="comment">#关闭前端的node功能</span></span><br><span class="line">node_exporter[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br><span class="line"><span class="comment">#关闭redis功能</span></span><br><span class="line">redis_exporter[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br><span class="line"><span class="comment">#关闭postgre功能</span></span><br><span class="line">postgres_exporter[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、重新加载gitlab配置文件，需要等待3分钟左右</span><br><span class="line">[root@docker02 ~]# docker <span class="built_in">exec</span> -it gitlab gitlab-ctl reconfigure</span><br><span class="line">reconfigure相当于nginx的reload，还是可以正常访问网页的</span><br><span class="line"></span><br><span class="line">5、再次访问网页，刷新页面，可以看到提供的地址是直接可以使用的地址</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240907162925699.png" alt="image-20240907162925699"></p><h3 id="2、容器化jenkins"><strong>2、容器化jenkins</strong></h3><p>访问官网，找到启动容器的命令：<a href="https://www.jenkins.io/">https://www.jenkins.io/</a></p><p><img src="../image/study_img/image-20240907163455778.png" alt="image-20240907163455778"></p><p><img src="../image/study_img/image-20240907163613722.png" alt="image-20240907163613722"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--name jenkins-docker \</span><br><span class="line">--<span class="built_in">rm</span> \</span><br><span class="line">--detach \</span><br><span class="line">--privileged \</span><br><span class="line">--network jenkins \    <span class="comment">#网络没有配置，需要删除</span></span><br><span class="line">--network-alias docker \ <span class="comment">#网络没有配置，需要删除</span></span><br><span class="line">--<span class="built_in">env</span> DOCKER_TLS_CERTDIR=/certs \  <span class="comment">#没有证书，需要删除</span></span><br><span class="line">--volume jenkins-docker-certs:/certs/client \ <span class="comment">#没有证书，需要删除</span></span><br><span class="line">--volume jenkins-data:/var/jenkins_home \  <span class="comment">#映射的jenkins目录</span></span><br><span class="line">--publish 2376:2376 \</span><br><span class="line">docker:dind \</span><br><span class="line">--storage-driver overlay2</span><br></pre></td></tr></table></figure><p>到docker官网，找到jenkins镜像  <a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p><img src="../image/study_img/image-20240907164947184.png" alt="image-20240907164947184"></p><p><img src="../image/study_img/image-20240907165448303.png" alt="image-20240907165448303"></p><p><img src="../image/study_img/image-20240907165642490.png" alt="image-20240907165642490"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">1、拉取2.422版本的镜像</span><br><span class="line">[root@docker02 ~]# docker pull jenkins/jenkins:2.422</span><br><span class="line"></span><br><span class="line">2、运行jenkins容器</span><br><span class="line">docker run \</span><br><span class="line">--name jenkins \</span><br><span class="line">--privileged \</span><br><span class="line">--user=root \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /data/jenkins/:/var/jenkins_home \</span><br><span class="line">-v /usr/bin/docker:/usr/bin/docker \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">-v /root/.ssh/:/root/.ssh/ \</span><br><span class="line">-v /root/.docker/config.json:/root/.docker/config.json \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-p 5000:5000 \</span><br><span class="line">-d jenkins/jenkins:2.422</span><br><span class="line"></span><br><span class="line">--<span class="built_in">rm</span>：只要容器停止就会删掉</span><br><span class="line">--user=root：jenkins需要root用户去启动，不然运行之后docker <span class="built_in">log</span> -f jenkins查看日志都会没有权限</span><br><span class="line">--privileged：相当于zabbix需要监控宿主机，想要有权限就需要这个参数，还可以让容器有权限能使用宿主机上的docker命令</span><br><span class="line">docker容器想要使用宿主机的命令就是docker <span class="keyword">in</span> docker</span><br><span class="line">-v /usr/bin/docker：将宿主机的docker命令映射，容器里面就可以执行docker ps..</span><br><span class="line">-v /var/run/docker.sock：docker的命令通过sockt连接的，需要映射sock文件，由于容器里面没有sock文件，不然执行docker命令会报错</span><br><span class="line"><span class="comment">#解决jenkins生成密钥到gitlab,如果在容器里面生成密钥对，万一jenkins宕机了，在重新生成密钥对，之前放到gitlab里面的密钥对就不能使用了，为了密钥对持久化，需要在宿主机上生成密钥对，映射到容器</span></span><br><span class="line">[root@docker02 ~]# ssh-keygen</span><br><span class="line">-v /root/.ssh：将宿主机的密钥对映射到容器</span><br><span class="line">-v /root/.docker/config.json：将登录harbor的认证信息映射，容器就可以推送镜像到harbor</span><br><span class="line"></span><br><span class="line">3、上传插件</span><br><span class="line"></span><br><span class="line">4、解压插件</span><br><span class="line">[root@docker02 ~]# tar xf jenkins_plugins_2.422.tgz -C /data/jenkins/</span><br><span class="line"></span><br><span class="line">5、再重新启动jenkins</span><br><span class="line">[root@docker02 ~]# docker restart jenkins</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6、浏览器访问网页</span><br><span class="line">10.0.0.102:8080</span><br><span class="line"></span><br><span class="line">7、查看密码</span><br><span class="line">[root@docker02 ~]# docker <span class="built_in">exec</span> -it jenkins <span class="built_in">cat</span> /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line">3766efc193fe418f9256897f39840929</span><br><span class="line"></span><br><span class="line">由于/var/jenkins_home目录已经映射出来在宿主机上已经持久化了，还可以这样查看密码文件</span><br><span class="line">[root@docker02 ~]# <span class="built_in">cat</span> /data/jenkins/secrets/initialAdminPassword </span><br><span class="line">3766efc193fe418f9256897f39840929</span><br><span class="line"></span><br><span class="line">然后出现安装jenkins插件的页面之间，不要安装插件，直接点击右上角的×——&gt;点击开始使用jenkins</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240907175615967.png" alt="image-20240907175615967"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">8、将搭建了jenkins服务器的公钥放到gitlab服务器</span><br><span class="line">[root@docker02 ~]# <span class="built_in">cat</span> .ssh/id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDPOMkDhGerkcJCwv55/6B4vTtzY0gxDKDYibzGUHX18AKgN8eZUBQVyub/mLmhBYlPWBIlb8x1xzNqH6N+kt/aIp03KheYAJBk26Npc8vtVEh009kf9DU3q4QopDrbKOmaF21/0LZ+ZVsAT0AmPKVH8pWodOv9O8aoXoVZe+uxAD+nItopJ6bnDzalKLEeVadtGZqm4k+AZRY2W7bZFUlss6WEKB2DLWfnf4FkIkDBQqLTPOS8ovB4U9gEBqN0vRFGI9qa1dDE4I9bK3ISKWBLR1yzV5wA4ARszXuj4t/nEP71qWfdi3vi9xdYvWStGdWa487nIFgi7s96ix9g8QBD root@docker02</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240907182329531.png" alt="image-20240907182329531"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">9、jenkins机器拉取gitlab里面的代码</span><br><span class="line">进入jenkins容器</span><br><span class="line">[root@docker02 ~]# docker <span class="built_in">exec</span> -it jenkins /bin/bash</span><br><span class="line"></span><br><span class="line">10、拉取代码</span><br><span class="line">root@126b61b9d225:/# git <span class="built_in">clone</span> ssh://git@10.0.0.102:2222/root/web.git</span><br><span class="line">输入<span class="built_in">yes</span>，不需要输入密码，直接免密拉取代码</span><br></pre></td></tr></table></figure><h3 id="3、测试将jenkins里面的镜像推送到Harbor图形化镜像仓库"><strong>3、测试将jenkins里面的镜像推送到Harbor图形化镜像仓库</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1、进入jenkins容器</span><br><span class="line">[root@docker02 ~]# docker <span class="built_in">exec</span> -it jenkins /bin/bash</span><br><span class="line">root@126b61b9d225:/# docker images</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、将镜像改名</span><br><span class="line">root@126b61b9d225:/# docker tag wordpress:v7 172.16.1.76/wordpress/wordpress-jenkins-harbor:v7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、推送镜像   报错，是因为需要登录，但是每次重启都需要登录</span><br><span class="line">root@126b61b9d225:/# docker push 172.16.1.76/wordpress/wordpress-jenkins-harbor:v7</span><br><span class="line">unauthorized: unauthorized to access repository: wordpress/wordpress-jenkins-harbor, action: push: unauthorized to access repository: wordpress/wordpress-jenkins-harbor, action: push</span><br><span class="line"></span><br><span class="line">4、检查宿主机是否能够推送</span><br><span class="line">[root@docker02 ~]# docker push 172.16.1.76/wordpress/wordpress-jenkins-harbor:v7</span><br><span class="line">unauthorized: unauthorized to access repository: wordpress/wordpress-jenkins-harbor, action: push: unauthorized to access repository: wordpress/wordpress-jenkins-harbor, action: push</span><br><span class="line"></span><br><span class="line">5、宿主机不能推送，需要登录harbor</span><br><span class="line">[root@docker01 ~]# docker login 172.16.1.76</span><br><span class="line">Username: admin</span><br><span class="line">Password:  <span class="comment">#密码：Harbor12345</span></span><br><span class="line">......</span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line">6、宿主机正常推送  推送成功</span><br><span class="line">[root@docker02 ~]# docker push 172.16.1.76/wordpress/wordpress-jenkins-harbor:v7</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240907210452739.png" alt="image-20240907210452739"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">7、宿主机能够推送镜像，但是容器不一定能推，因为容器也是需要login登录的，但是这里不需要容器登录</span><br><span class="line">宿主机登录了之后，会有一个认证信息做出一个文件保存到~/.docker/config.json</span><br><span class="line">[root@docker02 ~]# ll -a ~/.docker/config.json </span><br><span class="line">-rw------- 1 root root 139 Sep  7 21:02 /root/.docker/config.json</span><br><span class="line">[root@docker02 ~]# <span class="built_in">cat</span> ~/.docker/config.json</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;auths&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;10.0.0.76&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;auth&quot;</span>: <span class="string">&quot;YWRtaW46SGFyYm9yMTIzNDU=&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;172.16.1.76&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;auth&quot;</span>: <span class="string">&quot;YWRtaW46SGFyYm9yMTIzNDU=&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">#所以，是需要在启动jenkins的时候，将认证信息的文件映射，这样jenkins容器就可以推送镜像到Harbor从库，在运行的时候我已经加上这个文件映射了的，只要我的宿主机登录过，我的jenkins容器可以推送</span></span><br></pre></td></tr></table></figure><h3 id="4、jenkins容器构建代码上线——自由风格"><strong>4、jenkins容器构建代码上线——自由风格</strong></h3><p>1、测试构建</p><p><img src="../image/study_img/image-20240907230455222.png" alt="image-20240907230455222"></p><p><img src="../image/study_img/image-20240907234349843.png" alt="image-20240907234349843"></p><p>复制代码地址</p><p><img src="../image/study_img/image-20240907234446792.png" alt="image-20240907234446792"></p><p><img src="../image/study_img/image-20240907234558247.png" alt="image-20240907234558247"></p><p><img src="../image/study_img/image-20240908000318150.png" alt="image-20240908000318150"></p><p>执行构建，构建成功</p><p><img src="../image/study_img/image-20240908000821406.png" alt="image-20240908000821406"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、#拉取后代码存放的目录</span><br><span class="line">[root@docker02 ~]# ll /data/jenkins/workspace/web-frestlye/</span><br><span class="line">-rw-r--r-- 1 root root    7 Sep  8 00:06 index.html</span><br><span class="line">-rw-r--r-- 1 root root 6141 Sep  8 00:06 README.md</span><br><span class="line"></span><br><span class="line">2、#免密web服务器</span><br><span class="line">[root@docker02 ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.1.101</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;WORKSPACE&#125;</span></span><br><span class="line">/var/jenkins_home/workspace/web-frestlye</span><br></pre></td></tr></table></figure><p>2、写脚本构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">harbor_ip=172.16.1.76</span><br><span class="line">web_ip=172.16.1.101</span><br><span class="line"><span class="built_in">cat</span> &gt; <span class="variable">$&#123;WORKSPACE&#125;</span>/Dockerfile &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">FROM nginx:alpine</span></span><br><span class="line"><span class="string">#将网页代码复制到nginx的站点目录下</span></span><br><span class="line"><span class="string">COPY index.html /usr/share/nginx/html/</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment">#进入工作目录构建镜像</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;WORKSPACE&#125;</span> &amp;&amp; \</span><br><span class="line">docker build -t <span class="variable">$&#123;harbor_ip&#125;</span>/wordpress/web-frestlye:v1 .</span><br><span class="line"><span class="comment">#打完镜像后推送到Harbor仓库</span></span><br><span class="line">docker push <span class="variable">$&#123;harbor_ip&#125;</span>/wordpress/web-frestlye:v1</span><br><span class="line"><span class="comment">#连接到web服务器把镜像从harbor拉下来,注意jenkins机器要和web免密</span></span><br><span class="line">ssh root@<span class="variable">$&#123;web_ip&#125;</span> <span class="string">&quot;docker pull <span class="variable">$&#123;harbor_ip&#125;</span>/wordpress/web-frestlye:v1&quot;</span></span><br><span class="line"><span class="comment">#删除之前旧的web镜像</span></span><br><span class="line">ssh root@<span class="variable">$&#123;web_ip&#125;</span> <span class="string">&quot;docker rm -f web&quot;</span></span><br><span class="line"><span class="comment">#在web服务器部署nginx网页代码</span></span><br><span class="line">ssh root@<span class="variable">$&#123;web_ip&#125;</span> <span class="string">&quot;docker run --name web -p 80:80 -d <span class="variable">$&#123;harbor_ip&#125;</span>/wordpress/web-frestlye:v1&quot;</span></span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240908230050715.png" alt="image-20240908230050715"></p><p><img src="../image/study_img/image-20240908230246558.png" alt="image-20240908230246558"></p><h3 id="5、jenkins容器构建代码上线——参数化构建"><strong>5、jenkins容器构建代码上线——参数化构建</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1、第一版</span><br><span class="line">[root@docker02 ~]# <span class="built_in">mkdir</span> /web</span><br><span class="line">[root@docker02 ~]# <span class="built_in">cd</span> /web</span><br><span class="line">[root@docker02 web]# git init /web</span><br><span class="line">[root@docker02 web]# vim index.html</span><br><span class="line">[root@docker02 web]# vim src.js</span><br><span class="line">[root@docker02 web]# git add .</span><br><span class="line">[root@docker02 web]#  git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">[root@docker02 web]# git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">[root@docker02 web]# git commit -m <span class="string">&#x27;官网v1.0&#x27;</span></span><br><span class="line">[root@docker02 web]#  git tag -a <span class="string">&#x27;v1&#x27;</span>  -m <span class="string">&quot;官网v1.0&quot;</span></span><br><span class="line">[root@docker02 web]# git remote add origin ssh://git@10.0.0.102:2222/root/web-website.git</span><br><span class="line">[root@docker02 web]# git push --all</span><br><span class="line">[root@docker02 web]# git push --tag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、第二版</span><br><span class="line">[root@docker02 web]# vim src.js</span><br><span class="line">[root@docker02 web]# git add .</span><br><span class="line">[root@docker02 web]# git commit -m <span class="string">&#x27;官网v2.0&#x27;</span></span><br><span class="line">[root@docker02 web]# git tag -a <span class="string">&#x27;v2&#x27;</span>  -m <span class="string">&quot;官网v2.0&quot;</span></span><br><span class="line">[root@docker02 web]# git push --all</span><br><span class="line">[root@docker02 web]# git push --tag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">代码不需要软连接了。已经容器部署了，代码可以随便删除</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240909172701792.png" alt="image-20240909172701792"></p><p><img src="../image/study_img/image-20240909224852871.png" alt="image-20240909224852871"></p><p><img src="../image/study_img/image-20240909224914742.png" alt="image-20240909224914742"></p><p><img src="../image/study_img/image-20240909224936189.png" alt="image-20240909224936189"></p><p><img src="../image/study_img/image-20240909225006620.png" alt="image-20240909225006620"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">harbor_ip=172.16.1.76</span><br><span class="line">project_name=<span class="string">&#x27;wordpress&#x27;</span></span><br><span class="line">pkg_name=<span class="string">&#x27;$&#123;harbor_ip&#125;/$&#123;project_name&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; <span class="variable">$&#123;WORKSPACE&#125;</span>/Dockerfile &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">FROM nginx:alpine</span></span><br><span class="line"><span class="string">#将网页代码复制到nginx的站点目录下</span></span><br><span class="line"><span class="string">COPY ./* /usr/share/nginx/html/</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进入工作目录构建镜像</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;WORKSPACE&#125;</span> &amp;&amp; \</span><br><span class="line">docker build -t <span class="variable">$&#123;pkg_name&#125;</span>/web-frestlye:<span class="variable">$&#123;git_tag&#125;</span> .</span><br><span class="line"><span class="comment">#打完镜像后推送到Harbor仓库</span></span><br><span class="line">docker push <span class="variable">$pkg_name</span>&#125;/web-frestlye:<span class="variable">$&#123;git_tag&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">deploy</span></span> () &#123;</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="variable">$@</span> ;<span class="keyword">do</span></span><br><span class="line"><span class="comment">#连接到web服务器把镜像从harbor拉下来,注意jenkins机器要和web免密</span></span><br><span class="line">ssh root@172.16.1.<span class="variable">$&#123;n&#125;</span> <span class="string">&quot;docker pull <span class="variable">$&#123;harbor_ip&#125;</span>/wordpress/web-frestlye:<span class="variable">$&#123;git_tag&#125;</span>&quot;</span></span><br><span class="line"><span class="comment">#删除之前旧的web镜像</span></span><br><span class="line">ssh root@172.16.1.<span class="variable">$&#123;n&#125;</span> <span class="string">&quot;docker rm -f web&quot;</span></span><br><span class="line"><span class="comment">#在web服务器部署nginx网页代码</span></span><br><span class="line">ssh root@172.16.1.<span class="variable">$&#123;n&#125;</span> <span class="string">&quot;docker run --name web -p 80:80 -d <span class="variable">$&#123;harbor_ip&#125;</span>/wordpress/web-frestlye:<span class="variable">$&#123;git_tag&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$env</span> <span class="keyword">in</span></span><br><span class="line">dev)</span><br><span class="line"><span class="comment">#给函数传参数 传递机器的ip</span></span><br><span class="line">   deploy 101</span><br><span class="line">   ;;</span><br><span class="line">prod)</span><br><span class="line">   deploy 103</span><br><span class="line">   ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240909225041225.png" alt="image-20240909225041225"></p><h3 id="6、jenkins容器构建代码上线——MAVEN项目构建"><strong>6、jenkins容器构建代码上线——MAVEN项目构建</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1、哪台机器需要部署java代码，到docker官网拉取tomcat</span><br><span class="line">docker pull tomcat:alpine </span><br><span class="line">需要先手动编译代码，下载maven</span><br><span class="line">yum -y install maven</span><br><span class="line"></span><br><span class="line">2、下载java代码helloword</span><br><span class="line"></span><br><span class="line">3、运行tmocat</span><br><span class="line">docker run -p 8080:8080 -d tomcat:alpine </span><br><span class="line"></span><br><span class="line">改Maven源。换成阿里云的源</span><br><span class="line">vim</span><br><span class="line"></span><br><span class="line">构建  构建完成之后会生成一个target目录</span><br><span class="line">maven pakage</span><br><span class="line"><span class="built_in">cd</span> target/hellowrd</span><br><span class="line">tar zcf hello-1.0.0.tgz</span><br><span class="line"></span><br><span class="line">vim Dockerfile</span><br><span class="line">FROM tomcat:alpine </span><br><span class="line">RUN <span class="built_in">rm</span> -rf /usr/local/tomcat/webapps/ROOT/*</span><br><span class="line">ADD hello-1.0.0.tgz /usr/local/tomcat/webapps/ROOT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker build -t 172.16.1.76/wordpress/hello:v1 .</span><br><span class="line">docker run -p 8080:8080 -d 172.16.1.76/wordpress/hello:v1</span><br><span class="line"></span><br><span class="line">目前访问的时候要加上目录，tomcat前面会加上nginx做代理，代理这个目录</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240909092954321.png" alt="image-20240909092954321"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#jenkins机器</span></span><br><span class="line">起宿主机把maven映射进去  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Jenkins时区不对，差8个小时，解决方案</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it -u root jenkins bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改容器时区</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&#x27;Asia/Shanghai&#x27;</span> &gt; /etc/timezone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看修改后的容器时区</span></span><br><span class="line"><span class="built_in">cat</span> /etc/timezone</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启jenkins容器</span></span><br><span class="line">docker restart jenkins</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果觉得Jenkins占用内存过大,我们可以采用下面的方式限制ienkins占用内存大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker限制内存大小</span></span><br><span class="line">docker update jenkins -m 3g --memory-swap -1</span><br><span class="line"></span><br><span class="line">--memory 或-m 限制容器的内存使用量</span><br><span class="line">--memory-swap 限制内存和swap的总和，不设置的话默认为--memory的两倍</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用容器化的jenkins部署代码，多种方法代码上线</summary>
    
    
    
    <category term="docker" scheme="https://www.fomal.cc/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>🍡五、Docker的图形化Portainer</title>
    <link href="https://www.fomal.cc/posts/812941c2.html"/>
    <id>https://www.fomal.cc/posts/812941c2.html</id>
    <published>2024-09-22T05:20:28.000Z</published>
    <updated>2024-10-02T07:55:10.638Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker的图形化Portainer">Docker的图形化Portainer</h3><p>启动Portainer     坡泰了</p><p>环境准备</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th></tr></thead><tbody><tr><td>elk1</td><td>10.0.0.76  /  172.16.1.76</td><td>图形化portainer</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@elk1 harbor]# docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock --restart=always --name portainer portainer/portainer</span><br><span class="line"></span><br><span class="line">2、浏览器访问</span><br><span class="line">http://10.0.0.76:9000/</span><br><span class="line"></span><br><span class="line">3、登录进去可能回提示portainer超时，需要重启</span><br><span class="line">[root@elk1 harbor]# docker restart  portainer</span><br><span class="line">portainer</span><br><span class="line"></span><br><span class="line">4、重启之后再访问页面，进去刷新，设置初始密码 12位的</span><br><span class="line">aaaaaa111111</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240906175708573.png" alt="image-20240906175708573"></p><p>5、查看本地的docker</p><p><img src="../image/study_img/image-20240906175929805.png" alt="image-20240906175929805"></p><p><img src="../image/study_img/image-20240906180028688.png" alt="image-20240906180028688"></p><p>此处可以启动容器</p><p><img src="../image/study_img/image-20240906180212414.png" alt="image-20240906180212414"></p><p>6、测试拉取一个镜像并启动</p><p><img src="../image/study_img/image-20240906180900453.png" alt="image-20240906180900453"></p><p><img src="../image/study_img/image-20240906180924462.png" alt="image-20240906180924462"></p><p>等待一会，显示拉取镜像并启动成功，跳转到容器启动的页面，并且在命令行主可以查看到已拉取成功，启动成功</p><p><img src="../image/study_img/image-20240906181242551.png" alt="image-20240906181242551"></p><p><img src="../image/study_img/image-20240906181309969.png" alt="image-20240906181309969"></p><p>7、查看所有镜像</p><p><img src="../image/study_img/image-20240906181607353.png" alt="image-20240906181607353"></p><p>8、测试拉取镜像</p><p><img src="../image/study_img/image-20240906181951743.png" alt="image-20240906181951743"></p><p>9、挂载目录的页面</p><p><img src="../image/study_img/image-20240906182154901.png" alt="image-20240906182154901"></p><p>10、事件的查看，哪个容器退出了，查看日志</p><p><img src="../image/study_img/image-20240906182246878.png" alt="image-20240906182246878"></p><p>12、查看物理机的信息</p><p><img src="../image/study_img/image-20240906182322538.png" alt="image-20240906182322538"></p><p>13、添加自己的镜像仓库。拉取容器的时候就去自己创建的仓库里面拉取</p><p><img src="../image/study_img/image-20240906182455490.png" alt="image-20240906182455490"></p><p><img src="../image/study_img/image-20240906182652673.png" alt="image-20240906182652673"></p><p>添加之后，如果想拉取自己仓库里面的容器，就这样选择</p><p><img src="../image/study_img/image-20240906182823018.png" alt="image-20240906182823018"></p><p>拉取harbor里面的容器</p><p><img src="../image/study_img/image-20240906182929405.png" alt="image-20240906182929405"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#portainer需要信任harbor的地址</span></span><br><span class="line">[root@elk1 harbor]# vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.1panel.live&quot;</span>, <span class="string">&quot;https://hub.rat.dev/&quot;</span>, <span class="string">&quot;https://docker.chenby.cn&quot;</span>, <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>],</span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://10.0.0.76&quot;</span>,<span class="string">&quot;http://172.16.1.101:5000&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@elk1 harbor]# systemctl restart docker</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240906183541971.png" alt="image-20240906183541971"></p><p>14、管理docker01 ~ 03机器的镜像</p><p><img src="../image/study_img/image-20240906183926754.png" alt="image-20240906183926754"></p><p><img src="../image/study_img/image-20240906184008628.png" alt="image-20240906184008628"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在想要管理的docker机器执行这个命令</span></span><br><span class="line">docker run -d \</span><br><span class="line">  -p 9001:9001 \</span><br><span class="line">  --name portainer_agent \</span><br><span class="line">  --restart=always \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -v /var/lib/docker/volumes:/var/lib/docker/volumes \</span><br><span class="line">  portainer/agent:2.16.2</span><br><span class="line">  </span><br><span class="line"><span class="comment">#重启docker</span></span><br><span class="line">  systemctl restart docker</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240906185043251.png" alt="image-20240906185043251"></p><p><img src="../image/study_img/image-20240906185302712.png" alt="image-20240906185302712"></p>]]></content>
    
    
    <summary type="html">部署Docker的图形化Portainer</summary>
    
    
    
    <category term="docker" scheme="https://www.fomal.cc/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>🍡四、docker的网络与Harbor镜像仓库</title>
    <link href="https://www.fomal.cc/posts/5c6d7d69.html"/>
    <id>https://www.fomal.cc/posts/5c6d7d69.html</id>
    <published>2024-09-22T05:07:23.000Z</published>
    <updated>2024-10-02T07:55:03.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker的网络与Harbor镜像仓库">docker的网络与Harbor镜像仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">101上起的容器和103上起的容器不能通信</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器的ip</span></span><br><span class="line"><span class="comment">#101起centos</span></span><br><span class="line">[root@docker01 ~]# docker run --<span class="built_in">link</span> mysql80 -it centos:7 /bin/bash</span><br><span class="line">[root@56db98b318bb /]# ping mysql80</span><br><span class="line">PING mysql80 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mysql80 (172.17.0.2): icmp_seq=1 ttl=64 time=0.271 ms</span><br><span class="line"></span><br><span class="line">mysql80容器的ip是：172.17.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment">#102起centos</span></span><br><span class="line">[root@bdc4ac174cb6 /]# ping 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line"></span><br><span class="line">可以发现是ping不通的，如果开启内核转，就可以通信，A虚拟机里面起的容器就与B虚拟机可以通信</span><br></pre></td></tr></table></figure><h3 id="1、Bridge桥接模式-docker-默认的网络模式"><strong>1、Bridge桥接模式  (docker 默认的网络模式)</strong></h3><p>Bridge：Docker设计的NAT网络模型 默认类型，类似于虚拟机里面的NAT模式</p><p><img src="../image/study_img/image-20240905150011381.png" alt="image-20240905150011381"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">你的容器桥接到docker0那个网卡，容器的网卡和docker0那个网卡在同一网段</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前虚拟机的网络类型</span></span><br><span class="line">[root@docker02 ~]# docker network <span class="built_in">ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">870935df49b1   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">a7fce1fe694d   host      host      <span class="built_in">local</span></span><br><span class="line">d7fe2c2b78e7   none      null      <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看桥接模式的详细信息</span></span><br><span class="line">[root@docker01 ~]# docker network inspect bridge</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装bridge-utils 查看</span></span><br><span class="line">[root@docker01 ~]# brctl show</span><br><span class="line">bridge name bridge <span class="built_in">id</span> STP enabled interfaces</span><br><span class="line">docker0 8000.0242eca7bc4c no</span><br><span class="line"></span><br><span class="line"><span class="comment">#调试网络专用镜像</span></span><br><span class="line">[root@docker01 ~]# docker run -it -d  busybox  /bin/sh</span><br><span class="line"></span><br><span class="line">公司有规定 内网的ip规定192或者168的网段</span><br><span class="line"><span class="comment">#修改桥接模式的网段</span></span><br><span class="line">方法1：修改docker的启动脚本</span><br><span class="line">[root@docker01 ~]# vim /lib/systemd/system/docker.service</span><br><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line">--bip=192.168.10.1/24</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# systemctl daemon-reload</span><br><span class="line">[root@docker01 ~]# systemctl restart docker</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# docker run -it busybox /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0 Link encap:Ethernet HWaddr 02:42:C0:A8:0A:03</span><br><span class="line">     inet addr:192.168.10.3 Bcast:192.168.10.255 Mask:255.255.255.0</span><br><span class="line">     UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1</span><br><span class="line">     RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">     collisions:0 txqueuelen:0</span><br><span class="line">     RX bytes:656 (656.0 B) TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">[root@docker02 ~]# docker run -it busybox /bin/sh</span><br><span class="line"><span class="comment">#这个是专门的网络工具，网络相关的命令都支持</span></span><br><span class="line"></span><br><span class="line">方法2：修改docker的配置文件</span><br><span class="line">[root@docker01 ~]# vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;bip&quot;</span>: <span class="string">&quot;192.168.30.1/24&quot;</span>,</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.1panel.live&quot;</span>,<span class="string">&quot;https://hub.rat.dev/&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://docker.chenby.cn&quot;</span>, <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">## 或者</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.1panel.live&quot;</span>,<span class="string">&quot;https://hub.rat.dev/&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://docker.chenby.cn&quot;</span>, <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>],</span><br><span class="line"><span class="string">&quot;bip&quot;</span>: <span class="string">&quot;192.168.30.1/24&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# systemctl daemon-reload</span><br><span class="line">[root@docker01 ~]# systemctl restart docker</span><br><span class="line">[root@docker01 ~]# docker run -it busybox /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0 Link encap:Ethernet HWaddr 02:42:C0:A8:14:03</span><br><span class="line">     inet addr:192.168.20.3 Bcast:192.168.20.255 Mask:255.255.255.0</span><br><span class="line">     UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1</span><br><span class="line">     RX packets:6 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">     collisions:0 txqueuelen:0</span><br><span class="line">     RX bytes:516 (516.0 B) TX bytes:0 (0.0 B)</span><br><span class="line">     </span><br><span class="line">这样子就可以定义容器的网段了</span><br></pre></td></tr></table></figure><h3 id="2、Host模式">**2、Host模式   **</h3><p>host：与宿主机共享Network Namespace，–network=host 性能最高</p><p><img src="../image/study_img/image-20240905151204236.png" alt="image-20240905151204236"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]# docker run --network=host -d nginx:alpine</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# docker run -it --network=host nginx:alpine /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">docker0 Link encap:Ethernet HWaddr 02:42:77:C6:BE:B9</span><br><span class="line">        inet addr:192.168.20.1 Bcast:192.168.20.255 Mask:255.255.255.0</span><br><span class="line">        inet6 addr: fe80::42:77ff:fec6:beb9/64 Scope:Link</span><br><span class="line">        UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1</span><br><span class="line">        RX packets:3150 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">        TX packets:2794 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">        collisions:0 txqueuelen:0</span><br><span class="line">        RX bytes:7792958 (7.4 MiB) TX bytes:1119887 (1.0 MiB)</span><br><span class="line"></span><br><span class="line">eth0    Link encap:Ethernet HWaddr 00:0C:29:1A:2F:80</span><br><span class="line">        inet addr:10.0.0.101 Bcast:10.0.0.255 Mask:255.255.255.0</span><br><span class="line">        inet6 addr: fe80::20c:29ff:fe1a:2f80/64 Scope:Link</span><br><span class="line"></span><br><span class="line">和主机共享网卡的模式，一般起容器不会用到这个模式</span><br></pre></td></tr></table></figure><h3 id="3、container模式"><strong>3、container模式</strong></h3><p>Container：与另一个运行中的容器共享Network Namespace，–net=container:containerID（K8S）</p><p><img src="../image/study_img/image-20240905114345031.png" alt="image-20240905114345031"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]# docker run -it busybox /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0 Link encap:Ethernet HWaddr 02:42:C0:A8:14:03</span><br><span class="line">     inet addr:192.168.20.3 Bcast:192.168.20.255 Mask:255.255.255.0</span><br><span class="line">     UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1</span><br><span class="line">     RX packets:6 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">     collisions:0 txqueuelen:0</span><br><span class="line">     RX bytes:516 (516.0 B) TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# docker run -it --network=container:763cd9e2da94 centos:7 /bin/bash</span><br><span class="line">[root@docker01 ~]# docker run -it --network=container:763cd9e2da94 nginx:alpine /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0 Link encap:Ethernet HWaddr 02:42:C0:A8:14:03</span><br><span class="line">     inet addr:192.168.20.3 Bcast:192.168.20.255 Mask:255.255.255.0</span><br><span class="line">     UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1</span><br><span class="line">     RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">     collisions:0 txqueuelen:0</span><br><span class="line">     RX bytes:656 (656.0 B) TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure><h3 id="4、None模式"><strong>4、None模式</strong></h3><p>None:不为客器配置任何网络功能，–net=none   没有网络的模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">启动的时候指定  </span><br><span class="line">[root@docker01 ~]# docker run -it --network=none busybox /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">lo   Link encap:Local Loopback</span><br><span class="line">     inet addr:127.0.0.1 Mask:255.0.0.0</span><br><span class="line">     inet6 addr: ::1/128 Scope:Host</span><br><span class="line">     UP LOOPBACK RUNNING MTU:65536 Metric:1</span><br><span class="line">     RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">     collisions:0 txqueuelen:1000</span><br><span class="line">     RX bytes:0 (0.0 B) TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240905113318250.png" alt="image-20240905113318250"></p><h3 id="5、Docker自定义网络模式"><strong>5、Docker自定义网络模式</strong></h3><p>基于以上4种模式创建网络</p><p><img src="../image/study_img/image-20240905113509543.png" alt="image-20240905113509543"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自定义网络</span></span><br><span class="line">docker network create -d &lt;mode&gt; --subnet &lt;CIDR&gt; --gateway &lt;网关&gt; &lt;自定义网路名称&gt;</span><br><span class="line">创建</span><br><span class="line">docker network create -d bridge --subnet 192.168.100.0/24 --gateway 192.168.100.1 abc-net</span><br><span class="line"></span><br><span class="line"><span class="comment">## 引用自定义网络</span></span><br><span class="line">[root@docker01 ~]# docker run -it --network=abc-net busybox /bin/sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">就相当于创建了一个交换机</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除自定义网络</span></span><br><span class="line">[root@docker01 ~]# docker network <span class="built_in">ls</span></span><br><span class="line">NETWORK ID NAME DRIVER SCOPE</span><br><span class="line">2b0a232f6643 bridge bridge <span class="built_in">local</span></span><br><span class="line">168f91213e19 host host <span class="built_in">local</span></span><br><span class="line">4de4c2edcb74 none null <span class="built_in">local</span></span><br><span class="line">7a7b8742e475 abc-net bridge <span class="built_in">local</span></span><br><span class="line">[root@docker01 ~]# docker network <span class="built_in">rm</span> abc-net</span><br><span class="line">abc-net</span><br><span class="line">[root@docker01 ~]# docker network <span class="built_in">ls</span></span><br><span class="line">NETWORK ID NAME DRIVER SCOPE</span><br><span class="line">2b0a232f6643 bridge bridge <span class="built_in">local</span></span><br><span class="line">168f91213e19 host host <span class="built_in">local</span></span><br><span class="line">4de4c2edcb74 none null <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">创建了网络就创建了一个桥接的网卡，相当于一个网卡就是一个交换机</span><br><span class="line">docker默认就是bridge模式，当有不同的·项目就要自己创建一个网络，把不同项目的主机放到这个模式里面</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240905113639559.png" alt="image-20240905113639559"></p><h3 id="6、Docker私有创建Harbor">6、<strong>Docker私有创建Harbor</strong></h3><p>Harbor 是为企业用户设计的容器镜像仓库开源项目，包括了权限管理(RBAC)、+DAP、审计、安全漏洞扫描、镜像验真、管理界面、自我注册、HA 等企业必需的功能，同时针对中国用户的特点，设计镜像复制和中文支持等功舱   <a href="https://goharbor.io/">https://goharbor.io/</a></p><p>环境准备</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th></tr></thead><tbody><tr><td>elk1</td><td>10.0.0.76  /  172.16.1.76</td><td>Harbor图形化仓库</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">harbor 图形化界面的  https://goharbor.io/</span><br><span class="line">registry 命令行操作的</span><br><span class="line"></span><br><span class="line">下载harbor带offline标签的，所有的镜像，安装包里面都在一起的所以比较大</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、#安装docker环境</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-7-anon.repo</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">sed -i <span class="string">&quot;s@http://mirrors.aliyun.com@https://mirrors.huaweicloud.com@g&quot;</span> /etc/yum.repos.d/epel.repo</span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/docker-ce.repo &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[docker-ce-stable]</span></span><br><span class="line"><span class="string">name=Docker CE Stable - $basearch</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.huaweicloud.com/docker-ce/linux/centos/7/x86_64/stable</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.huaweicloud.com/docker-ce/linux/centos/gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sed -i <span class="string">&#x27;s+download.docker.com+mirrors.huaweicloud.com/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;：[&quot;https://docker.1panel.live&quot;,&quot;https://hub.rat.dev/&quot;,&quot;https://docker.chenby.cn&quot;, &quot;https://docker.m.daocloud.io&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.下载harbor</span><br><span class="line">[root@harbor ~]# wget https://github.com/goharbor/harbor/releases/download/v2.11.1/harbor-offline-installer-v2.11.1.tgz</span><br><span class="line"></span><br><span class="line"> 3.解压</span><br><span class="line">[root@harbor ~]# tar xf harbor-offline-installer-v2.11.1.tgz </span><br><span class="line"></span><br><span class="line">4.进入harbor目录</span><br><span class="line">[root@harbor harbor]# <span class="built_in">cd</span> /root/harbor/</span><br><span class="line">[root@elk1 harbor]# ll</span><br><span class="line">total 646848</span><br><span class="line">-rw-r--r-- 1 root root      3646 Aug 15 18:07 common.sh</span><br><span class="line">-rw-r--r-- 1 root root 662330539 Aug 15 18:07 harbor.v2.11.1.tar.gz#harbor的所有镜像</span><br><span class="line">-rw-r--r-- 1 root root     14270 Aug 15 18:07 harbor.yml.tmpl</span><br><span class="line">-rwxr-xr-x 1 root root      1975 Aug 15 18:07 install.sh</span><br><span class="line">-rw-r--r-- 1 root root     11347 Aug 15 18:07 LICENSE</span><br><span class="line">-rwxr-xr-x 1 root root      1882 Aug 15 18:07 prepare</span><br><span class="line"></span><br><span class="line">5.改配置文件名</span><br><span class="line">[root@harbor harbor]# <span class="built_in">cp</span> /root/harbor/harbor.yml.tmpl /root/harbor/harbor.yml</span><br><span class="line"></span><br><span class="line">6.修改配置文件 (注释HTTPS的配置)</span><br><span class="line">[root@harbor harbor]# vim harbor.yml</span><br><span class="line">第5行 改成当前主机的ip</span><br><span class="line">hostname: 10.0.0.105</span><br><span class="line">47行：先记录harbor的密码</span><br><span class="line">harbor_admin_password: Harbor12345</span><br><span class="line"></span><br><span class="line">7.执行安装脚本</span><br><span class="line">[root@harbor harbor]# ./install.sh</span><br><span class="line">✔ ----Harbor has been installed and started successfully.----#出现这个就安装成功</span><br><span class="line"></span><br><span class="line">[root@harbor harbor]# docker images</span><br><span class="line">会看到harbor自动安装的镜像</span><br><span class="line">[root@harbor harbor]# netstat -lntup</span><br><span class="line">会看到80端口</span><br><span class="line"></span><br><span class="line">8、浏览器访问当前主机的IP</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240905171032747.png" alt="image-20240905171032747"></p><p>1、创建项目     -1 就是无限大</p><p><img src="../image/study_img/image-20240905171320050.png" alt="image-20240905171320050"></p><p>2、上传镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上传镜像的需求</span></span><br><span class="line">需要修改镜像名称：命名规则</span><br><span class="line">harbor的IP地址/项目名称/镜像名称:标签</span><br><span class="line"></span><br><span class="line">1、将镜像重新命名</span><br><span class="line">[root@docker02 ~]# docker tag wordpress:v7 10.0.0.76/wordpress/wordpress:v7</span><br><span class="line"></span><br><span class="line">2、推送镜像  报错</span><br><span class="line">[root@docker02 ~]# docker push 10.0.0.76/wordpress/wordpress:v7</span><br><span class="line">The push refers to repository [10.0.0.76/wordpress/wordpress]</span><br><span class="line">Get <span class="string">&quot;https://10.0.0.76/v2/&quot;</span>: dial tcp 10.0.0.76:443: connect: connection refused</span><br><span class="line">原因是没有信任不安全的连接</span><br><span class="line"></span><br><span class="line">3、修改docker配置文件，添加信任不安全的镜像仓库配置</span><br><span class="line">[root@docker02 ~]# vim /etc/docker/daemon.json </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.1panel.live&quot;</span>, <span class="string">&quot;https://hub.rat.dev/&quot;</span>, <span class="string">&quot;https://docker.chenby.cn&quot;</span>, <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>],</span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://10.0.0.76&quot;</span>]#就是加这个配置，注意，需要在上一行结束位置加,逗号</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">重启docker</span><br><span class="line">[root@docker02 ~]# systemctl restart docker</span><br><span class="line"></span><br><span class="line">4、再次推送 报错</span><br><span class="line">[root@docker02 ~]# docker push 10.0.0.76/wordpress/wordpress:v7</span><br><span class="line">unauthorized: unauthorized to access repository: wordpress/wordpress, action: push: unauthorized to access repository: wordpress/wordpress, action: push</span><br><span class="line">仓库没有做认证</span><br><span class="line"></span><br><span class="line">5、命令行登录Harbor进行认证</span><br><span class="line">[root@docker02 ~]# docker login 10.0.0.76</span><br><span class="line">Username: admin</span><br><span class="line">Password:  <span class="comment">#密码：Harbor12345</span></span><br><span class="line">......</span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line">6、这次推送镜像成功，进入web页面，刷新一下查看</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240905173214933.png" alt="image-20240905173214933"></p><p><img src="../image/study_img/image-20240905173246328.png" alt="image-20240905173246328"></p><p><img src="../image/study_img/image-20240905173324730.png" alt="image-20240905173324730"></p><p>3、下载Harbor仓库里面的镜像</p><p><img src="../image/study_img/image-20240905181051876.png" alt="image-20240905181051876"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">使用10.0.0.101下载镜像</span><br><span class="line"><span class="comment">#10.0.0.101操作如下</span></span><br><span class="line">1、修改docker配置文件，添加信任不安全的镜像仓库配置</span><br><span class="line">[root@docker01 ~]# vim /etc/docker/daemon.json </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.1panel.live&quot;</span>, <span class="string">&quot;https://hub.rat.dev/&quot;</span>, <span class="string">&quot;https://docker.chenby.cn&quot;</span>, <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>],</span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://10.0.0.76&quot;</span>]#就是加这个配置，注意，需要在上一行结束位置加,逗号</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# systemctl restart docker</span><br><span class="line"></span><br><span class="line">2、登录harbor</span><br><span class="line">[root@docker01 ~]# docker login 10.0.0.76</span><br><span class="line">Username: admin</span><br><span class="line">Password:  <span class="comment">#密码：Harbor12345</span></span><br><span class="line">......</span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line">3、下载镜像</span><br><span class="line">[root@docker01 ~]# docker pull 10.0.0.76/wordpress/wordpress@sha256:c23f172bdd40059652c0a45affd4c0d1740fa8578c56e0209316e43516560050</span><br><span class="line">或者</span><br><span class="line">[root@docker01 ~]# docker pull 10.0.0.76/wordpress/wordpress:v7</span><br></pre></td></tr></table></figure><h3 id="7、镜像仓库registry">7、<strong>镜像仓库registry</strong></h3><p>环境准备</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th></tr></thead><tbody><tr><td>docker01</td><td>10.0.0.101  /  172.16.1.101</td><td>registry命令行仓库</td></tr></tbody></table><p>1、使用10.0.0.101地址的机器搭建仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、搭建仓库</span><br><span class="line">[root@docker01 ~]# docker run -d -p 5000:5000 --restart=always --name registry -v /opt/myregistry:/var/lib/registry registry</span><br><span class="line"></span><br><span class="line">[root@docker01 wordpress]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS         PORTS                                                  NAMES</span><br><span class="line">356673cd10da   registry          <span class="string">&quot;/entrypoint.sh /etc…&quot;</span>   11 seconds ago   Up 9 seconds   0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp              registry</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个是http的80端口，一般在企业中，会在他前面加nginx代理，用nginx80代理他的5000端口，nginx上配置域名或者ip</span></span><br><span class="line">regsitry做集群可以挂载这个目录/opt/myregistry/docker/registry/v2/repositories/</span><br><span class="line"></span><br><span class="line">Harbor：他本来就是http,如果想给harbor做集群,可以多起几个harbor,前面加个负载均衡，虽然数据不是统一的数据，可以使用NFS挂载，nginx负载均衡可以解决数据统一的问题，一台上面安装rsync，其他2台实时同步也可以，所有机器都要安装rsync,seysync</span><br><span class="line"></span><br><span class="line">registry可以使用nginx代理</span><br><span class="line">habor不可以使用nginx代理</span><br></pre></td></tr></table></figure><p>2、上传镜像到仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1、给镜像打tag标签，要写全仓库地址    地址:端口/镜像名:版本号</span><br><span class="line">[root@docker02 ~]# docker tag wordpress-manual:v1 172.16.1.101:5000/wordpress-manual:v1</span><br><span class="line">[root@docker02 ~]# docker tag nginx:alpine 172.16.1.101:5000/nginx:alpine</span><br><span class="line">[root@docker02 ~]# docker tag busybox:latest  172.16.1.101:5000/busybox:latest</span><br><span class="line"></span><br><span class="line">2、其他机器需要将代码上传到仓库的机器配置文件，改机器就要信任仓库地址</span><br><span class="line">[root@docker03 ~]# vim /etc/docker/daemon.json </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.1panel.live&quot;</span>, <span class="string">&quot;https://hub.rat.dev/&quot;</span>, <span class="string">&quot;https://docker.chenby.cn&quot;</span>, <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>],</span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://10.0.0.76&quot;</span>,<span class="string">&quot;http://172.16.1.101:5000&quot;</span>]#就是加这个配置，注意，需要在上一行结束位置加,逗号，地址写内外推送会比较快，如果写内外，命名就要用内外命名</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3、重启Docker</span><br><span class="line">[root@docker03 ~]# systemctl restart docker</span><br><span class="line"></span><br><span class="line">4、推送镜像</span><br><span class="line">[root@docker02 ~]# docker push 172.16.1.101:5000/wordpress-manual:v1</span><br><span class="line">[root@docker02 ~]# docker push 172.16.1.101:5000/nginx:alpine</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、查看私有查看镜像列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1、随便在哪台机器查看都行，只要和registre查看的机器通，查看所有镜像仓库</span><br><span class="line">[root@docker02 ~]# curl http://172.16.1.101:5000/v2/_catalog</span><br><span class="line">&#123;<span class="string">&quot;repositories&quot;</span>:[<span class="string">&quot;busybox&quot;</span>,<span class="string">&quot;nginx&quot;</span>,<span class="string">&quot;wordpress-manual&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">2、查看指定仓库的tag标签</span><br><span class="line">[root@docker02 ~]# curl http://172.16.1.101:5000/v2/nginx/tags/list</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;nginx&quot;</span>,<span class="string">&quot;tags&quot;</span>:[<span class="string">&quot;alpine&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">3、格式化输出json格式信息</span><br><span class="line">[root@docker02 ~]# yum -y install jq</span><br><span class="line">[root@docker02 ~]#  curl -s http://172.16.1.101:5000/v2/_catalog|jq</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;repositories&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;busybox&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nginx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;wordpress-manual&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、删除私有仓库中的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1、查看映射的目录</span><br><span class="line">[root@docker01 ~]# docker inspect registry</span><br><span class="line">        <span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/opt/myregistry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/var/lib/registry&quot;</span>,</span><br><span class="line"></span><br><span class="line">2、查看/opt/myregistry目录下的文件，可以看到上传到的镜像</span><br><span class="line">[root@docker01 ~]# ll /opt/myregistry/docker/registry/v2/repositories/</span><br><span class="line">drwxr-xr-x 5 root root 55 Sep  6 16:40 busybox</span><br><span class="line">drwxr-xr-x 5 root root 55 Sep  6 16:32 nginx</span><br><span class="line">drwxr-xr-x 5 root root 55 Sep  6 16:17 wordpress-manual</span><br><span class="line"></span><br><span class="line">3、由于做了映射，就不需要连到容器里面，直接在宿主机上删除</span><br><span class="line">[root@docker01 ~]# <span class="built_in">rm</span> -rf /opt/myregistry/docker/registry/v2/repositories/busybox</span><br><span class="line">[root@docker01 ~]# ll /opt/myregistry/docker/registry/v2/repositories/</span><br><span class="line">drwxr-xr-x 5 root root 55 Sep  6 16:32 nginx</span><br><span class="line">drwxr-xr-x 5 root root 55 Sep  6 16:17 wordpress-manual</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# curl -s http://172.16.1.101:5000/v2/_catalog|jq</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;repositories&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;nginx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;wordpress-manual&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">4、查看是否生成blob二进制文件，如果有就删除，没有生成就不用管</span><br><span class="line">[root@docker01 ~]# ll /etc/docker</span><br><span class="line">-rw-r--r-- 1 root root 219 Sep  6 16:52 daemon.json</span><br><span class="line"></span><br><span class="line">删除方法：</span><br><span class="line">registry garbage-collect /etc/docker/registry/config.yml</span><br></pre></td></tr></table></figure><p>5、拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker03 ~]# docker pull 172.16.1.101:5000/wordpress-manual:v1</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">汇总docker的网络的模式，部署图形化的镜像仓库Harbor，对仓库进行一些基本操作；部署命令行的私有仓库registry</summary>
    
    
    
    <category term="docker" scheme="https://www.fomal.cc/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>🍡三、Docker制作镜像</title>
    <link href="https://www.fomal.cc/posts/eb54e23d.html"/>
    <id>https://www.fomal.cc/posts/eb54e23d.html</id>
    <published>2024-09-22T05:00:48.000Z</published>
    <updated>2024-10-02T07:54:37.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker制作镜像">Docker制作镜像</h2><p>Docker 容器操作的选项</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>–name</td><td>自定义容器名</td></tr><tr><td>-d</td><td>将容器放后台启动</td></tr><tr><td>-it   (input   TTY)</td><td>分配一个交互式的终端</td></tr><tr><td>-p</td><td>端口映射</td></tr><tr><td>-P</td><td>映射随机端口</td></tr><tr><td>-v</td><td>数据卷映射</td></tr><tr><td>-e</td><td>env  指定环境变量</td></tr><tr><td>–restart=always</td><td>设置容器开机自启，docker启动就跟着自动启动</td></tr><tr><td>–link=mysql57</td><td>指定另一个容器的名字，就可以和指定的容器通信</td></tr></tbody></table><p>运行mysql容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">1、拉取mysql5.7.44镜像</span><br><span class="line">root@docker01 ~]# docker pull mysql:5.7.44</span><br><span class="line"></span><br><span class="line">2、查看工作目录和端口</span><br><span class="line">[root@docker01 ~]# docker inspect mysql:5.7.44</span><br><span class="line">            <span class="string">&quot;ExposedPorts&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;3306/tcp&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;33060/tcp&quot;</span>: &#123;&#125;</span><br><span class="line">                </span><br><span class="line">            <span class="string">&quot;Volumes&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;/var/lib/mysql&quot;</span>: &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#环境变量</span></span><br><span class="line"><span class="comment">#root密码</span></span><br><span class="line">MYSQL_ROOT_PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建库</span></span><br><span class="line">MYSQL_DATABASE</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建用户</span></span><br><span class="line">MYSQL_USER</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建普通用户的密码</span></span><br><span class="line">MYSQL_PASSWORD</span><br><span class="line"></span><br><span class="line">2、运行镜像</span><br><span class="line">docker run \</span><br><span class="line">--name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=wordpress \</span><br><span class="line">-e MYSQL_USER=wp_user \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:5.7.44</span><br><span class="line"></span><br><span class="line">-v <span class="comment">#映射配置文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">-name some-mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=my-secret-pw \</span><br><span class="line">-d mysql:tag \</span><br><span class="line">--character-set-server=utf8mb4 \</span><br><span class="line">--collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">--name wp \</span><br><span class="line">--<span class="built_in">link</span> mysql57 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-v /data/wp:/var/www/html \</span><br><span class="line">-e WORDPRESS_DB_HOST=mysql57 \</span><br><span class="line">-e WORDPRESS_DB_USER=wp_user \</span><br><span class="line">-e WORDPRESS_DB_PASSWORD=123 \</span><br><span class="line">-e WORDPRESS_DB_NAME=wordpress \</span><br><span class="line">-d wordpress</span><br><span class="line">一般都是创建普通用户，做了端口映射宿主机也能连接</span><br><span class="line"></span><br><span class="line">3、连接进去</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">exec</span> -it eedc00b /bin/bash</span><br><span class="line">bash-4.2# </span><br><span class="line">bash-4.2# mysql -uroot -p123</span><br><span class="line"></span><br><span class="line">4、查看创建的库和用户</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| wordpress          |</span><br><span class="line">+--------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> user,host from mysql.user;</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| user          | host      |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| root          | %         |</span><br><span class="line">| wp_user       | %         | <span class="comment">#容器的ip是内外ip,不把端口映射到宿主机上就没事</span></span><br><span class="line">| mysql.session | localhost |</span><br><span class="line">| mysql.sys     | localhost |</span><br><span class="line">| root          | localhost |</span><br><span class="line">+---------------+-----------+</span><br><span class="line"></span><br><span class="line">mysql&gt; show grants <span class="keyword">for</span> wp_user@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">+--------------------------------------------------------+</span><br><span class="line">| Grants <span class="keyword">for</span> wp_user@%                                   |</span><br><span class="line">+--------------------------------------------------------+</span><br><span class="line">| GRANT USAGE ON *.* TO <span class="string">&#x27;wp_user&#x27;</span>@<span class="string">&#x27;%&#x27;</span>                    |</span><br><span class="line">| GRANT ALL PRIVILEGES ON `wordpress`.* TO <span class="string">&#x27;wp_user&#x27;</span>@<span class="string">&#x27;%&#x27;</span> |</span><br><span class="line">+--------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">4、映射的目录里面有数据</span><br><span class="line">[root@docker01 ~]# ll /data/mysql/</span><br></pre></td></tr></table></figure><h3 id="1、手动制作WordPress镜像">1、<strong>手动制作WordPress镜像</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">1、下载wordpress代码包</span><br><span class="line">[root@docker01 ~]# wget https://cn.wordpress.org/wordpress-5.9.10-zh_CN.tar.gz</span><br><span class="line"></span><br><span class="line">2、运行一个基础容器</span><br><span class="line">[root@docker01 ~]# docker run --name wp_base -it  centos:7 /bin/bash</span><br><span class="line"></span><br><span class="line">3、换源</span><br><span class="line">[root@3dcd1060f3ab /]#  curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-7-anon.repo</span><br><span class="line">[root@3dcd1060f3ab /]#  curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">[root@3dcd1060f3ab /]#sed -i <span class="string">&quot;s@http://mirrors.aliyun.com@https://mirrors.huaweicloud.com@g&quot;</span> /etc/yum.repos.d/epel.repo</span><br><span class="line"></span><br><span class="line">4、换php源</span><br><span class="line">[root@3dcd1060f3ab /]# <span class="built_in">cat</span> &gt; /etc/yum.repos.d/php.repo &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[php-webtatic]</span></span><br><span class="line"><span class="string">name = PHP Repository</span></span><br><span class="line"><span class="string">baseurl = http://us-east.repo.webtatic.com/yum/el7/x86_64/</span></span><br><span class="line"><span class="string">gpgcheck = 0</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> -e  <span class="string">&quot;[php-webtatic]\nname = PHP Repository\nbaseurl = http://us-east.repo.webtatic.com/yum/el7/x86_64/\ngpgcheck = 0&quot;</span>&gt; /etc/yum.repos.d/php.repo</span><br><span class="line"></span><br><span class="line">5、安装php、mysql、nginx</span><br><span class="line">[root@nginx ~]# yum -y install php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache php71w-pecl-memcached php71w-pecl-redis php71w-pecl-mongodb mariadb-server nginx</span><br><span class="line"></span><br><span class="line">6、创建nginx启动用户</span><br><span class="line">[root@3dcd1060f3ab code]# groupadd -g 666 www</span><br><span class="line">[root@3dcd1060f3ab code]# useradd -u 666 -g 666 -s /sbin/nologin -M www</span><br><span class="line"></span><br><span class="line">7、优化nginx  php 统一用户</span><br><span class="line">主配置文件   (如果是nginxX官方源下载的nginx，就不用优化)</span><br><span class="line">[root@3dcd1060f3ab /]# vi /etc/nginx/nginx.conf</span><br><span class="line">user www;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 4096;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@3dcd1060f3ab ~]# sed -i <span class="string">&#x27;s#user = apache#user = www#g&#x27;</span> /etc/php-fpm.d/www.conf</span><br><span class="line">[root@3dcd1060f3ab ~]# sed -i <span class="string">&#x27;s#group = apache#group = www#g&#x27;</span> /etc/php-fpm.d/www.conf </span><br><span class="line"></span><br><span class="line">8、编写网站主配置文件</span><br><span class="line">[root@3dcd1060f3ab /]# vi /etc/nginx/conf.d/wp.conf</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name _;</span><br><span class="line">        root /code/wordpress;</span><br><span class="line">        index index.php index.html;</span><br><span class="line">        </span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">             fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">             fastcgi_param SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">             include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">9、创建站点目录，宿主机新开窗口上传代码到站点目录，并解压，授权</span><br><span class="line">[root@3dcd1060f3ab /]# <span class="built_in">mkdir</span> /code</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">cp</span> wordpress-5.9.10.tar.gz  wp_base:/code</span><br><span class="line"></span><br><span class="line">[root@3dcd1060f3ab /]# <span class="built_in">cd</span> /code</span><br><span class="line">[root@3dcd1060f3ab code]# tar xf wordpress-5.9.10.tar.gz </span><br><span class="line">[root@3dcd1060f3ab code]# <span class="built_in">chown</span> -R  www.www /code/</span><br><span class="line"></span><br><span class="line">10、启动数据库</span><br><span class="line">虽然是不能systemd启动，但是mariadb的启动脚本还是在的</span><br><span class="line">[root@3dcd1060f3ab code]# <span class="built_in">cat</span> /usr/lib/systemd/system/mariadb.service </span><br><span class="line"> 35行：启动之前要做初始化，找到初始化命令 </span><br><span class="line"> ExecStartPre=/usr/libexec/mariadb-prepare-db-dir %n</span><br><span class="line"> 38行：启动命令</span><br><span class="line"> ExecStart=/usr/bin/mysqld_safe --basedir=/usr   (可以卡主)</span><br><span class="line"> </span><br><span class="line"> [root@3dcd1060f3ab code]# /usr/libexec/mariadb-prepare-db-dir %n</span><br><span class="line"> [root@3dcd1060f3ab code]# /usr/bin/mysqld_safe --basedir=/usr &amp;</span><br><span class="line"> </span><br><span class="line"> 11、进去数据库创建库 用户</span><br><span class="line">[root@3dcd1060f3ab code]# mysql</span><br><span class="line">MariaDB [(none)]&gt; create database wordpress;</span><br><span class="line">MariaDB [(none)]&gt; grant all on *.* to wp_user@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">12、测试用户是否可以连接</span><br><span class="line">[root@3dcd1060f3ab code]# mysql -uwp_user -p123 -h127.0.0.1</span><br><span class="line"></span><br><span class="line">13、启动nginx</span><br><span class="line">[root@3dcd1060f3ab code]# nginx</span><br><span class="line"></span><br><span class="line">14、启动php</span><br><span class="line">找到启动脚本里面的启动命令</span><br><span class="line">[root@3dcd1060f3ab code]# vi /usr/lib/systemd/system/php-fpm.service </span><br><span class="line"> 9行</span><br><span class="line"> ExecStart=/usr/sbin/php-fpm --nodaemonize --fpm-config /etc/php-fpm.conf</span><br><span class="line"> </span><br><span class="line"> --nodaemonize：可以卡住，不加就放后台</span><br><span class="line">[root@3dcd1060f3ab code]# /usr/sbin/php-fpm  --fpm-config /etc/php-fpm.conf</span><br><span class="line"> </span><br><span class="line"> 15、curl一下，能够正常访问</span><br><span class="line"> [root@3dcd1060f3ab code]# curl -L 127.0.0.1</span><br><span class="line"> ....</span><br><span class="line"> &lt;p&gt;Welcome to WordPress. Before getting started, we need some information on the database. You will need to know the following items before proceeding.&lt;/p&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">        &lt;li&gt;Database name&lt;/li&gt;     <span class="comment">#填写数据库信息的页面</span></span><br><span class="line">        &lt;li&gt;Database username&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;Database password&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;Database host&lt;/li&gt;</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">16、将3个服务写脚本启动，就不用一个一个启动了</span><br><span class="line">[root@3dcd1060f3ab code]# <span class="built_in">cd</span> ~</span><br><span class="line">[root@3dcd1060f3ab ~]# vi start.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">/sbin/nginx</span><br><span class="line">/usr/sbin/php-fpm  --fpm-config /etc/php-fpm.conf</span><br><span class="line"><span class="comment">#脚本里面需要卡主一个就可以，把mysql卡住</span></span><br><span class="line">/usr/bin/mysqld_safe --basedir=/usr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">17、输入此时可以打包了，但是打包出来的镜像很大，需要优化一下</span><br><span class="line">[root@3dcd1060f3ab ~]# <span class="built_in">rm</span> -rf /code/wordpress-5.9.10.tar.gz</span><br><span class="line">[root@3dcd1060f3ab ~]# yum clean all</span><br><span class="line">删除所有yum源，以后用不到的，这个就是wordpress</span><br><span class="line">[root@3dcd1060f3ab ~]# <span class="built_in">rm</span> -rf /etc/yum.repos.d/* </span><br><span class="line">如果有下载wget下载东西，都要卸载掉，以后用不到的</span><br><span class="line"></span><br><span class="line">18、打开新窗口，将容器打包</span><br><span class="line">[root@docker01 ~]# docker commit wp_base wordpress:v1</span><br><span class="line">[root@docker01 ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">wordpress    v1        26586db1eda4   9 seconds ago   615MB</span><br><span class="line"></span><br><span class="line">19、运行这个容器，测试是否能够在网页里面访问</span><br><span class="line">[root@docker01 ~]# docker run -p 80:80 -d wordpress:v1  /bin/sh ~/start.sh</span><br><span class="line">脚本在容器里面的绝对路径</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS        PORTS                               NAMES</span><br><span class="line">720febe29da7   wordpress:v1   <span class="string">&quot;/bin/sh /root/start…&quot;</span>   2 seconds ago   Up 1 second   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   hopeful_wing</span><br><span class="line"></span><br><span class="line">20、浏览器访问10.0.0.101</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240904155106974.png" alt="image-20240904155106974"></p><p><img src="../image/study_img/image-20240905192409386.png" alt="image-20240905192409386"></p><p><img src="../image/study_img/image-20240904160154137.png" alt="image-20240904160154137"></p><p><img src="../image/study_img/image-20240904160307363.png" alt="image-20240904160307363"></p><p><img src="../image/study_img/image-20240904160327203.png" alt="image-20240904160327203"></p><p><img src="../image/study_img/image-20240904160430589.png" alt="image-20240904160430589"></p><p><img src="../image/study_img/image-20240904162155815.png" alt="image-20240904162155815"></p><h3 id="2、使用官方的wordpress容器">2、<strong>使用官方的wordpress容器</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1、拉取wordpress容器</span><br><span class="line">[root@docker02 ~]# docker pull wordpress</span><br><span class="line"></span><br><span class="line">2、拉取数据库</span><br><span class="line">[root@docker02 ~]# docker pull mysql:5.7.44</span><br><span class="line"></span><br><span class="line">3、#官方wp容器的启动方法</span><br><span class="line">[root@docker02 ~]# docker run \</span><br><span class="line">--name wp \</span><br><span class="line">--<span class="built_in">link</span> mysql57 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-v /data/wp:/var/www/html \</span><br><span class="line">-e WORDPRESS_DB_HOST=mysql57 \</span><br><span class="line">-e WORDPRESS_DB_USER=wp_user \</span><br><span class="line">-e WORDPRESS_DB_PASSWORD=123 \</span><br><span class="line">-e WORDPRESS_DB_NAME=wordpress \</span><br><span class="line">-d wordpress</span><br><span class="line"></span><br><span class="line"><span class="comment">#官方mysql容器的启动方法</span></span><br><span class="line">[root@docker02 ~]# docker run \</span><br><span class="line">--name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=wordpress \</span><br><span class="line">-e MYSQL_USER=wp_user \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:5.7.44</span><br><span class="line"></span><br><span class="line">4、浏览器访问10.0.0.102</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240904164056259.png" alt="image-20240904164056259"></p><p>可以看到没有填写数据库信息的阶段，因为在启动数据库之前已经使用参数传递进去了，而且不会出现错误，不会出现破图，这个才是生产中需要的效果，需要变量传递参数</p><p><img src="../image/study_img/image-20240904164144932.png" alt="image-20240904164144932"></p><h3 id="3、构建可以传递参数的镜像-（模拟官方打wordpress镜像）">3、<strong>构建可以传递参数的镜像    （模拟官方打wordpress镜像）</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先了解读取系统环境变量的命令：envsubst</span></span><br><span class="line">[root@docker02 ~]# <span class="built_in">export</span> wp_db_name=wp</span><br><span class="line">[root@docker02 ~]# <span class="built_in">export</span> wp_db_user=wp_user</span><br><span class="line">[root@docker02 ~]# <span class="built_in">echo</span> <span class="variable">$wp_db_name</span></span><br><span class="line">wp</span><br><span class="line">[root@docker02 ~]# <span class="built_in">echo</span> <span class="variable">$wp_db_user</span></span><br><span class="line">wp_user</span><br><span class="line">[root@docker02 ~]# vim 1.txt</span><br><span class="line">define( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;$wp_db_name&#x27;</span> );</span><br><span class="line">define( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;$wp_db_user&#x27;</span> );</span><br><span class="line"></span><br><span class="line">拿环境变量去渲染这个文件,1.txt会变成空文件</span><br><span class="line">envsubst读取1.txt里面的变量，匹配环境变量里面有没有，有的话，输出渲染到2.txt</span><br><span class="line">[root@docker02 ~]# envsubst &lt; 1.txt &gt; 2.txt</span><br><span class="line">[root@docker02 ~]# <span class="built_in">cat</span> 2.txt </span><br><span class="line">define( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;wp&#x27;</span> );</span><br><span class="line">define( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;wp_user&#x27;</span> );</span><br><span class="line"></span><br><span class="line">指定只渲染一个变量，没被渲染的变量就是默认的</span><br><span class="line">[root@docker02 ~]# <span class="built_in">cat</span> 1.txt </span><br><span class="line">define( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;$wp_db_name&#x27;</span> );</span><br><span class="line">define( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;$wp_db_user&#x27;</span> );</span><br><span class="line">define( <span class="string">&#x27;DB_PASS&#x27;</span>, <span class="string">&#x27;$wp_db_pass&#x27;</span> );</span><br><span class="line">[root@docker02 ~]# envsubst <span class="string">&#x27;$wp_db_name&#x27;</span> &lt; 1.txt &gt;2.txt </span><br><span class="line">[root@docker02 ~]# <span class="built_in">cat</span> 2.txt </span><br><span class="line">define( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;wp&#x27;</span> );</span><br><span class="line">define( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;$wp_db_user&#x27;</span> );</span><br><span class="line">define( <span class="string">&#x27;DB_PASS&#x27;</span>, <span class="string">&#x27;$wp_db_pass&#x27;</span> );</span><br><span class="line"></span><br><span class="line">容器里面没有这个命令，先查询一个属于哪个包，在容器里面安装服务的时候一起安装</span><br><span class="line">[root@docker02 ~]# yum provides envsbet</span><br><span class="line">gettext-0.19.8.1-3.el7.x86_64 : GNU libraries and utilities <span class="keyword">for</span> producing multi-lingual messages</span><br></pre></td></tr></table></figure><p>在docker02    10.0.0.102 构建     需要把之前允许的容器关闭，需要打nginx、php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line">1、下载wordpress代码包</span><br><span class="line">[root@docker01 ~]# wget https://cn.wordpress.org/wordpress-5.9.10-zh_CN.tar.gz</span><br><span class="line"></span><br><span class="line">1、运行一个基础容器</span><br><span class="line">[root@docker01 ~]# docker run --name wp_base -it  centos:7 /bin/bash</span><br><span class="line"></span><br><span class="line">2、换源</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-7-anon.repo</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">sed -i <span class="string">&quot;s@http://mirrors.aliyun.com@https://mirrors.huaweicloud.com@g&quot;</span> /etc/yum.repos.d/epel.repo</span><br><span class="line"></span><br><span class="line">3、换php源</span><br><span class="line">[root@3dcd1060f3ab /]# <span class="built_in">cat</span> &gt; /etc/yum.repos.d/php.repo &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[php-webtatic]</span></span><br><span class="line"><span class="string">name = PHP Repository</span></span><br><span class="line"><span class="string">baseurl = http://us-east.repo.webtatic.com/yum/el7/x86_64/</span></span><br><span class="line"><span class="string">gpgcheck = 0</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> -e  <span class="string">&quot;[php-webtatic]\nname = PHP Repository\nbaseurl = http://us-east.repo.webtatic.com/yum/el7/x86_64/\ngpgcheck = 0&quot;</span>&gt; /etc/yum.repos.d/php.repo</span><br><span class="line"></span><br><span class="line">4、安装php、nginx、envsubst命令</span><br><span class="line">[root@nginx ~]# yum -y install php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache php71w-pecl-memcached php71w-pecl-redis php71w-pecl-mongodb nginx  gettext</span><br><span class="line"></span><br><span class="line">5、创建nginx启动用户</span><br><span class="line">groupadd -g 666 www</span><br><span class="line">useradd -u 666 -g 666 -s /sbin/nologin -M www</span><br><span class="line"></span><br><span class="line">6、优化nginx  php 统一用户</span><br><span class="line">主配置文件   (如果是nginxX官方源下载的nginx，就不用优化)</span><br><span class="line">[root@3dcd1060f3ab /]# vi /etc/nginx/nginx.conf</span><br><span class="line">user www;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 4096;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@3dcd1060f3ab ~]# sed -i <span class="string">&#x27;s#user = apache#user = www#g&#x27;</span> /etc/php-fpm.d/www.conf</span><br><span class="line">sed -i <span class="string">&#x27;s#group = apache#group = www#g&#x27;</span> /etc/php-fpm.d/www.conf </span><br><span class="line"></span><br><span class="line">7、编写网站主配置文件</span><br><span class="line">[root@3dcd1060f3ab /]# vi /etc/nginx/conf.d/wp.conf</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name _;</span><br><span class="line">        root /code/wordpress;</span><br><span class="line">        index index.php index.html;</span><br><span class="line">        </span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">             fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">             fastcgi_param SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">             include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">8、创建站点目录，宿主机新开窗口上传代码到站点目录，并解压，授权</span><br><span class="line">[root@3dcd1060f3ab /]# <span class="built_in">mkdir</span> /code</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">cp</span> wordpress-5.9.10.tar.gz  wp_base:/code</span><br><span class="line">[root@3dcd1060f3ab code]# <span class="built_in">cd</span> /code</span><br><span class="line">[root@3dcd1060f3ab code]# tar xf wordpress-5.9.10.tar.gz </span><br><span class="line">[root@3dcd1060f3ab code]# <span class="built_in">chown</span> -R  www.www /code/</span><br><span class="line"><span class="built_in">chown</span> -R www.www /var/lib/nginx/</span><br><span class="line"></span><br><span class="line">9、启动nginx</span><br><span class="line">[root@3dcd1060f3ab code]# nginx</span><br><span class="line"></span><br><span class="line">10、启动php</span><br><span class="line">找到启动脚本里面的启动命令</span><br><span class="line">[root@3dcd1060f3ab code]# vi /usr/lib/systemd/system/php-fpm.service </span><br><span class="line"> 9行</span><br><span class="line"> ExecStart=/usr/sbin/php-fpm --nodaemonize --fpm-config /etc/php-fpm.conf</span><br><span class="line"> </span><br><span class="line"> --nodaemonize：可以卡住，不加就放后台</span><br><span class="line">[root@3dcd1060f3ab code]# /usr/sbin/php-fpm  --fpm-config /etc/php-fpm.conf</span><br><span class="line"> </span><br><span class="line"> 11、curl一下，能够正常访问</span><br><span class="line"> [root@3dcd1060f3ab code]# curl -L 127.0.0.1</span><br><span class="line"> ....    <span class="comment">#可以看到选中语言的界面</span></span><br><span class="line">&lt;option value=<span class="string">&quot;zh_HK&quot;</span> lang=<span class="string">&quot;zh&quot;</span> data-continue=<span class="string">&quot;繼續&quot;</span>&gt;香港中文&lt;/option&gt;</span><br><span class="line">&lt;option value=<span class="string">&quot;zh_CN&quot;</span> lang=<span class="string">&quot;zh&quot;</span> data-continue=<span class="string">&quot;继续&quot;</span>&gt;简体中文&lt;/option&gt;</span><br><span class="line">&lt;option value=<span class="string">&quot;zh_TW&quot;</span> lang=<span class="string">&quot;zh&quot;</span> data-continue=<span class="string">&quot;繼續&quot;</span>&gt;繁體中文&lt;/option&gt;</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">12、传参，不要数据的页面，需要使用读取系统环境变量的命令envsubst</span><br><span class="line">将配置文件改成模版文件</span><br><span class="line">[root@1925f5794372 code]# vi /code/wordpress/wp-config-sample.php</span><br><span class="line">......</span><br><span class="line"><span class="comment">#把这几行改成变量</span></span><br><span class="line">     23 define( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;$WORDPRESS_DB_NAME&#x27;</span> );</span><br><span class="line">     24 </span><br><span class="line">     25 /** Database username */</span><br><span class="line">     26 define( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;$WORDPRESS_DB_USER&#x27;</span> );</span><br><span class="line">     27 </span><br><span class="line">     28 /** Database password */</span><br><span class="line">     29 define( <span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;$WORDPRESS_DB_PASSWORD&#x27;</span> );</span><br><span class="line">     30 </span><br><span class="line">     31 /** Database hostname */</span><br><span class="line">     32 define( <span class="string">&#x27;DB_HOST&#x27;</span>, <span class="string">&#x27;$WORDPRESS_DB_HOST&#x27;</span> );</span><br><span class="line">     </span><br><span class="line"> </span><br><span class="line">sed -i <span class="string">&#x27;s#database_name_here#$WORDPRESS_DB_NAME#g&#x27;</span> /code/wordpress/wp-config-sample.php</span><br><span class="line">sed -i <span class="string">&#x27;s#username_here#$WORDPRESS_DB_USER#g&#x27;</span> /code/wordpress/wp-config-sample.php</span><br><span class="line">sed -i <span class="string">&#x27;s#password_here#$WORDPRESS_DB_PASSWORD#g&#x27;</span> /code/wordpress/wp-config-sample.php</span><br><span class="line">sed -i <span class="string">&#x27;s#localhost#$WORDPRESS_DB_HOST#g&#x27;</span> /code/wordpress/wp-config-sample.php</span><br><span class="line"></span><br><span class="line">13、将2个服务写脚本启动，就不用一个一个启动了</span><br><span class="line">[root@3dcd1060f3ab ~]# vi /start.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#渲染变量到wp-config.php</span></span><br><span class="line">envsubst <span class="string">&#x27;$WORDPRESS_DB_NAME $WORDPRESS_DB_USER $WORDPRESS_DB_PASSWORD $WORDPRESS_DB_HOST&#x27;</span> &lt; /code/wordpress/wp-config-sample.php &gt; /code/wordpress/wp-config.php</span><br><span class="line"><span class="built_in">chown</span> -R  www.www /code/</span><br><span class="line">/usr/sbin/php-fpm  --fpm-config /etc/php-fpm.conf</span><br><span class="line"><span class="comment">#脚本里面必须有一个卡在，哪个卡在都可以</span></span><br><span class="line">/sbin/nginx -g <span class="string">&#x27;daemon off;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">14、输入此时可以打包了，但是打包出来的镜像很大，需要优化一下</span><br><span class="line">[root@3dcd1060f3ab ~]# <span class="built_in">rm</span> -rf /code/wordpress-5.9.10.tar.gz</span><br><span class="line">[root@3dcd1060f3ab ~]# yum clean all</span><br><span class="line">删除所有yum源，以后用不到的，这个就是wordpress</span><br><span class="line">[root@3dcd1060f3ab ~]# <span class="built_in">rm</span> -rf /etc/yum.repos.d/* </span><br><span class="line">如果有下载wget下载东西，都要卸载掉，以后用不到的</span><br><span class="line"></span><br><span class="line">15、打开新窗口，将容器打包</span><br><span class="line">[root@docker01 ~]# docker commit wp_base wordpress:v1</span><br><span class="line">[root@docker02 ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">wordpress    v1        23e066cac691   2 seconds ago   586MB</span><br><span class="line"></span><br><span class="line">16、删除数据库数据目录，不然第二次启动不能建库，因为第一次的数据已经持久化了</span><br><span class="line">[root@docker02 ~]# <span class="built_in">rm</span> -rf /data</span><br><span class="line"></span><br><span class="line">17、运行带变量的容器</span><br><span class="line"><span class="comment">#运行数据库</span></span><br><span class="line">docker run \</span><br><span class="line">--name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=wp_db \</span><br><span class="line">-e MYSQL_USER=wp_user \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:5.7.44</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行wordpress容器</span></span><br><span class="line">docker run \</span><br><span class="line">--name wp \</span><br><span class="line">--<span class="built_in">link</span> mysql57 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-e WORDPRESS_DB_HOST=mysql57 \</span><br><span class="line">-e WORDPRESS_DB_USER=wp_user \</span><br><span class="line">-e WORDPRESS_DB_PASSWORD=123 \</span><br><span class="line">-e WORDPRESS_DB_NAME=wp_db \</span><br><span class="line">-d wordpress:v3 /bin/sh /start.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看正在运行的镜像</span></span><br><span class="line">[root@docker02 ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED             STATUS             PORTS                                                  NAMES</span><br><span class="line">71439bdb8066   wordpress:v5   <span class="string">&quot;/bin/sh /start.sh&quot;</span>      5 seconds ago       Up 4 seconds       0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp                      wp</span><br><span class="line">c6eefe3b5358   mysql:5.7.44   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   49 minutes ago      Up 49 minutes      0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql57</span><br><span class="line">4f798d07ace2   centos:7       <span class="string">&quot;/bin/bash&quot;</span>              About an hour ago   Up About an hour                                                          wp_base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">18、浏览器访问</span><br><span class="line">10.0.0.102</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240904193619359.png" alt="image-20240904193619359"></p><p>通过填写数据库信息的页面，直接来的主从页面</p><p><img src="../image/study_img/image-20240904194031698.png" alt="image-20240904194031698"></p><p><strong>报错问题</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、docker正常启动，容器里面的服务都正常启动,端口映射也没问题，访问网页找不到页面</span></span><br><span class="line">是因为外面的请求不能到底容器</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决办法：</span></span><br><span class="line">vi /etc/sysctl.conf</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line">systemctl restart network</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、wp破图</span></span><br><span class="line">1、查看错误日志</span><br><span class="line">[root@1a60046efc86 wordpress]# tailf /var/log/nginx/error.log </span><br><span class="line">2024/09/05 12:45:49 [crit] 16#16: *432 open() <span class="string">&quot;/var/lib/nginx/tmp/fastcgi/8/01/0000000018&quot;</span> failed (13: Permission denied) <span class="keyword">while</span> reading upstream, client: 10.0.0.1, server: _, request: <span class="string">&quot;GET /wp-admin/site-editor.php?postType=wp_template&amp;postId=twentytwentytwo%2F%2Fhome HTTP/1.1&quot;</span>, upstream: <span class="string">&quot;fastcgi://127.0.0.1:9000&quot;</span>, host: <span class="string">&quot;10.0.0.102&quot;</span>, referrer: <span class="string">&quot;http://10.0.0.102/&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Nginx 修改了默认配置，不是以 nginx 或 root 用户来运行 Nginx（主要的原因）</span><br><span class="line">这个目录没有权限去访问：/var/lib/nginx/tmp 目录主要是用来存放临时的缓存文件，因为使用的是 Nginx 的反向代理，当我们上传文件的时候会先把文件写入 Nginx 的 /var/lib/nginx/tmp/client_body 目录，然后再通过代理转发到目标系统。</span><br><span class="line"></span><br><span class="line">2、查看 /var/lib/nginx/tmp 的权限，会发现这个目录默认的所有者是 nginx:</span><br><span class="line">[root@1a60046efc86 wordpress]# ll /var/lib</span><br><span class="line">.....</span><br><span class="line">drwxr-xr-x 2 root root   6 Apr 11  2018 misc</span><br><span class="line">drwxrwx--- 3 nginx root  17 Sep  5 11:52 nginx <span class="comment">#权限不对</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、修改权限</span><br><span class="line">[root@1a60046efc86 wordpress]# <span class="built_in">chown</span> -R www.www /var/lib/nginx/</span><br><span class="line">[root@1a60046efc86 wordpress]# ll /var/lib</span><br><span class="line">......</span><br><span class="line">drwxrwx--- 1 www  www   17 Sep  5 11:52 nginx</span><br><span class="line"></span><br><span class="line">4、再次访问，刷新慢一点，加重一下，就不会破图了</span><br></pre></td></tr></table></figure><h3 id="4、Docker自动化构建镜像">4、<strong>Docker自动化构建镜像</strong></h3><p>手动构建镜像的缺陷<br>1.体积太大<br>2.启动不方便<br>3.无法直接修改CMD<br>4.没有声明端口<br>5、没有声明可映射目录</p><h3 id="5、Dockerfile的介绍">5、<strong>Dockerfile的介绍</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Dockerile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。声明式的脚本，将镜像构建内容，写入脚本中即可。</span><br><span class="line"></span><br><span class="line">镜像:中药</span><br><span class="line">dockerfile：配方</span><br><span class="line">dockerfile：常用指令</span><br></pre></td></tr></table></figure><p>dockerfile的指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM：指定一个基础镜像</span><br><span class="line">RUN： 指定系统命令</span><br><span class="line">CMD： 指定运行容器PID为1的进程命令   </span><br><span class="line">ENTRYPOINT：指定运行容器PID为1的进程命令 /bin/sh /start.sh</span><br><span class="line"></span><br><span class="line">ADD： 将宿主机上面的文件docker <span class="built_in">cp</span>到容器中(会自动解压，一般传压缩包,里面不会传压缩包，之后传解压后的包)</span><br><span class="line">COPY：将宿主机上面的文件docker <span class="built_in">cp</span>到容器中(不会自动压，一般传配置文件)</span><br><span class="line">WORKDIR：指定一个工作目录，docker <span class="built_in">exec</span>连接进去时，自动进入该目录下</span><br><span class="line">EXPOSE：声明镜像要暴露的端口</span><br><span class="line">VOLUME： 声明可映射的数据卷</span><br><span class="line">ENV：声明默认环境变量(ssh的密码,数据库的密码)镜像的属性标签</span><br><span class="line"></span><br><span class="line">LABEL：打标签</span><br><span class="line">MAINTAINER：声明管理者标识</span><br></pre></td></tr></table></figure><h3 id="6、自动化构建wordpress">6、<strong>自动化构建wordpress</strong></h3><p>1、准备需要的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1、运行带有配置文件的容器，进入容器，将需要的配置文件拉出去</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">exec</span> -it 40b99669a1 /bin/bash</span><br><span class="line"></span><br><span class="line">2、创建所需文件存放的目录</span><br><span class="line">[root@docker01 ~]# <span class="built_in">mkdir</span> -p /code/wordpress/</span><br><span class="line"></span><br><span class="line">3、拉取容器里面的配置文件</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">cp</span> 40b99669a160:/etc/nginx/nginx.conf /code/wordpress/</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">cp</span> 40b99669a160:/etc/nginx/conf.d/wp.conf /code/wordpress/ </span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">cp</span> 40b99669a160:/etc/php-fpm.d/www.conf /code/wordpress/</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">cp</span> 40b99669a160:/code/wordpress/wp-config-sample.php /code/wordpress/</span><br><span class="line"></span><br><span class="line">4、准备这些文件,检查配置文件都安装所需要求更改ok</span><br><span class="line">[root@docker01 ~]# ll /code/wordpress/</span><br><span class="line">-rw-r--r-- 1 root root  724 Sep  5 23:31 nginx.conf</span><br><span class="line">-rw-r--r-- 1 root root  278 Sep  5 20:12 start.sh</span><br><span class="line">-rw-rw-rw- 1 root root  18M Sep  5 23:24 wordpress-5.9.10.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root  324 Sep  5 19:53 wp.conf</span><br><span class="line">-rw-r--r-- 1 root root 3.0K Sep  5 21:39 wp-config-sample.php</span><br><span class="line">-rw-r--r-- 1 root root  18K Sep  5 23:32 www.conf</span><br></pre></td></tr></table></figure><p>2、编写Dockerfile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">1、编写DockerFile</span><br><span class="line">[root@docker01 ~]# <span class="built_in">cd</span> /code/wordpress/</span><br><span class="line">[root@docker01 wordpress]# vim Dockerfile</span><br><span class="line">FROM centos:7</span><br><span class="line">RUN  curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-7-anon.repo</span><br><span class="line">RUN  curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">RUN  sed -i <span class="string">&quot;s@http://mirrors.aliyun.com@https://mirrors.huaweicloud.com@g&quot;</span> /etc/yum.repos.d/epel.repo</span><br><span class="line">RUN  <span class="built_in">echo</span> -e  <span class="string">&quot;[php-webtatic]\nname = PHP Repository\nbaseurl = http://us-east.repo.webtatic.com/yum/el7/x86_64/\ngpgcheck = 0&quot;</span>&gt; /etc/yum.repos.d/php.repo</span><br><span class="line">RUN  yum -y install php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache php71w-pecl-memcached php71w-pecl-redis php71w-pecl-mongodb nginx  gettext</span><br><span class="line">RUN  groupadd -g 666 www</span><br><span class="line">RUN  useradd -u 666 -g 666 -s /sbin/nologin -M www</span><br><span class="line">RUN  <span class="built_in">mkdir</span> /code</span><br><span class="line">COPY nginx.conf /etc/nginx/nginx.conf</span><br><span class="line">COPY www.conf /etc/php-fpm.d/www.conf</span><br><span class="line">COPY wp.conf /etc/nginx/conf.d/wp.conf</span><br><span class="line">ADD  wordpress-5.9.10.tar.gz  /code</span><br><span class="line">COPY wp-config-sample.php /code/wordpress/wp-config-sample.php</span><br><span class="line">RUN  <span class="built_in">chown</span> -R  www.www /code</span><br><span class="line">RUN  <span class="built_in">chown</span> -R www.www /var/lib/nginx</span><br><span class="line">COPY start.sh /start.sh</span><br><span class="line">RUN  <span class="built_in">rm</span> -rf /code/wordpress-5.9.10.tar.gz</span><br><span class="line">RUN  yum clean all</span><br><span class="line">RUN  <span class="built_in">rm</span> -rf /etc/yum.repos.d/* </span><br><span class="line">CMD  [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;/start.sh&quot;</span>]</span><br><span class="line">EXPOSE 80/tcp 8080/tcp</span><br><span class="line">WORKDIR /code/wordpress</span><br><span class="line">VOLUME  /code/wordpress</span><br><span class="line">ENV  WORDPRESS_DB_NAME=wp_db</span><br><span class="line">ENV  WORDPRESS_DB_USER=wp_user</span><br><span class="line">ENV  WORDPRESS_DB_PASSWORD=123</span><br><span class="line">ENV  WORDPRESS_DB_HOST=localhost</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#构建</span><br><span class="line">[root@docker01 wordpress]# docker build -t wordpress-df:v1 .</span><br><span class="line">[root@docker01 ~]# docker images</span><br><span class="line">REPOSITORY                      TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">wordpress-df                    v1        e389c28d9b3b   14 hours ago    831MB</span><br><span class="line"></span><br><span class="line">3、删除数据库数据目录，不然第二次启动不能建库，因为第一次的数据已经持久化了</span><br><span class="line">[root@docker02 ~]# <span class="built_in">rm</span> -rf /data</span><br><span class="line"></span><br><span class="line">4、运行带变量的容器</span><br><span class="line"><span class="comment">#运行数据库</span></span><br><span class="line">docker run \</span><br><span class="line">--name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=wp_db \</span><br><span class="line">-e MYSQL_USER=wp_user \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:5.7.44</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行wordpress容器</span></span><br><span class="line">docker run \</span><br><span class="line">--name wp \</span><br><span class="line">--<span class="built_in">link</span> mysql57 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-e WORDPRESS_DB_HOST=mysql57 \</span><br><span class="line">-e WORDPRESS_DB_USER=wp_user \</span><br><span class="line">-e WORDPRESS_DB_PASSWORD=123 \</span><br><span class="line">-e WORDPRESS_DB_NAME=wp_db \</span><br><span class="line">-d wordpress-df:v1 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、浏览器访问</span><br><span class="line">10.0.0.101</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240906135218039.png" alt="image-20240906135218039"></p><p>3、优化Dockerfile的原则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 优化原则:构建的镜像尽可能小,构建速度尽可能快</span></span><br><span class="line">a: 使用体积小的linux镜像alpine作为基础镜像</span><br><span class="line">b：尽可能的清理无用的缓存文件（尽可能把多个RUN合并）</span><br><span class="line">c：修改dockerfile的时候，尽可能把修改的内容放在最后</span><br><span class="line">d：使用.dockerignore忽略构建docker镜像时，不需要的文件</span><br><span class="line">f:使用\减少不必要的文件RUN或ADD</span><br><span class="line"></span><br><span class="line">层数多不代表体积大，层数多和镜像里面的服务，命令，安装包有关，层数多是命令多，不会让文件数量，文件大小增加</span><br></pre></td></tr></table></figure><p>4、优化Dockerfile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">1、优化DockerFile</span><br><span class="line">[root@docker01 ~]# <span class="built_in">cd</span> /code/wordpress/</span><br><span class="line">[root@docker01 wordpress]# vim Dockerfile</span><br><span class="line">FROM centos:7</span><br><span class="line">RUN  curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-7-anon.repo &amp;&amp; \</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo &amp;&amp; \</span><br><span class="line">sed -i <span class="string">&quot;s@http://mirrors.aliyun.com@https://mirrors.huaweicloud.com@g&quot;</span> /etc/yum.repos.d/epel.repo &amp;&amp; \</span><br><span class="line"><span class="built_in">echo</span> -e  <span class="string">&quot;[php-webtatic]\nname = PHP Repository\nbaseurl = http://us-east.repo.webtatic.com/yum/el7/x86_64/\ngpgcheck = 0&quot;</span>&gt; /etc/yum.repos.d/php.repo &amp;&amp; \</span><br><span class="line">yum -y install php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache php71w-pecl-memcached php71w-pecl-redis php71w-pecl-mongodb nginx  gettext &amp;&amp; \</span><br><span class="line">groupadd -g 666 www &amp;&amp; \</span><br><span class="line">useradd -u 666 -g 666 -s /sbin/nologin -M www &amp;&amp; \</span><br><span class="line"><span class="built_in">mkdir</span> /code &amp;&amp; \</span><br><span class="line">yum clean all &amp;&amp; \</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/yum.repos.d/*</span><br><span class="line">COPY nginx.conf /etc/nginx/nginx.conf</span><br><span class="line">COPY www.conf /etc/php-fpm.d/www.conf</span><br><span class="line">COPY wp.conf /etc/nginx/conf.d/wp.conf</span><br><span class="line">ADD  wordpress-5.9.10.tar.gz  /code</span><br><span class="line">COPY wp-config-sample.php /code/wordpress/wp-config-sample.php</span><br><span class="line">RUN  <span class="built_in">chown</span> -R  www.www /code &amp;&amp; \</span><br><span class="line"><span class="built_in">chown</span> -R www.www /var/lib/nginx</span><br><span class="line">COPY start.sh /start.sh</span><br><span class="line">CMD  [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;/start.sh&quot;</span>]</span><br><span class="line">EXPOSE 80/tcp 8080/tcp</span><br><span class="line">WORKDIR /code/wordpress</span><br><span class="line">VOLUME  /code/wordpress</span><br><span class="line">ENV  WORDPRESS_DB_NAME=wp_db</span><br><span class="line">ENV  WORDPRESS_DB_USER=wp_user</span><br><span class="line">ENV  WORDPRESS_DB_PASSWORD=123</span><br><span class="line">ENV  WORDPRESS_DB_HOST=localhost</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#构建</span><br><span class="line">[root@docker01 wordpress]# docker build -t wordpress-df:v1 .</span><br><span class="line">[root@docker01 ~]# docker images</span><br><span class="line">REPOSITORY                      TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">wordpress-df                    v2        1a14add5916b   11 seconds ago   530MB</span><br><span class="line"></span><br><span class="line">3、删除数据库数据目录，不然第二次启动不能建库，因为第一次的数据已经持久化了</span><br><span class="line">[root@docker02 ~]# <span class="built_in">rm</span> -rf /data</span><br><span class="line"></span><br><span class="line">4、运行带变量的容器</span><br><span class="line"><span class="comment">#运行数据库</span></span><br><span class="line">docker run \</span><br><span class="line">--name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=wp_db \</span><br><span class="line">-e MYSQL_USER=wp_user \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:5.7.44</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行wordpress容器</span></span><br><span class="line">docker run \</span><br><span class="line">--name wp \</span><br><span class="line">--<span class="built_in">link</span> mysql57 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-e WORDPRESS_DB_HOST=mysql57 \</span><br><span class="line">-e WORDPRESS_DB_USER=wp_user \</span><br><span class="line">-e WORDPRESS_DB_PASSWORD=123 \</span><br><span class="line">-e WORDPRESS_DB_NAME=wp_db \</span><br><span class="line">-d wordpress-df:v2 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、浏览器访问</span><br><span class="line">10.0.0.101</span><br></pre></td></tr></table></figure><h3 id="7、制作zabbix镜像">7、<strong>制作zabbix镜像</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">1、拉取相关镜像</span><br><span class="line">[root@docker01 ~]#  docker pull zabbix/zabbix-server-mysql</span><br><span class="line">[root@docker01 ~]#  docker pull zabbix/zabbix-web-nginx-mysql</span><br><span class="line">[root@docker01 ~]#  docker pull mysql:8.0</span><br><span class="line"></span><br><span class="line">2、#运行数据库</span><br><span class="line">注意：再次启动数据库之前先清空data目录</span><br><span class="line"><span class="built_in">rm</span> -rf /data/mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">--name mysql80 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=zabbix \</span><br><span class="line">-e MYSQL_USER=zabbix \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:8.0 \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--character-set-server=utf8mb4 </span><br><span class="line">--collation-server=utf8mb4_bin </span><br><span class="line">--log_bin_trust_function_creators</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、yunx容器化zabbix-server</span><br><span class="line">docker run \</span><br><span class="line">--<span class="built_in">link</span> mysql80 \</span><br><span class="line">--name zabbix-server \</span><br><span class="line">-p 10051:10051 \</span><br><span class="line">-e DB_SERVER_HOST=<span class="string">&quot;mysql80&quot;</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">&quot;zabbix&quot;</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">&quot;123&quot;</span> \</span><br><span class="line">-d zabbix/zabbix-server-mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、容器化zabbix-web</span><br><span class="line">docker run \</span><br><span class="line">--<span class="built_in">link</span> zabbix-server \</span><br><span class="line">--<span class="built_in">link</span> mysql80 \</span><br><span class="line">--name zabbix-web \</span><br><span class="line">-p 80:8080 \</span><br><span class="line">-p 8443:8443 \</span><br><span class="line">-e DB_SERVER_HOST=<span class="string">&quot;mysql80&quot;</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">&quot;zabbix&quot;</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">&quot;123&quot;</span> \</span><br><span class="line">-e ZBX_SERVER_HOST=<span class="string">&quot;zabbix-server&quot;</span> \</span><br><span class="line">-e PHP_TZ=<span class="string">&quot;Asia/Shanghai&quot;</span> \</span><br><span class="line">-d zabbix/zabbix-web-nginx-mysql</span><br><span class="line"></span><br><span class="line">5、检查3个容器是否起来</span><br><span class="line">[root@docker01 ~]# docker ps </span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240905101309249.png" alt="image-20240905101309249"></p><p><img src="../image/study_img/image-20240905100315171.png" alt="image-20240905100315171"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">出现以上报错就是mysql8.0启动命令加参数</span><br><span class="line">--log_bin_trust_funetion</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240905143325160.png" alt="image-20240905143325160"></p>]]></content>
    
    
    <summary type="html">本文汇总对镜像的多种制作方法，还汇总使用dockerfile构建镜像，对镜像的优化</summary>
    
    
    
    <category term="docker" scheme="https://www.fomal.cc/categories/docker/"/>
    
    
  </entry>
  
</feed>
