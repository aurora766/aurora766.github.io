<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aurora🥝</title>
  
  
  <link href="https://www.fomal.cc/atom.xml" rel="self"/>
  
  <link href="https://www.fomal.cc/"/>
  <updated>2024-09-22T07:53:34.231Z</updated>
  <id>https://www.fomal.cc/</id>
  
  <author>
    <name>Aurora 🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>🍉5、Pod的钩子和探针</title>
    <link href="https://www.fomal.cc/posts/feb758ca.html"/>
    <id>https://www.fomal.cc/posts/feb758ca.html</id>
    <published>2024-09-22T06:46:01.000Z</published>
    <updated>2024-09-22T07:53:34.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pod的钩子和探针">Pod的钩子和探针</h2><h3 id="1、pod的生命周期">1、<strong>pod的生命周期</strong></h3><p><img src="../image/study_img/image-20240920083828296.png" alt="image-20240920083828296"></p><p><img src="../image/study_img/image-20240920083900491.png" alt="image-20240920083900491"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">生命周期里面包含的东西</span><br><span class="line">1、初始化容器</span><br><span class="line">2、2个钩子</span><br><span class="line">   - start hook</span><br><span class="line">   - stop hook</span><br><span class="line"></span><br><span class="line"><span class="comment">#init container</span></span><br><span class="line">初始化容器的作用：主容器启动之前，可以让他做一些准备工作。</span><br><span class="line">比如：</span><br><span class="line">1、创建用户，容器的统一用户</span><br><span class="line">2、2个容器做了共享储存，那么我们可以让他先启动一个容器，来对目录进行更改和授权</span><br><span class="line">3、容器需要连接数据库，可以让初始化容器检测数据库是否可以正常连接，如果可以再启动主容器</span><br><span class="line"></span><br><span class="line"><span class="comment">#hook</span></span><br><span class="line">Poststart：在容器创建后，立即执行，但时间不能太久，否则容器不会是running状态</span><br><span class="line">Prestart：在容器停止前，执行一些命令，主要用于优雅关闭进程</span><br><span class="line"></span><br><span class="line"><span class="comment">#Liveness probe</span></span><br><span class="line">存活探针，用于定义容器内，应用是否满足探针状态</span><br><span class="line"></span><br><span class="line"><span class="comment">#rediness probe</span></span><br><span class="line">就绪探针，指定何时允许容器进入流量</span><br></pre></td></tr></table></figure><h3 id="2、初始化容器">2、<strong>初始化容器</strong></h3><ul><li>利用初始化容器更改nginx页面</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#利用初始化容器更改nginx页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主容器启动之前，我们可以让他做一些准备工作，初始化容器执行完成后就结束退出</span></span><br><span class="line"></span><br><span class="line">1、编写资源清单</span><br><span class="line">[root@master01 kubernetes]# vim init-container.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: init-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginx-data</span><br><span class="line">    emptyDir: &#123;&#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#指定一个初始化容器：初始化容器的写法和下面容器的写法是一样的</span></span><br><span class="line">  initContainers:</span><br><span class="line">  - name: initcontainer</span><br><span class="line">    image: centos:7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 初始化容器&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">  - name: c7-container</span><br><span class="line">    image: centos:7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;tail -f /etc/hosts&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">2、运行容器，查看</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f init-container.yml </span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -owide</span><br><span class="line">NAME        READY   STATUS    RESTARTS   AGE    IP          NODE</span><br><span class="line">init-pod    2/2     Running   0          2m1s   10.2.2.6    node02</span><br><span class="line">[root@master01 kubernetes]# curl 10.2.2.6</span><br><span class="line"><span class="built_in">test</span> k8s 初始化容器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it init-pod -c c7-container -- /bin/bash</span><br><span class="line">[root@init-pod /]# <span class="built_in">cat</span> /usr/share/nginx/html/index.html </span><br><span class="line"><span class="built_in">test</span> k8s 初始化容器</span><br><span class="line"></span><br><span class="line">现在相当于3个容器同时挂载在同一个目录下，同时也相当于挂载到宿主机的一个临时目录，他们3的目录做了共享</span><br><span class="line"></span><br><span class="line">比如说起个nginx和php容器，容器的文件互相隔离，代码就不共享，那代码部署在哪里呢，如果部署在nginx上，php才是解析代码的，wordpress不是前后端分离的，nginx配置文件就不能用socket连接php了，要用fastcgi_pass xx.xx.xx.xx:900,代码必须2边都要存</span><br></pre></td></tr></table></figure><h3 id="3、钩子">3、<strong>钩子</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动钩子  poststart  启动之后</span></span><br><span class="line">lifecycle: </span><br><span class="line">  preStart: </span><br><span class="line">    <span class="built_in">exec</span>:</span><br><span class="line">    httpGet: </span><br><span class="line">    tcpSocket </span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>：执行命令</span><br><span class="line">httpGet：检测HTTP，比如检测网站的80，443端口，要求web页面状态码返回是不是404，200，一般在探针里用</span><br><span class="line">tcpSocket：检测端口通不通，比如检测数据库是否正常运行，如果用httpget不行</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止钩子   preStop   停止之前</span></span><br><span class="line">lifecycle: </span><br><span class="line">  preStop: </span><br><span class="line">    <span class="built_in">exec</span>:</span><br><span class="line">    httpGet: </span><br><span class="line">    tcpSocket</span><br></pre></td></tr></table></figure><ul><li>使用启动钩子在一个pod里统一多个容器的用户</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">1、编写资源清单</span><br><span class="line">[root@master01 kubernetes]# <span class="built_in">cp</span> init-container.yml poststart.yml</span><br><span class="line">[root@master01 kubernetes]# vim poststart.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: poststart-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  <span class="comment">#这里挂载目录可以是临时的</span></span><br><span class="line">  - name: nginx-data</span><br><span class="line">    emptyDir: &#123;&#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">  initContainers:</span><br><span class="line">  - name: initcontainer</span><br><span class="line">    image: centos:7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 使用启动钩子在一个pod里统一多个容器的用户&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="comment">#nginx启动之后的钩子写法:统一容器的用户</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">     <span class="comment">#nginx里面一开始写useradd命令创建用户，但是这个容器里面没有useradd命令，会报错。所以只能用改组、用户有关的配置文件去添加用户</span></span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;www:x:666&#x27; &gt;&gt; /etc/group &amp;&amp; echo &#x27;www:x:666:666::/home/www:/sbin/nologin&#x27; &gt;&gt; /etc/passwd&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">  - name: c7-container</span><br><span class="line">    image: centos:7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;tail -f /etc/hosts&quot;</span>]</span><br><span class="line">    <span class="comment">#C7启动之后的钩子写法:统一容器的用户</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>: </span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;groupadd www -g 666 &amp;&amp; useradd www -u 666 -g 666 -s /sbin/nologin -M&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">2、运行容器，查看</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f  poststart.yml </span><br><span class="line">pod/poststart-pod created</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod poststart-pod -owide</span><br><span class="line">NAME            READY   STATUS    RESTARTS   AGE   IP          NODE  </span><br><span class="line">poststart-pod   2/2     Running   0          33s   10.2.3.33   node03</span><br><span class="line">[root@master01 kubernetes]# curl 10.2.3.33</span><br><span class="line"><span class="built_in">test</span> k8s 使用启动钩子在一个pod里统一多个容器的用户</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it poststart-pod -c c7-container -- /bin/bash</span><br><span class="line">[root@poststart-pod /]# <span class="built_in">id</span> www</span><br><span class="line">uid=666(www) gid=666(www) <span class="built_in">groups</span>=666(www)</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it poststart-pod -c nginx-container -- /bin/sh</span><br><span class="line">/ <span class="comment"># id www</span></span><br><span class="line">uid=666(www) gid=666 <span class="built_in">groups</span>=666</span><br></pre></td></tr></table></figure><ul><li>停止钩子  容器停止之前打印指定内容到文件  (不常用，没什么应用场景)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">1、编写资源清单</span><br><span class="line">[root@master01 kubernetes]# <span class="built_in">cp</span> poststart.yml poststop.yml</span><br><span class="line">[root@master01 kubernetes]# vim prestop.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: poststop-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  <span class="comment">#为了满足停止之前echo内容到挂载目录，所以这里的挂载目录需要持久化</span></span><br><span class="line">  - name: nginx-data</span><br><span class="line">    hostPath:</span><br><span class="line">     path: /data/nginx</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">  initContainers:</span><br><span class="line">  - name: initcontainer</span><br><span class="line">    image: centos:7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 使用启动钩子在一个pod里统一多个容器的用户&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;www:x:666&#x27; &gt;&gt; /etc/group &amp;&amp; echo &#x27;www:x:666:666::/home/www:/sbin/nologin&#x27; &gt;&gt; /etc/passwd&quot;</span>]</span><br><span class="line"><span class="comment">#容器停止之前做的事情</span></span><br><span class="line">      preStop:</span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 使用停止钩子使pod在停止之前打印  bye&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">  - name: c7-container</span><br><span class="line">    image: centos:7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;tail -f /etc/hosts&quot;</span>]</span><br><span class="line">    <span class="comment">#C7启动之后的钩子写法:统一容器的用户</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>: </span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;groupadd www -g 666 &amp;&amp; useradd www -u 666 -g 666 -s /sbin/nologin -M&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">      </span><br><span class="line"> 2、查看  </span><br><span class="line">[root@node03 ~]# <span class="built_in">rm</span> -rf /data/nginx/index.html</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod poststop-pod -owide</span><br><span class="line">NAME           READY   STATUS    RESTARTS   AGE   IP          NODE  </span><br><span class="line">poststop-pod   2/2     Running   0          40s   10.2.3.34   node03</span><br><span class="line">[root@master01 kubernetes]# curl 10.2.3.34</span><br><span class="line"><span class="built_in">test</span> k8s 使用启动钩子在一个pod里统一多个容器的用户</span><br><span class="line"></span><br><span class="line">3、现在curl出来的结果还没有改变，需要删除这个pod，才会发生改变，删掉之后容器不在了，不能用curl,只能到挂载目录去看</span><br><span class="line">[root@master01 kubernetes]# kubectl delete pod poststop-pod</span><br><span class="line"></span><br><span class="line">[root@node03 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">test</span> k8s 使用停止钩子使pod在停止之前打印 <span class="built_in">bye</span></span><br></pre></td></tr></table></figure><h3 id="4、探针">4、<strong>探针</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#存活性探针(存活态探针) livenessprobe</span></span><br><span class="line">列如：</span><br><span class="line">当nginx容器起来后，即便页面是404，容器会正常运行，80端口也会正常存在，k8s就不会做到重新拉起这个容器，存活性探针</span><br><span class="line">数据库假死，进程存在，存活性探针就可以检测应用是否存活，不存活会出现拉起新的pod</span><br><span class="line"></span><br><span class="line">用于定义容器内，应用是否满足探针指定状态，如果不满足，则删除POD重新拉起一个新的POD</span><br><span class="line"></span><br><span class="line">存活探针简单来说就是用来检测容器的应用程序是否还正常工作，如果应用程序不正常，即使容器还活着也没有意义了，所以这时候就可以使用存活探针来探测，如果应用程序不正常，就重启POD。</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>：执行命令</span><br><span class="line">httpGet：检测HTTP</span><br><span class="line">tcpSocket：检测端口</span><br><span class="line"></span><br><span class="line">ivenessProbe:</span><br><span class="line">httpGet:   <span class="comment">#基于HTTP请求资源</span></span><br><span class="line">path:      <span class="comment">#请求地址，如果这个地址返回的状态码在200~400之间正常</span></span><br><span class="line">port:      <span class="comment">#请求的端口</span></span><br><span class="line">initialDelaySeconds: 3     <span class="comment">#第一次启动探测在容器启动的3s后开始</span></span><br><span class="line">periodSeconds: 3           <span class="comment">#容器启动后每隔3s检测一次</span></span><br></pre></td></tr></table></figure><ul><li>1、存活性探针  exec版   应用场景：比如说nfs,没有页面和端口，就可以用命令，df -Th|grep 挂载目录，如果nfs挂了df -Th会卡主，但是他有一个超时时间，卡住了，到时候超时了就认为挂了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span>还可以写脚本去检测某个服务</span><br><span class="line"></span><br><span class="line">1、写service资源清单</span><br><span class="line">[root@master01 kubernetes]# vim ivenssprobe-service.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: ivenssprobe-service</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">  <span class="comment">#这个标签一定要和下面的标签保持一致，不然会curl报错</span></span><br><span class="line">    app: ivenssprobe</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">    <span class="comment">#把80映射到宿主机的30000端口</span></span><br><span class="line">    nodePort: 30000</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、编写资源清单    到这里目前还没有添加存活探针的功能，在后面添加</span><br><span class="line">[root@master01 kubernetes]# vim ivenssprobe.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: ivenssprobe-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: ivenssprobe</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginx-data</span><br><span class="line">    hostPath:</span><br><span class="line">     path: /data/nginx</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"><span class="comment">#使用启动钩子给nginx一个初始页面，初始化容器或者启动钩子都行，不然挂载出来没页面</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 存活性探针&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">          </span><br><span class="line">2、运行</span><br><span class="line">[root@master01 kubernetes]# kubectl get service</span><br><span class="line">NAME                  TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">ivenssprobe-service   NodePort    10.1.87.209   &lt;none&gt;        80:30000/TCP   25s</span><br><span class="line">kubernetes            ClusterIP   10.1.0.1      &lt;none&gt;        443/TCP        7d5h</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod ivenssprobe-pod -owide</span><br><span class="line">NAME              READY   STATUS    RESTARTS   AGE     IP          NODE  </span><br><span class="line">ivenssprobe-pod   1/1     Running   0          3m53s   10.2.1.11   node01</span><br><span class="line"></span><br><span class="line">3、检查</span><br><span class="line">ivenssprobe-service这个资源相当于给他们做了负载均衡</span><br><span class="line">[root@master01 kubernetes]# curl 10.1.151.36</span><br><span class="line"><span class="built_in">test</span> k8s 存活性探针</span><br><span class="line">[root@master01 kubernetes]# curl 10.2.1.7 </span><br><span class="line"><span class="built_in">test</span> k8s 存活性探针</span><br><span class="line">[root@node01 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">test</span> k8s 存活性探针</span><br><span class="line"></span><br><span class="line">由于做了宿主机上的映射，可以浏览器访问   10.0.0.201:30000</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240920165623622.png" alt="image-20240920165623622"></p><p>测试探针</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">test</span> k8s 存活性探针</span><br><span class="line"></span><br><span class="line">1、删除主页面，再次浏览器访问，变成403</span><br><span class="line">[root@node01 ~]# <span class="built_in">rm</span> -rf /data</span><br><span class="line"></span><br><span class="line">2、再次查看主页面，还是空的，查看pod，还是running状态，没有任何问题，但网站确实挂了，pod虽然在运行，但是没啥用了，还占用资源</span><br></pre></td></tr></table></figure><p>在资源清单编写存活性探针的检验功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">1、删除旧的pod</span><br><span class="line">[root@master01 kubernetes]# kubectl delete pod ivenssprobe-pod </span><br><span class="line"></span><br><span class="line">2、在资源清单添加存活性探针的检验功能</span><br><span class="line">[root@master01 kubernetes]# vim ivenssprobe.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: ivenssprobe-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: ivenssprobe</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginx-data</span><br><span class="line">    hostPath:</span><br><span class="line">     path: /data/nginx</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"><span class="comment">#使用启动钩子给nginx一个初始页面，初始化容器或者启动钩子都行，不然挂载出来没页面</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 存活性探针&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    livenessProbe:</span><br><span class="line">      <span class="built_in">exec</span>:</span><br><span class="line"><span class="comment">#检测主页面，拿命令检测，当返回值不为0就是失败</span></span><br><span class="line">        <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;cat /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line"><span class="comment">#一定要写优化参数</span></span><br><span class="line">      <span class="comment">#延迟时间3s</span></span><br><span class="line">      initialDelaySeconds: 3 </span><br><span class="line">      <span class="comment">#容器每隔2s检测一次</span></span><br><span class="line">      periodSeconds: 2</span><br><span class="line">      <span class="comment">#超时时间 1s</span></span><br><span class="line">      timeoutSeconds: 1</span><br><span class="line">      <span class="comment">#成功之后3次连续失败，才是真失败，然后重新去拉起，避免网络波动的情况</span></span><br><span class="line">      failureThreshold: 3</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">      </span><br><span class="line">3、查看</span><br><span class="line">[root@master01 kubernetes]#  kubectl apply -f ivenssprobe.yml </span><br><span class="line">pod/ivenssprobe-pod created</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod ivenssprobe-pod -owide</span><br><span class="line">NAME              READY   STATUS    RESTARTS   AGE   IP          NODE  </span><br><span class="line">ivenssprobe-pod   1/1     Running   0          64s   10.2.1.12   node01</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">参数解释：</span><br><span class="line"></span><br><span class="line">initialDelaySeconds: <span class="comment">#第一次执行探针需要在容器启动后等待的时候时间</span></span><br><span class="line">periodSeconds: <span class="comment">#容器启动后每隔多少秒执行一次存活探针(心跳检测的间隔时间)</span></span><br><span class="line">timeoutSeconds: <span class="comment">#探针超时时间，默认1秒，最小1秒</span></span><br><span class="line">successThreshold: <span class="comment">#探针失败后最少连续探测成功多少次才被认定成功，默认1次，如果是liveness必须为1(一开始检测一个网站是403，代表网站失败，不可能一失败就立马去重新拉起pod,需要检查到几次成功才认为是成功的)</span></span><br><span class="line">failureThreshold: <span class="comment">#探针成功后被视为失败的探测的最小连续失败次数。默认3次。最小值为1(探针检测成功容器正常运行，那么还要检测几次失败才会重新拉起这个pod)</span></span><br></pre></td></tr></table></figure><p>再次测试  访问网页  10.0.0.201:30000  恢复正常</p><p><img src="../image/study_img/image-20240920173329296.png" alt="image-20240920173329296"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">test</span> k8s 存活性探针</span><br><span class="line">[root@node01 ~]# <span class="built_in">rm</span> -rf /data</span><br><span class="line">[root@node01 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">test</span> k8s 存活性探针</span><br><span class="line">[root@node01 ~]# <span class="built_in">rm</span> -rf /data</span><br><span class="line">[root@node01 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">cat</span>: /data/nginx/index.html: No such file or directory</span><br><span class="line">[root@node01 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">cat</span>: /data/nginx/index.html: No such file or directory</span><br><span class="line">[root@node01 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">test</span> k8s 存活性探针</span><br><span class="line"></span><br><span class="line">删掉主页面，查看主页面内容，会重新拉起，所以会看到内容</span><br><span class="line"></span><br><span class="line">但是<span class="built_in">exec</span>有缺陷，以后代码页面多，不能<span class="built_in">cat</span>，所以Httpget比较好用</span><br></pre></td></tr></table></figure><ul><li>2、存活性探针  httpget版</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">1、删除旧的pod</span><br><span class="line">[root@master01 kubernetes]# kubectl delete pod ivenssprobe-pod </span><br><span class="line"></span><br><span class="line">2、在资源清单添加存活性探针的检验功能</span><br><span class="line">[root@master01 kubernetes]# vim ivenssprobe.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: ivenssprobe-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: ivenssprobe</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginx-data</span><br><span class="line">    hostPath:</span><br><span class="line">     path: /data/nginx</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"><span class="comment">#使用启动钩子给nginx一个初始页面，初始化容器或者启动钩子都行，不然挂载出来没页面</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 存活性探针&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    livenessProbe:</span><br><span class="line">    <span class="comment">#http版本</span></span><br><span class="line">      httpGet:</span><br><span class="line">      <span class="comment">#host就是本机，但是可以默认就是本机，不需要写</span></span><br><span class="line">        <span class="comment">#host: 127.0.0.1</span></span><br><span class="line"><span class="comment">#path就是uri   http://k8s.driverzeng.com/v1.19/,比如说这个网站的uri就是/v1.19/     http://10.0.0.201:30000/，uri就是/</span></span><br><span class="line">        path: /</span><br><span class="line">      <span class="comment">#还可以加上端口</span></span><br><span class="line">        port: 80</span><br><span class="line">      </span><br><span class="line"><span class="comment">#一定要写优化参数</span></span><br><span class="line">      <span class="comment">#延迟时间3s</span></span><br><span class="line">      initialDelaySeconds: 3 </span><br><span class="line">      <span class="comment">#容器每隔2s检测一次</span></span><br><span class="line">      periodSeconds: 2</span><br><span class="line">      <span class="comment">#超时时间 1s</span></span><br><span class="line">      timeoutSeconds: 1</span><br><span class="line">      <span class="comment">#成功之后3次连续失败，才是真失败，然后重新去拉起，避免网络波动的情况</span></span><br><span class="line">      failureThreshold: 3</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line">不写host是因为不知道pod起来是什么ip,但以后得写，以后不可能吧nginx和mysql起在一个pod,数据库肯定要单独起一个pod</span><br><span class="line"></span><br><span class="line">3、查询</span><br><span class="line">[root@master01 kubernetes]#  kubectl delete pod ivenssprobe-pod </span><br><span class="line">pod <span class="string">&quot;ivenssprobe-pod&quot;</span> deleted</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f ivenssprobe.yml </span><br><span class="line">pod/ivenssprobe-pod created</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod ivenssprobe-pod -owide</span><br><span class="line">NAME              READY   STATUS    RESTARTS   AGE   IP          NODE  </span><br><span class="line">ivenssprobe-pod   1/1     Running   0          26s   10.2.1.13   node01</span><br><span class="line"></span><br><span class="line">4、#测试</span><br><span class="line">到node01删除主页文件</span><br><span class="line">[root@node01 ~]# <span class="built_in">rm</span> -rf /data</span><br><span class="line">速度快点，切换到浏览器网站，会看到403，一直刷新，网站就会恢复原样，不需要去<span class="built_in">cat</span>主页文件了</span><br><span class="line"></span><br><span class="line">查看主页文件，恢复原样</span><br><span class="line">[root@node01 ~]# <span class="built_in">cat</span> /data/nginx/index.html </span><br><span class="line"><span class="built_in">test</span> k8s 存活性探针</span><br><span class="line"></span><br><span class="line"><span class="comment">#好处是监测它的80端口，访问这个uri，只要出现状态码40几，50几就会重新拉起，想wordpress这种代码多的情况下，不能用cat命令不可能每个文件都cat,所以httpget是检测nginx最后的方法</span></span><br></pre></td></tr></table></figure><ul><li>3、存活性探针  tcpSocket版   应用场景：比如说数据库，只有端口，没有网站</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">只能检测端口，不会检测页面，删掉页面，没有用，不会重新拉起，httpGet就相当于底层使用curl命令去检测</span><br><span class="line"></span><br><span class="line">tcpSocket: </span><br><span class="line">  host:     <span class="comment">#默认可以不写，他自己知道pod的ip,所以可以不写</span></span><br><span class="line">  port:     <span class="comment">#端口。如果只检测端口，页面删除没有意义，不会拉起</span></span><br><span class="line"></span><br><span class="line">1、在资源清单添加存活性探针的检验功能</span><br><span class="line">[root@master01 kubernetes]# vim ivenssprobe.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: ivenssprobe-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: ivenssprobe</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginx-data</span><br><span class="line">    hostPath:</span><br><span class="line">     path: /data/nginx</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"><span class="comment">#使用启动钩子给nginx一个初始页面，初始化容器或者启动钩子都行，不然挂载出来没页面</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 存活性探针&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    livenessProbe:</span><br><span class="line">      <span class="comment">#tcpSocket版</span></span><br><span class="line">      tcpSocket:</span><br><span class="line">        port: 80</span><br><span class="line">      </span><br><span class="line"><span class="comment">#一定要写优化参数</span></span><br><span class="line">      <span class="comment">#延迟时间3s</span></span><br><span class="line">      initialDelaySeconds: 3 </span><br><span class="line">      <span class="comment">#容器每隔2s检测一次</span></span><br><span class="line">      periodSeconds: 2</span><br><span class="line">      <span class="comment">#超时时间 1s</span></span><br><span class="line">      timeoutSeconds: 1</span><br><span class="line">      <span class="comment">#成功之后3次连续失败，才是真失败，然后重新去拉起，避免网络波动的情况</span></span><br><span class="line">      failureThreshold: 3</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">2、删除旧pod，运行新pod</span><br><span class="line">[root@master01 kubernetes]# kubectl delete pod ivenssprobe-pod &amp;&amp; kubectl apply -f ivenssprobe.yml </span><br><span class="line">pod <span class="string">&quot;ivenssprobe-pod&quot;</span> deleted</span><br><span class="line">pod/ivenssprobe-pod created</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod ivenssprobe-pod  -owide</span><br><span class="line">NAME              READY   STATUS    RESTARTS   AGE     IP          NODE  </span><br><span class="line">ivenssprobe-pod   1/1     Running   0          8m58s   10.2.1.14   node01</span><br><span class="line"></span><br><span class="line">3、连接进入容器，断开端口</span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it ivenssprobe-pod -c nginx-container -- /bin/sh</span><br><span class="line">/ <span class="comment">#  nginx -s stop</span></span><br><span class="line">执行之后容器会自动退出，因为存活性探针检测到端口不见了，把就容器删除，就会被强制踢出来</span><br></pre></td></tr></table></figure><p>2、就绪性探针</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#就绪性探针(就绪态探针) readnissprobe  </span></span><br><span class="line">就绪性探针配置语法和存活探针基本一样</span><br><span class="line"></span><br><span class="line">有时候我们Pod本身已经起来了，但是pod的容器还没有完全准备好对外提供服务，那么这时候流量进来就会造成请求失败的情况出现，针对这种情况k8s有一种探针叫就绪探针，他的作用就是让k8s知道你的Pod内应用是否准备好为请求提供服务。只有就绪探针ok了才会把流量转发到pod上。</span><br><span class="line"></span><br><span class="line">应用场景：比如说数据库需要初始化，初始化的时候速度比较慢，nginx容器起来的速度快，但是数据库没起来，访问肯定是502，就好比gitlab,nginx起来了，组件没起来，访问显示502，就绪探针就是等数据起来，才对外提供服务(就是浏览器正常访问)</span><br><span class="line">但是想要检测，就要用到service资源</span><br></pre></td></tr></table></figure><p>编写资源清单：需求</p><p>nginx的pod启动，前提条件是数据库pod也启动起来，并且数据库已初始化完了，然后再对外提供服务</p><ul><li>就绪探针  exec命令版</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">1、编写资源清单</span><br><span class="line">[root@master01 kubernetes]# vim readnessprobe.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: readnessprobe-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: readnessprobe</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginx-data</span><br><span class="line">    hostPath:</span><br><span class="line">     path: /data/nginx</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"><span class="comment">#使用启动钩子给nginx一个初始页面，初始化容器或者启动钩子都行，不然挂载出来没页面</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 就绪性探针readnessprobe&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    livenessProbe:</span><br><span class="line">      httpGet:</span><br><span class="line">        path: /</span><br><span class="line">        port: 80</span><br><span class="line"><span class="comment">#就绪性探针写法</span></span><br><span class="line">    readinessProbe:</span><br><span class="line">      <span class="built_in">exec</span>:</span><br><span class="line"><span class="comment">#检测文件是否有内容，如果没有文件就没有就绪</span></span><br><span class="line">        <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;cat /usr/share/nginx/html/healthy.html&quot;</span>]</span><br><span class="line">      </span><br><span class="line"><span class="comment">#一定要写优化参数</span></span><br><span class="line">      <span class="comment">#延迟时间3s</span></span><br><span class="line">      initialDelaySeconds: 3 </span><br><span class="line">      <span class="comment">#容器每隔2s检测一次</span></span><br><span class="line">      periodSeconds: 2</span><br><span class="line">      <span class="comment">#超时时间 1s</span></span><br><span class="line">      timeoutSeconds: 1</span><br><span class="line">      <span class="comment">#成功之后3次连续失败，才是真失败，然后重新去拉起，避免网络波动的情况</span></span><br><span class="line">      failureThreshold: 3</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">但是现在没有/usr/share/nginx/html/healthy.html这个文件，那容器肯定是一直不就绪的</span><br><span class="line"></span><br><span class="line">2、删除旧pod,创建新pod</span><br><span class="line">[root@master01 kubernetes]# kubectl delete pod ivenssprobe-pod</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f readnessprobe.yml </span><br><span class="line">pod/readnessprobe-pod created</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod readnessprobe-pod -owide</span><br><span class="line">NAME                READY   STATUS    RESTARTS   AGE   IP          NODE </span><br><span class="line">readnessprobe-pod   0/1     Running   0          69s   10.2.1.15   node01</span><br><span class="line"></span><br><span class="line">READY一直显示0/1,一直不就绪，就不对外提供流量，不对外提供流量，但是页面可以访问</span><br><span class="line">[root@master01 kubernetes]# curl 10.2.1.15</span><br><span class="line"><span class="built_in">test</span> k8s 就绪性探针readnessprobe</span><br><span class="line"></span><br><span class="line"><span class="comment">#对外提供流量前面要加负载均衡和端口映射，得用service负载出来</span></span><br><span class="line">3、编写service资源清单</span><br><span class="line">[root@master01 kubernetes]# <span class="built_in">cp</span> ivenssprobe-service.yml readnessprobe-service.yml</span><br><span class="line">[root@master01 kubernetes]# vim readnessprobe-service.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: readnessprobe-service</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: readnessprobe</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">    <span class="comment">#不能端口冲突，所以端口需要改一下</span></span><br><span class="line">    nodePort: 30001</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line"></span><br><span class="line">4、启动并查看</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f readnessprobe-service.yml</span><br><span class="line">service/readnessprobe-service created</span><br><span class="line">[root@master01 kubernetes]# kubectl get svc</span><br><span class="line">NAME                    TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes              ClusterIP   10.1.0.1      &lt;none&gt;        443/TCP        7d9h</span><br><span class="line">readnessprobe-service   NodePort    10.1.234.20   &lt;none&gt;        80:30001/TCP   17s</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1、测试curl</span><br><span class="line">[root@master01 kubernetes]# curl 10.1.234.20</span><br><span class="line">curl: (7) Failed connect to 10.1.234.20:80; Connection refused</span><br><span class="line">没有结果，因为就绪探针没有就绪</span><br><span class="line"></span><br><span class="line">2、在node节点映射的宿主机目录创建就绪文件</span><br><span class="line">[root@node01 ~]# <span class="built_in">touch</span> /data/nginx/healthy.html</span><br><span class="line"></span><br><span class="line">3、到master查看就绪状态，已经变成就绪完成</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod readnessprobe-pod -owide</span><br><span class="line">NAME                READY   STATUS    RESTARTS   AGE   IP          NODE  </span><br><span class="line">readnessprobe-pod   1/1     Running   0          16m   10.2.1.15   node01</span><br><span class="line">[root@master01 kubernetes]#  curl 10.1.234.20</span><br><span class="line"><span class="built_in">test</span> k8s 就绪性探针readnessprobe</span><br><span class="line"></span><br><span class="line">4、检查已经对外提供服务了</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240920201911358.png" alt="image-20240920201911358"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">5、删除就绪文件，curl失败，未就绪，网站无法访问</span><br><span class="line">[root@node01 ~]# <span class="built_in">rm</span> -rf /data/nginx/healthy.html</span><br><span class="line">[root@master01 kubernetes]#  curl 10.1.234.20</span><br><span class="line">curl: (7) Failed connect to 10.1.234.20:80; Connection refused</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod readnessprobe-pod -owide</span><br><span class="line"></span><br><span class="line">pod的ip可以通，代表对内提供服务</span><br><span class="line">[root@master01 kubernetes]# curl 10.2.1.15</span><br><span class="line"><span class="built_in">test</span> k8s 就绪性探针readnessprobe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如上是就绪探针的使用方法，但是正常不会这样子做，就像起wp,就要检测数据库有没有准备好</span><br></pre></td></tr></table></figure><p>nginx和mysql，检测mysql是否就绪，就像就对外提供服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 kubernetes]# vim readness-mysql.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: readnessprobe-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: readnessprobe</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginx-data</span><br><span class="line">    hostPath:</span><br><span class="line">     path: /data/nginx</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"><span class="comment">#使用启动钩子给nginx一个初始页面，初始化容器或者启动钩子都行，不然挂载出来没页面</span></span><br><span class="line">    lifecycle: </span><br><span class="line">      postStart: </span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo &#x27;test k8s 就绪性探针readnessprobe&#x27; &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">    livenessProbe:</span><br><span class="line">      httpGet:</span><br><span class="line">        path: /</span><br><span class="line">        port: 80</span><br><span class="line"><span class="comment">#就绪性探针写法  #要检测数据只能用tcpsocket,除非是这个网站启动要依赖其他网站就用httpGet:</span></span><br><span class="line">    readinessProbe:</span><br><span class="line">      tcpSocket:</span><br><span class="line">        port: 3306</span><br><span class="line">      </span><br><span class="line"><span class="comment">#一定要写优化参数，存活性探针设置的频率要比就绪探针慢一些</span></span><br><span class="line">      <span class="comment">#延迟时间3s</span></span><br><span class="line">      initialDelaySeconds: 3 </span><br><span class="line">      <span class="comment">#容器每隔2s检测一次</span></span><br><span class="line">      periodSeconds: 2</span><br><span class="line">      <span class="comment">#超时时间 1s</span></span><br><span class="line">      timeoutSeconds: 1</span><br><span class="line">      successThreshold: 3</span><br><span class="line">      <span class="comment">#成功之后3次连续失败，才是真失败，然后重新去拉起，避免网络波动的情况</span></span><br><span class="line">      failureThreshold: 3</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginx-data</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">  - name: mysql-container</span><br><span class="line">    image: mysql:5.7.44</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">    - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">      value: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    <span class="comment">#后面的优化，探针可以继续写</span></span><br><span class="line"></span><br><span class="line">2、启动检查</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f readness-mysql.yml</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod readnessprobe-pod</span><br><span class="line">NAME                READY   STATUS    RESTARTS   AGE</span><br><span class="line">readnessprobe-pod   1/2     Running   0          62s</span><br><span class="line"></span><br><span class="line">1/2是因为数据库没有写就绪探针，如果写了，就是0/2,数据库的就绪探针就写检测自己的3306端口</span><br><span class="line">等待一会，mysql初始化完成就绪完成</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod readnessprobe-pod</span><br><span class="line">NAME                READY   STATUS    RESTARTS   AGE</span><br><span class="line">readnessprobe-pod   2/2     Running   0          18s</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl get svc </span><br><span class="line">NAME                    TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes              ClusterIP   10.1.0.1      &lt;none&gt;        443/TCP        7d10h</span><br><span class="line">readnessprobe-service   NodePort    10.1.234.20   &lt;none&gt;        80:30001/TCP   52m</span><br><span class="line">[root@master01 kubernetes]# curl 10.1.234.20</span><br><span class="line"><span class="built_in">test</span> k8s 就绪性探针readnessprobe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#存活探针和就绪探针同时存在的情况下，数据库没有准备好就不就绪，页面就一直是502，出现502，存活探针频率配高了，检测到有问题就会重新拉起，这样就进入死循环，如果2个容器在一个pod里，数据永远起不来，因为把pod删了，会重新创建，进入死循环，所以存活探针要比就绪探针设置的频率慢</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">一：wordpress镜像</span><br><span class="line">在一个POD里启动两个容器</span><br><span class="line">- wordpress</span><br><span class="line">- mysql5.7</span><br><span class="line">1.就绪性探针</span><br><span class="line">2.存活性探针</span><br><span class="line">3.启动钩子</span><br><span class="line">4.停止钩子</span><br><span class="line">5.初始化容器</span><br><span class="line"></span><br><span class="line">二：尝试 wordpress 启动一个POD</span><br><span class="line">MySQL单独启动在一个POD里,如何连接，才能让网站能够正常访问</span><br><span class="line"></span><br><span class="line">三：尝试 nginx 和 php环境分开装，部署代码</span><br><span class="line">fastcgi_pass unix://dev/shm/php.sock</span><br><span class="line"></span><br><span class="line">一开始是这样子写的fastcgi_pass 127.0.0.1:9000，但是现在要分开安装，就要写内外ip  fastcgi_pass 172.16.1.8:9000</span><br><span class="line">测试，上传图片</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用资源清单编写初始化容器，钩子，探针</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>🍉4、标签的设置及使用</title>
    <link href="https://www.fomal.cc/posts/4666867d.html"/>
    <id>https://www.fomal.cc/posts/4666867d.html</id>
    <published>2024-09-22T06:45:27.000Z</published>
    <updated>2024-09-22T07:53:34.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、标签的设置及使用">1、标签的设置及使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">kubectl get  [资源] -n [名称空间] --show-labels</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看node标签</span></span><br><span class="line">[root@master01 ~]# kubectl get nodes --show-labels</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看pod的标签</span></span><br><span class="line">[root@master01 ~]# kubectl get  pod -n kube-flannel --show-labels</span><br><span class="line"></span><br><span class="line"><span class="comment">#给node打标签</span></span><br><span class="line">[root@master01 ~]# kubectl label node node01 MEM=16G</span><br><span class="line">node/node01 labeled</span><br><span class="line">[root@master01 ~]# kubectl get nodes --show-labels</span><br><span class="line"></span><br><span class="line"><span class="comment">#给node打角色标签：为了区分项目名，或者配置</span></span><br><span class="line">node-role  角色标签的接口</span><br><span class="line">node-role.kubernetes.io  标识调角色标签的接口</span><br><span class="line">=变成-号，就是删除角色标签  node-</span><br><span class="line">node=  ：表示给角色打的标签名叫node</span><br><span class="line"></span><br><span class="line">[root@master01 ~]# kubectl label node node01 node-role.kubernetes.io/node=</span><br><span class="line">[root@master01 ~]# kubectl get nodes</span><br><span class="line">NAME       STATUS   ROLES    AGE     VERSION</span><br><span class="line">master01   Ready    master   5d23h   v1.19.3</span><br><span class="line">node01     Ready    node     5d23h   v1.19.3</span><br><span class="line">node02     Ready    node     5d23h   v1.19.3</span><br><span class="line">node03     Ready    node     5d23h   v1.19.3</span><br></pre></td></tr></table></figure><p><font color=red><strong>给pod打标签的方法：    如果不资源清单里面不写标签，起来的pod就没有标签，不会存在默认标签的说法，所以资源清单里面一定要写标签</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#给pod打标签为了以后通信用</span></span><br><span class="line">方法一：</span><br><span class="line">使用命令打标签：(一般很少用命令打标签，以后起pod是用资源清单的，所以在资源清单里面打标签比较常用)</span><br><span class="line">[root@master01 ~]# kubectl label pod kube-flannel-ds-4ncf5 run=flannel -n kube-flannel </span><br><span class="line">kube-flannel-ds-4ncf5：Pod名</span><br><span class="line">run=flannel：标签名</span><br><span class="line">kube-flannel：名称空间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line"><span class="comment">#给Pod打标签(用资源清单打，比较常用)</span></span><br><span class="line">[root@master01 kubernetes]# vim nginx-label.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata: </span><br><span class="line">  name: nginx-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    run: nginx</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx:alpine</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"></span><br><span class="line">运行资源清单 </span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx-label.yml </span><br><span class="line">查看</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod --show-labels</span><br><span class="line">NAME           READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">nginx-pod      1/1     Running   0          23s   run=nginx</span><br></pre></td></tr></table></figure><p>将pod起到指定的node上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">上面执行了命令给node01打MEM=16G的标签</span><br><span class="line">[root@master01 ~]# kubectl label node node01 MEM=16G</span><br><span class="line"></span><br><span class="line">将pod起在MEM=16的节点上</span><br><span class="line"><span class="comment">#启动pod在指定标签的node上</span></span><br><span class="line">[root@master01 kubernetes]# vim nginx2-label.yml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata: </span><br><span class="line">  name: nginx-pod-v2</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    run: nginx</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container-v2</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="comment">#将pod起在MEM=16的节点上</span></span><br><span class="line">  nodeSelector:</span><br><span class="line">    MEM: 16G</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#(一般来说不写如下内容，因为k8s会做资源计算和调度，但是在起redis或者数据库这种pod的时候，他两对内存的使用比较大，建议不要起在同一个机器上，这个情况就要使用如下命令了，避免k8s自己资源计算，将redis、mysql起在同一个机器) </span></span><br><span class="line">  nodeSelector:</span><br><span class="line">    MEM: 16G</span><br><span class="line"> </span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx2-label.yml </span><br><span class="line">pod/nginx-pod-v2 created</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-pod                1/1     Running   0          17m</span><br><span class="line">nginx-pod-v2             1/1     Running   0          32s</span><br><span class="line">查看起在node01上的</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod nginx-pod-v2  -o wide</span><br><span class="line">NAME           READY   STATUS    RESTARTS   AGE     IP         NODE  </span><br><span class="line">nginx-pod-v2   1/1     Running   0          6m26s   10.2.1.4   node01</span><br></pre></td></tr></table></figure><p>删除标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1、先查看</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod --show-labels</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">nginx-pod                1/1     Running   0          31m   run=nginx</span><br><span class="line">nginx-pod-v2             1/1     Running   0          14m   run=nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#删除标签</span><br><span class="line">kubectl label [资源] [资源名] [标签名/标签key]-</span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# kubectl label pod nginx-pod-v2 run-</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod --show-labels</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">nginx-pod                1/1     Running   0          32m   run=nginx</span><br><span class="line">nginx-pod-v2             1/1     Running   0          15m   &lt;none&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据标签查找pod</span></span><br><span class="line">3、查看哪些pod打了run=nginx的标签，打了这个标签的都会被列出来</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -l run=nginx</span><br><span class="line">NAME        READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-pod   1/1     Running   0          35m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据标签删除pod</span></span><br><span class="line">4、打了标签比较方便，可以根据标签去筛选，还可以根据标签去删除pod</span><br><span class="line">[root@master01 kubernetes]# kubectl delete pod -l run=nginx</span><br><span class="line">pod <span class="string">&quot;nginx-pod&quot;</span> deleted</span><br><span class="line"></span><br><span class="line">  但是一个pod里面起2个容器怎么连</span><br><span class="line">  -c 永远只有3个引号</span><br><span class="line">  默认连第一个容器</span><br><span class="line">  -c指定容器名</span><br><span class="line">  <span class="comment">#当一个pod中有多个容器时</span></span><br></pre></td></tr></table></figure><p>连接到pod     容器可以使用命令连接进去，pod也可以使用命令连接进去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#连接到一个pod</span></span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it  nginx-pod-v2 -- /bin/sh</span><br><span class="line">/ <span class="comment"># ls</span></span><br><span class="line">bin           etc  </span><br><span class="line"></span><br><span class="line">--：相当于分隔符,--后面的所有都是命令</span><br><span class="line"></span><br><span class="line"><span class="comment">#问题：一个pod里面起2个容器怎么连？</span></span><br><span class="line">1、编写一个pod起2个容器的资源清单</span><br><span class="line">[root@master01 kubernetes]# vim nginx-busybox.yml</span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Pod&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-busybox</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: busybox-container</span><br><span class="line">    image: busybox</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;tail -f /etc/hosts&quot;</span>]</span><br><span class="line"> <span class="comment">#-c：表示永远只有3个引号，第3个引号可以写长的命令</span></span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"></span><br><span class="line">2、运行pod,并查看pod是否起来，查看pod起在哪个机器</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f nginx-busybox.yml </span><br><span class="line">pod/nginx-busybox created</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-5f5d9d69c4-d8hvx   1/1     Running   0          19h</span><br><span class="line">nginx-busybox            2/2     Running   0          8s</span><br><span class="line">nginx-pod-v2             1/1     Running   0          43m</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod nginx-busybox -o wide</span><br><span class="line">NAME            READY   STATUS    RESTARTS   AGE     IP         NODE  </span><br><span class="line">nginx-busybox   2/2     Running   0          3m34s   10.2.2.5   node02</span><br><span class="line"></span><br><span class="line">3、连接进入容器</span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it nginx-busybox -- /bin/sh</span><br><span class="line">/ <span class="comment"># ls -l /usr</span></span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x    2 root     root            17 May 18  2023 bin</span><br><span class="line">drwxr-xr-x    2 daemon   daemon           6 May 18  2023 sbin</span><br><span class="line"></span><br><span class="line">该目录没有站点目录，所以进去的busybox容器，所以默认连第一个容器</span><br><span class="line"></span><br><span class="line">4、如果需要连接指定的容器，需要使用选项-c指定</span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it nginx-busybox -c nginx-container -- /bin/sh</span><br><span class="line">/ <span class="comment"># ls -l /usr/share/nginx/html/</span></span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--    1 root     root           497 Aug 14 06:12 50x.html</span><br><span class="line">-rw-r--r--    1 root     root           615 Aug 14 06:12 index.html</span><br><span class="line"></span><br><span class="line">-c：连接到指定的容器名</span><br><span class="line"></span><br><span class="line">作用：k8s只需要在master上操作，就可以连到需要连的容器</span><br></pre></td></tr></table></figure><h2 id="2、重新认识Pod">2、<strong>重新认识Pod</strong></h2><p>共享网络</p><p><img src="../image/study_img/image-20240919110354547.png" alt="image-20240919110354547"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、Pod内的容器使用Container模式共享根容器的网络</span><br><span class="line">2、容器看到的网络设备信息和根容器完全相同</span><br><span class="line">3、Pod内的多个容器可以使用localhost进行网络通讯</span><br><span class="line">4、Pod内的多个容器不能绑定相同的端口</span><br><span class="line">5、Pod的生命周期和根容器一样，如果根容器退出，Pod就退出</span><br></pre></td></tr></table></figure><h2 id="3、共享文件系统">3、<strong>共享文件系统</strong></h2><h3 id="1、本地共享储存">1、<strong>本地共享储存</strong></h3><p><img src="../image/study_img/image-20240919165826698.png" alt="image-20240919165826698"></p><p>第一种：hostPath  本地的映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行数据库</span></span><br><span class="line">docker run \</span><br><span class="line">--name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=wp_db \</span><br><span class="line">-e MYSQL_USER=wp_user \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:5.7.44</span><br><span class="line"></span><br><span class="line">1、编写资源清单</span><br><span class="line">[root@master01 kubernetes]# vim wp.yml</span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Pod&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: mysql57-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: mysql57</span><br><span class="line">    run: mysql57</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment">#设置挂载映射的写法   指定宿主机的挂载目录</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: mysql-data       <span class="comment">#名字一定要写，设置挂载的变量，相当于变量名</span></span><br><span class="line">    hostPath:</span><br><span class="line">      path: /data/mysql    <span class="comment">#宿主机的目录，相当于变量值</span></span><br><span class="line">  - name: test-data</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /opt/test</span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: mysql57-container</span><br><span class="line">    image: mysql:5.7.44</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">    - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;123&quot;</span></span><br><span class="line">    - name: MYSQL_DATABASE</span><br><span class="line">      value: <span class="string">&quot;wp_db&quot;</span></span><br><span class="line">    - name: MYSQL_USER</span><br><span class="line">      value: <span class="string">&quot;wp_user&quot;</span></span><br><span class="line">    - name: MYSQL_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="comment">#指定字符集的写法</span></span><br><span class="line">    args:</span><br><span class="line">    - --character-set-server=utf8mb4</span><br><span class="line">    - --collation-server=utf8mb4_unicode_ci</span><br><span class="line"><span class="comment">#容器里面的目录挂载出来的写法</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: mysql-data             <span class="comment">#现在容器的目录要挂到宿主机的哪个目录，就写宿主机目录的变量名</span></span><br><span class="line">      mountPath: /var/lib/mysql    <span class="comment">#这里写容器里需要挂出来的目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###</span></span><br><span class="line">--xxx一般用args</span><br><span class="line">如果是一条完整的命令就用<span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">2、运行资源清单，并查看pod运行的node</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f mysql.yml </span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     IP          NODE  </span><br><span class="line">mysql57-pod              1/1     Running   0          3m42s   10.2.3.14   node03</span><br><span class="line"></span><br><span class="line">3、到node03节点查看目录是否映射</span><br><span class="line">[root@node03 ~]# ll /data/mysql/</span><br><span class="line">-rw-r----- 1 polkitd input       56 Sep 19 18:29 auto.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment">#目录映射出来了，如果mysql挂了，再拉起，数据是存在的，如果不做映射，k8s自动拉起，数据就会全部没有</span></span><br><span class="line"></span><br><span class="line">容器里面mysql用户的uid gid都是999，宿主机上uid为999的是polkitd,gid为999的是input，系统只认ID，不认字符串，字符串是给人看的，知道名字就更好区分</span><br><span class="line"></span><br><span class="line">4、连接到容器里面检查</span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it pod/mysql57-pod -- /bin/sh</span><br><span class="line">sh-4.2# mysql -uroot -p123</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">mysql&gt; <span class="keyword">select</span> host,user from mysql.user;</span><br><span class="line">mysql&gt; show create database wp_db;</span><br><span class="line">sh-4.2# mysql -uwp_user -p123</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:left">Behavior</th></tr></thead><tbody><tr><td style="text-align:left"><code>‌&quot;&quot;</code></td><td style="text-align:left">默认不需要创建，会自动创建</td></tr><tr><td style="text-align:left"><code>DirectoryOrCreate</code></td><td style="text-align:left">目录必须存在，权限必须是755</td></tr><tr><td style="text-align:left"><code>Directory</code></td><td style="text-align:left">目录必须存在</td></tr><tr><td style="text-align:left"><code>FileOrCreate</code></td><td style="text-align:left">文件必须存在，权限必须是644</td></tr><tr><td style="text-align:left"><code>File</code></td><td style="text-align:left">文件必须存在</td></tr><tr><td style="text-align:left"><code>Socket</code></td><td style="text-align:left">挂载socket文件</td></tr><tr><td style="text-align:left"><code>CharDevice</code></td><td style="text-align:left">挂载字符设备文件（键盘，鼠标，终端…）</td></tr><tr><td style="text-align:left"><code>BlockDevice</code></td><td style="text-align:left">挂载快设备文件（磁盘，U盘，移动硬盘…）</td></tr></tbody></table><p>第二种：emptyDir</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">1、编写资源清单</span><br><span class="line">[root@master01 kubernetes]# vim wp.yml</span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Pod&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: mysql57-pod</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: mysql57</span><br><span class="line">    run: mysql57</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment">#设置挂载映射的写法   指定宿主机的挂载目录</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: mysql-data       <span class="comment">#名字一定要写，设置挂载的变量，相当于变量名</span></span><br><span class="line">    hostPath:</span><br><span class="line">      path: /data/mysql    <span class="comment">#宿主机的目录，相当于变量值</span></span><br><span class="line">  - name: empty-data</span><br><span class="line">    emptyDir: &#123;&#125;           <span class="comment">#默认是空的话就写&#123;&#125;</span></span><br><span class="line">      </span><br><span class="line">  containers:</span><br><span class="line">  - name: mysql57-container</span><br><span class="line">    image: mysql:5.7.44</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">    - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;123&quot;</span></span><br><span class="line">    - name: MYSQL_DATABASE</span><br><span class="line">      value: <span class="string">&quot;wp_db&quot;</span></span><br><span class="line">    - name: MYSQL_USER</span><br><span class="line">      value: <span class="string">&quot;wp_user&quot;</span></span><br><span class="line">    - name: MYSQL_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="comment">#指定字符集的写法</span></span><br><span class="line">    args:</span><br><span class="line">    - --character-set-server=utf8mb4</span><br><span class="line">    - --collation-server=utf8mb4_unicode_ci</span><br><span class="line"><span class="comment">#容器里面的目录挂载出来的写法</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: empty-data             <span class="comment">#现在容器的目录要挂到宿主机的哪个目录，就写宿主机目录的变量名</span></span><br><span class="line">      mountPath: /var/lib/mysql    <span class="comment">#这里写容器里需要挂出来的目录</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、删除node03的data目录</span><br><span class="line">[root@node03 ~]# <span class="built_in">rm</span> -rf /data/mysql/</span><br><span class="line"></span><br><span class="line">3、删除上一次实验起的pod,重新运行资源清单</span><br><span class="line">[root@master01 kubernetes]# kubectl delete pod  mysql57-pod</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f mysql.yml </span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     IP          NODE  </span><br><span class="line">mysql57-pod              1/1     Running   0          59s     10.2.3.24   node03</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、查询映射的datam目录</span><br><span class="line">[root@node03 ~]# docker inspect 1dd8436185b0</span><br><span class="line"><span class="comment">#查找Mounts</span></span><br><span class="line"><span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/kubelet/pods/b3994de1-53ba-4ccf-b3b1-a7bdc8f1b08d/volumes/kubernetes.io~empty-dir/empty-data&quot;</span>,</span><br><span class="line"></span><br><span class="line">[root@node03 ~]# ll /var/lib/kubelet/pods/b3994de1-53ba-4ccf-b3b1-a7bdc8f1b08d/volumes/kubernetes.io~empty-dir/empty-data</span><br><span class="line">total 188484</span><br><span class="line">-rw-r----- 1 polkitd input       56 Sep 19 20:05 auto.cnf</span><br><span class="line"></span><br><span class="line">emptyDir: &#123;&#125;</span><br><span class="line">只是临时使用：随机的临时目录  容器删除，这个目录就会被删除，做不到持久化</span><br><span class="line"></span><br><span class="line">作用：在同一个Pod里,2个容器之间的文件是互相隔离的，想让他们互通某个目录就可以使用到，让2个容器同时都挂载到这个目录，这样子这两个容器就找到共享这个目录</span><br></pre></td></tr></table></figure><p>将一个POD内的两个容器共享目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">1、编写资源清单</span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Pod&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: c7-nginx</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: empty-data</span><br><span class="line">    emptyDir: &#123;&#125; </span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-container</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: empty-data</span><br><span class="line">      mountPath: /usr/share/nginx/html     </span><br><span class="line">      <span class="comment">#让busybox挂到宿主机的随机目录</span></span><br><span class="line"> </span><br><span class="line">  - name: c7-container</span><br><span class="line">    image: centos:7</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;tail -f /etc/hosts&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: empty-data</span><br><span class="line">      mountPath: /opt/html    </span><br><span class="line">      <span class="comment">#让c7挂到宿主机的随机目录</span></span><br><span class="line">      <span class="comment">#都是挂到宿主机的临时目录，这两个目录里面的文件肯定是互通的</span></span><br><span class="line">      </span><br><span class="line">2、运行资源清单，并查看pod运行的node</span><br><span class="line">[root@master01 kubernetes]# kubectl apply -f c7-busybox-emptyDir.yml </span><br><span class="line">pod/c7-nginx created</span><br><span class="line">[root@master01 kubernetes]# kubectl get pod -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     IP          NODE  </span><br><span class="line">c7-nginx                 2/2     Running   0          5s      10.2.3.30   node03</span><br><span class="line"></span><br><span class="line">3、测试2个容器是否共享了目录</span><br><span class="line">[root@node03 ~]# docker inspect dbb9f576eacd</span><br><span class="line">        <span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/kubelet/pods/bed3c777-7aff-4593-a7bc-f2bc3ed47827/volumes/kubernetes.io~empty-dir/empty-data&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/opt/html&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span><br><span class="line">                </span><br><span class="line">4、查看挂载的随机目录，是空的               </span><br><span class="line">[root@node03 ~]# ll /var/lib/kubelet/pods/bed3c777-7aff-4593-a7bc-f2bc3ed47827/volumes/kubernetes.io~empty-dir/empty-data</span><br><span class="line">total 0     </span><br><span class="line"></span><br><span class="line">5、连进容器里面查看挂载目录，是空的  </span><br><span class="line">[root@master01 kubernetes]# kubectl <span class="built_in">exec</span> -it c7-nginx -c nginx-container -- /bin/sh</span><br><span class="line">/ <span class="comment"># ls -l /usr/share/nginx/html/</span></span><br><span class="line"></span><br><span class="line">[root@master01 ~]# kubectl <span class="built_in">exec</span> -it c7-nginx -c c7-container -- /bin/bash</span><br><span class="line">[root@c7-nginx /]# <span class="built_in">ls</span> -l /opt/html/</span><br><span class="line">total 0</span><br><span class="line"></span><br><span class="line">6、进入随机目录，并且创建一个文件</span><br><span class="line">[root@node03 ~]# <span class="built_in">cd</span> /var/lib/kubelet/pods/bed3c777-7aff-4593-a7bc-f2bc3ed47827/volumes/kubernetes.io~empty-dir/empty-data</span><br><span class="line">[root@node03 empty-data]# <span class="built_in">echo</span> <span class="string">&quot;test 将一个POD内的两个容器共享目录&quot;</span> &gt; index.html</span><br><span class="line"></span><br><span class="line">7、进入容器，查看文件可以看到2个容器都可以看到创建的文件内容</span><br><span class="line">/ <span class="comment"># cat /usr/share/nginx/html/index.html </span></span><br><span class="line"><span class="built_in">test</span> 将一个POD内的两个容器共享目录</span><br><span class="line">/ <span class="comment"># curl 127.0.0.1</span></span><br><span class="line"><span class="built_in">test</span> 将一个POD内的两个容器共享目录</span><br><span class="line"></span><br><span class="line">[root@c7-nginx /]# <span class="built_in">cat</span> /opt/html/index.html </span><br><span class="line"><span class="built_in">test</span> 将一个POD内的两个容器共享目录</span><br><span class="line">[root@c7-nginx /]# curl 127.0.0.1</span><br><span class="line"><span class="built_in">test</span> 将一个POD内的两个容器共享目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#当Pod结束了，共享就结束了，如果数据很重要，需要持久化，emptyDir就不建议使用，就使用Hostoath</span></span><br><span class="line"></span><br><span class="line">一个pod起在node02,一个起在node03,只能用nfs共享</span><br><span class="line"></span><br><span class="line"><span class="built_in">command</span>后面的命令会让容器把后面的命令当初PID为1的进程，那条命令结束，进程就结束了</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">比如说想改nginx端口，想用8080，用资源清单怎么改配置文件</span><br><span class="line">pod不能自动拉取</span><br><span class="line">pod初始化容器，想临时改里面某些东西，比如说添加www用户，统一用户</span><br><span class="line"></span><br><span class="line">钩子 启动钩子：启动之前让他做一些事情</span><br><span class="line">停止钩子：pod结束了就停止钩子，结束之前想让他发邮件告警</span><br><span class="line">探针：k8s挂了可以重新拉起，那么pod没挂，但是网站是404或者50几，网站不能正常访问，但是k8s只检测pod有没有挂或者被删除，但是10个pod都是404，pod在，不会重新拉起，就要用探针</span><br><span class="line">存活探针 救续探针  自动扩缩容</span><br></pre></td></tr></table></figure><p><strong>wordpress镜像</strong></p><p>在一个POD里启动两个容器 wordpress和mysql5.7，用户上传数据的目录做持久化，该打标签的打标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行数据库</span></span><br><span class="line">docker run \</span><br><span class="line">--name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=wp_db \</span><br><span class="line">-e MYSQL_USER=wp_user \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:5.7.44</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行wordpress容器</span></span><br><span class="line">docker run \</span><br><span class="line">--name wp \</span><br><span class="line">--<span class="built_in">link</span> mysql57 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-e WORDPRESS_DB_HOST=mysql57 \</span><br><span class="line">-e WORDPRESS_DB_USER=wp_user \</span><br><span class="line">-e WORDPRESS_DB_PASSWORD=123 \</span><br><span class="line">-e WORDPRESS_DB_NAME=wp_db \</span><br><span class="line">-d wordpress-df:v2 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master01 kubernetes]# vim wp.yml</span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Namespace&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: wp</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: wp-pod</span><br><span class="line">  namespace: wp</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: wp-containers</span><br><span class="line">    image: wordpress-df:v2</span><br><span class="line">    imagePullPolicy: Never</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">    - name: WORDPRESS_DB_HOST</span><br><span class="line">      value: <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    - name: WORDPRESS_DB_USER</span><br><span class="line">      value: <span class="string">&quot;wp_user&quot;</span></span><br><span class="line">    - name: WORDPRESS_DB_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;123&quot;</span></span><br><span class="line">    - name: WORDPRESS_DB_NAME</span><br><span class="line">      value: <span class="string">&quot;wp_db&quot;</span></span><br><span class="line"></span><br><span class="line">  - name: mysql-containers</span><br><span class="line">    image: mysql:5.7.44</span><br><span class="line">    imagePullPolicy: Never</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 3306</span><br><span class="line">    <span class="built_in">env</span>:</span><br><span class="line">    - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;123&quot;</span></span><br><span class="line">    - name: MYSQL_DATABASE</span><br><span class="line">      value: <span class="string">&quot;wp_db&quot;</span></span><br><span class="line">    - name: MYSQL_USER</span><br><span class="line">      value: <span class="string">&quot;wp_user&quot;</span></span><br><span class="line">    - name: MYSQL_PASSWORD</span><br><span class="line">      value: <span class="string">&quot;123&quot;</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: db</span><br><span class="line">      mountPath: /var/lib/mysql</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">给pod打标签以及共享文件系统</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>🍉3、POD资源</title>
    <link href="https://www.fomal.cc/posts/763f53e4.html"/>
    <id>https://www.fomal.cc/posts/763f53e4.html</id>
    <published>2024-09-22T06:44:58.000Z</published>
    <updated>2024-09-22T07:53:34.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="POD资源的介绍">POD资源的介绍</h2><h3 id="1、kubernetes资源对象操作">1、<strong>kubernetes资源对象操作</strong></h3><table><thead><tr><th>资源对象</th><th>增</th><th>删</th><th>改</th><th>查</th></tr></thead><tbody><tr><td>nodes</td><td></td><td>kubectl delete node</td><td></td><td>kubectl get nodes</td></tr><tr><td>namespace</td><td>kubectl create ns  [资源名]</td><td>kubectl delete ns  [资源名]</td><td>kubectl edit ns  [资源名]</td><td>kubectl get ns</td></tr><tr><td>pod</td><td>kubectl create deployment [资源名]</td><td>kubectl delete pod  [pod名]</td><td></td><td>kubectl get pod</td></tr></tbody></table><p>1、nodes</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">增</span><br><span class="line"><span class="comment">#忘记node加入master集群命令,那么需要重新执行如下命令</span></span><br><span class="line">[root@master01 ~]# kubeadm token create --print-join-command</span><br><span class="line"></span><br><span class="line">删</span><br><span class="line">kubectl delete node</span><br><span class="line"></span><br><span class="line">查</span><br><span class="line"><span class="comment">#查看集群节点状态</span></span><br><span class="line">[root@master01 ~]# kubectl get nodes</span><br><span class="line">NAME       STATUS   ROLES    AGE    VERSION</span><br><span class="line">master01   Ready    master   5d2h   v1.19.3</span><br><span class="line">node01     Ready    &lt;none&gt;   5d2h   v1.19.3</span><br><span class="line">node02     Ready    &lt;none&gt;   5d2h   v1.19.3</span><br><span class="line">node03     Ready    &lt;none&gt;   5d2h   v1.19.3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看名称空间</span></span><br><span class="line">[root@master01 ~]# kubectl get ns</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   5d2h</span><br><span class="line">kube-flannel      Active   5d1h</span><br><span class="line">kube-node-lease   Active   5d2h</span><br><span class="line">kube-public       Active   5d2h</span><br><span class="line">kube-system       Active   5d2h</span><br></pre></td></tr></table></figure><p>2、namespace</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">增</span><br><span class="line">kubectl create ns  [资源名]</span><br><span class="line"></span><br><span class="line">删</span><br><span class="line">kubectl delete ns  [资源名]</span><br><span class="line"></span><br><span class="line">改</span><br><span class="line">kubectl edit ns  [资源名]</span><br><span class="line"></span><br><span class="line">查</span><br><span class="line">kubectl get ns </span><br></pre></td></tr></table></figure><p>3、pod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">查</span><br><span class="line"><span class="comment">#查看pod(默认查看default名称空间)</span></span><br><span class="line">[root@master01 ~]# kubectl get pod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看pod(查看指定的名称空间)</span></span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-flannel</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看帮助</span></span><br><span class="line">[root@master01 ~]# kubectl get pod --<span class="built_in">help</span></span><br><span class="line">-o或者--output：指定输出格式</span><br><span class="line">json：输出json格式</span><br><span class="line">yaml：输出yaml格式</span><br><span class="line">wide：输出详细信息</span><br><span class="line"></span><br><span class="line">-n：指定名称空间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定输出格式</span></span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-flannel -o json</span><br><span class="line"></span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-flannel </span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-flannel-ds-4ncf5   1/1     Running   0          5d2h</span><br><span class="line">kube-flannel-ds-7dnxx   1/1     Running   1          5d2h</span><br><span class="line">kube-flannel-ds-dpzqp   1/1     Running   0          5d2h</span><br><span class="line">kube-flannel-ds-knmch   1/1     Running   0          5d2h</span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-flannel kube-flannel-ds-4ncf5 -o json</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看指定的pod</span></span><br><span class="line">[root@master01 ~]# kubectl get pod nginx-5f5d9d69c4-pk4c4 -o yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出pod详细信息</span></span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-flannel -o wide</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE    IP           NODE       NOMINATED NODE   READINESS GATES</span><br><span class="line">kube-flannel-ds-4ncf5   1/1     Running   0          5d2h   10.0.0.203   node03     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-7dnxx   1/1     Running   1          5d2h   10.0.0.200   master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-dpzqp   1/1     Running   0          5d2h   10.0.0.201   node01     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-knmch   1/1     Running   0          5d2h   10.0.0.202   node02     &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">增</span><br><span class="line"><span class="comment">#创建pod(默认创建在default名称空间)</span></span><br><span class="line">kubectl create deployment pod名 --image=镜像:版本</span><br><span class="line">[root@master01 ~]# kubectl create deployment nginx --image=nginx:alpine</span><br><span class="line"></span><br><span class="line">删</span><br><span class="line"><span class="comment">#删除pod</span></span><br><span class="line">[root@master01 ~]# kubectl delete pod nginx-65cc99f84f-8k9rj</span><br><span class="line"></span><br><span class="line">改</span><br><span class="line"><span class="comment">#当创建pod，镜像名写错了，需要修改时</span></span><br><span class="line">[root@master01 ~]# kubectl edit deployment nginx </span><br><span class="line">就会进入像vi编辑器一样的东西，找到image，改后面的镜像名</span><br><span class="line"></span><br><span class="line">等待一会，这次查看pod,就会正常运行</span><br><span class="line">[root@master01 ~]#  kubectl get pod</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-5f5d9d69c4-pk4c4   1/1     Running   0          8m14s</span><br></pre></td></tr></table></figure><h3 id="2、POD的资源清单">2、<strong>POD的资源清单</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# vim nginx.yaml </span><br><span class="line">apiVersion: v1                        <span class="comment">## K8S资源接口</span></span><br><span class="line">kind: Pod                             <span class="comment">## 资源类型</span></span><br><span class="line">metadata:                             <span class="comment">## 资源的元数据</span></span><br><span class="line">  name: nginx-pod                     <span class="comment">## POD名字</span></span><br><span class="line">  namespace: default                  <span class="comment">## 资源启动在哪个名称空间</span></span><br><span class="line">spec:                                 <span class="comment">## 容器相关信息</span></span><br><span class="line">  containers:                         <span class="comment">## 容器信息</span></span><br><span class="line">  - image: nginx:alpine               <span class="comment">## 指定容器的镜像</span></span><br><span class="line">    imagePullPolicy: IfNotPresent     <span class="comment">## 镜像拉取规则  IfNotPresent：不存在则拉取</span></span><br><span class="line">    name: nginx-containers            <span class="comment">## 容器名字</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">Always：总是拉取，不管当前机器上是否有改镜像都拉取</span><br><span class="line">Never：从不拉取镜像，需要提前docker pull</span><br><span class="line">IfNotPresent：不存在则拉取</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#K8S资源接口：</span></span><br><span class="line">apiVersion: v1  </span><br><span class="line">可以理解为https://master的ip:6443/pod/v1一开始init初始化的时候就写了master的ip为10.0.0.200，会自动补全，可以理解为前面可以不写，会自动补全,这些接口全都注册在etcd里面</span><br><span class="line">https://10.0.0.200:6443/pod/v1</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240918150439792.png" alt="image-20240918150439792"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动pod</span></span><br><span class="line">[root@master01 ~]# kubectl create -f nginx.yml </span><br><span class="line">pod/nginx-pod created</span><br><span class="line">[root@master01 ~]# kubectl get pod</span><br><span class="line">nginx-pod                0/1     ContainerCreating   0          13s</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看这个pod起在哪个node</span></span><br><span class="line">[root@master01 ~]# kubectl get pod -o wide</span><br><span class="line">NAME                     READY   STATUS             RESTARTS   AGE     IP         NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-pod                0/1     ImagePullBackOff   0          4m49s   10.2.3.6   node03   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="3、手写资源清单">3、<strong>手写资源清单</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参考网址：http://k8s.driverzeng.com/v1.19/</span><br><span class="line">这4个必写的</span><br><span class="line"></span><br><span class="line">object数据类型写法：直接回车，和上一个缩进写key: value的形式</span><br><span class="line">[]列表数据类型写法：回车之后写一个减号-，再空格</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240918153235543.png" alt="image-20240918153235543"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">1、编写资源清单  <span class="comment"># 这里有坑，需要继续往下查看更新后的资源清单</span></span><br><span class="line">[root@master01 ~]# vim busybox.yml</span><br><span class="line"><span class="comment">#如果后面要指定名称空间，就要先创建名称空间</span></span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Namespace&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: aaa</span><br><span class="line"><span class="comment">#分隔符，分隔上面和下面的资源</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#这个是1个pod里面起2个容器</span></span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Pod&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: busybox-pod</span><br><span class="line">  namespace: aaa</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: busybox-containers</span><br><span class="line">    image: busybox</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line"> </span><br><span class="line">  - name: nginx-containers</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    </span><br><span class="line">2、启动资源</span><br><span class="line">[root@master01 ~]# kubectl apply -f busybox.yml </span><br><span class="line">namespace/aaa created</span><br><span class="line">pod/busybox-pod created</span><br><span class="line"></span><br><span class="line">3、查看名称空间里面起的资源，只看到一个</span><br><span class="line">[root@master01 ~]# kubectl get pod -n aaa</span><br><span class="line">NAME          READY   STATUS             RESTARTS   AGE</span><br><span class="line">busybox-pod   1/2     CrashLoopBackOff   3          94s</span><br><span class="line"></span><br><span class="line">4、由于名称空间里面起的资源，只看到一个，所以有问题，要检查原因排错</span><br><span class="line"><span class="comment">#排查命令</span></span><br><span class="line"><span class="comment">#kubectl describe [资源] [资源名] [-n 名称空间]</span></span><br><span class="line"></span><br><span class="line">[root@master01 ~]# kubectl describe pod busybox-pod -n aaa</span><br><span class="line"></span><br><span class="line">[root@master01 ~]# kubectl describe namespace  aaa</span><br><span class="line"></span><br><span class="line">其实原因就是busybox没卡住，这个是网络相关的镜像，需要加命令卡住</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">5、更新资源清单</span><br><span class="line">[root@master01 ~]# vim busybox.yml</span><br><span class="line"><span class="comment">#如果后面要指定名称空间，就要先创建名称空间</span></span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Namespace&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: aaa</span><br><span class="line"><span class="comment">#分隔符，分隔上面和下面的资源</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#这个是1个pod里面起2个容器</span></span><br><span class="line">apiVersion: <span class="string">&quot;v1&quot;</span></span><br><span class="line">kind: <span class="string">&quot;Pod&quot;</span></span><br><span class="line">metadata:</span><br><span class="line">  name: busybox-pod</span><br><span class="line">  namespace: aaa</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: busybox-containers</span><br><span class="line">    image: busybox</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="comment">#加入卡住的命令</span></span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/tail&quot;</span>,<span class="string">&quot;-f&quot;</span>,<span class="string">&quot;/etc/hosts&quot;</span>]</span><br><span class="line"> </span><br><span class="line">  - name: nginx-containers</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    </span><br><span class="line">6、删除就得pod</span><br><span class="line">[root@master01 ~]# kubectl delete -f busybox.yml</span><br><span class="line"></span><br><span class="line">7、再次创建pod,并查看</span><br><span class="line">[root@master01 ~]# kubectl apply -f busybox.yml </span><br><span class="line">[root@master01 ~]# kubectl get pod -n aaa</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE</span><br><span class="line">busybox-pod   2/2     Running   0          13s</span><br><span class="line"><span class="comment">#查看详细信息</span></span><br><span class="line">[root@master01 ~]# kubectl get pod -n aaa -o wide</span><br></pre></td></tr></table></figure><h3 id="4、使用VScode编写资源清单">4、<strong>使用VScode编写资源清单</strong></h3><p>1、配置VScode</p><p>先远程连接主节点</p><p><img src="../image/study_img/image-20240918170551193.png" alt="image-20240918170551193"></p><p>统一资源清单的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# <span class="built_in">mkdir</span> /opt/kubernetes</span><br><span class="line">[root@master01 ~]# <span class="built_in">mv</span> *.yml /opt/kubernetes</span><br></pre></td></tr></table></figure><p>连接成功，打开创建的/opt/kubernetes目录</p><p><img src="../image/study_img/image-20240918171056628.png" alt="image-20240918171056628"></p><p><img src="../image/study_img/image-20240918171219206.png" alt="image-20240918171219206"></p><p>配置梯子加速下载，安装kubernetes插件，安装插件可能需要7分钟左右</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# vim ~/.bashrc </span><br><span class="line"><span class="built_in">export</span> https_proxy=https://192.168.10.200:7890</span><br><span class="line"></span><br><span class="line">[root@master01 ~]# <span class="built_in">source</span> .bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用完成后，执行如下：</span></span><br><span class="line">[root@master01 ~]# vim ~/.bashrc </span><br><span class="line"><span class="comment">#export https_proxy=https://192.168.10.200:7890</span></span><br><span class="line"></span><br><span class="line">[root@master01 ~]# <span class="built_in">unset</span> https_proxy</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240918172406539.png" alt="image-20240918172406539"></p><p><img src="../image/study_img/image-20240918173241749.png" alt="image-20240918173241749"></p><p>安装插件可能需要7分钟左右，安装完成</p><p><img src="../image/study_img/image-20240918174036219.png" alt="image-20240918174036219"></p><p>2、使用插件</p><p>查看镜像的状态和ip</p><p><img src="../image/study_img/image-20240918174854465.png" alt="image-20240918174854465"></p><p>编写资源清单</p><p><img src="../image/study_img/image-20240918175229795.png" alt="image-20240918175229795"></p><p><img src="../image/study_img/image-20240918175420732.png" alt="image-20240918175420732"></p><p><img src="../image/study_img/image-20240918175433243.png" alt="image-20240918175433243"></p><p>根据模版修改内容    资源限制不需要，所以删除，删除之后有黄线，不用管</p><p><img src="../image/study_img/image-20240918175813043.png" alt="image-20240918175813043"></p>]]></content>
    
    
    <summary type="html">编写pod资源清单，使用一个很好用的工具VScode编写资源清单，本文有写操作方法哦，非常实用</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>🍉2、kubernets安装部署v1.19-源码安装</title>
    <link href="https://www.fomal.cc/posts/8b2778bc.html"/>
    <id>https://www.fomal.cc/posts/8b2778bc.html</id>
    <published>2024-09-22T06:44:18.000Z</published>
    <updated>2024-09-22T07:53:34.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kubernets安装部署v1-19-源码安装">kubernets安装部署v1.19  (源码安装)</h2><h3 id="1、k8s的安装方式">1、<strong>k8s的安装方式</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## K8S的方式有一堆</span></span><br><span class="line">二进制安装  生产推荐</span><br><span class="line">kubeadm    生产推荐</span><br><span class="line">Ansible    二进制安装</span><br><span class="line">Rancher    虽然k8s是有自带的图形化界面，但在企业里面用Rancher的还是比较多</span><br><span class="line">阿里云ACK</span><br><span class="line">亚马逊云EKS</span><br><span class="line"></span><br><span class="line">安装k8s1.19版，k8s中小版本变了影响很大，接口是不一样的</span><br></pre></td></tr></table></figure><p>环境准备</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th><th>配置</th><th>配置</th></tr></thead><tbody><tr><td>master01</td><td>10.0.0.200  /  172.16.1.200</td><td>master</td><td>kubectl,apiserver,scheduler,controller,<br>etcd,kubelet,kube-proxy</td><td>1h2G</td></tr><tr><td>node01</td><td>10.0.0.201  /  172.16.1.201</td><td>node</td><td>kubectl，apiserver,<br>kube-proxy</td><td>1h2G</td></tr><tr><td>node02</td><td>10.0.0.202  /  172.16.1.202</td><td>node</td><td>kubectl，apiserver,<br>kube-proxy</td><td>1h2G</td></tr><tr><td>node03</td><td>10.0.0.203  /  172.16.1.203</td><td>node</td><td>kubectl，apiserver,<br>kube-proxy</td><td>2h4G</td></tr></tbody></table><p>IP规划</p><p>为什么规划IP?  因为所有的POD起来应该在同一个网段，Cluster IP也在同一个网段</p><table><thead><tr><th>三种service</th><th>IP</th></tr></thead><tbody><tr><td>POD IP</td><td>10.2.0.0</td></tr><tr><td>Cluster IP</td><td>10.1.0.0</td></tr><tr><td>Node IP</td><td>10.0.0.0</td></tr></tbody></table><p>注意：如果是二进制安装，默认的pod IP是10.0.0.0网段，宿主机的网段和pod ip·不能一样</p><p><strong>①、部署前的环境优化</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######4台机器都执行   </span></span><br><span class="line"><span class="comment">#(kubelet:控制容器运行时启动容器的东西,要把master当作node节点，所以master也要安装)</span></span><br><span class="line">1、配置kublet配置文件，使用系统自带的Cgroup驱动和禁用swap     </span><br><span class="line"><span class="built_in">cat</span> &gt;/etc/sysconfig/kubelet &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">KUBELET_CGROUP_ARGS=&quot;--cgroup-driver=systemd&quot;</span></span><br><span class="line"><span class="string">KUBELET_EXTRA_ARGS=&quot;--fail-swap-on=false&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#让kubelet使用系统自带的Cgroup驱动 </span></span><br><span class="line">KUBELET_CGROUP_ARGS=<span class="string">&quot;--cgroup-driver=systemd&quot;</span></span><br><span class="line"><span class="comment">#让kubelet禁止使用swap(虚拟内存) </span></span><br><span class="line">KUBELET_EXTRA_ARGS=<span class="string">&quot;--fail-swap-on=false&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、内参数调优，要把iptable功能开启(因为底层端口的转发端口映射都是防火墙做的)</span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables=1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables=1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward=1</span></span><br><span class="line"><span class="string">vm.swappiness=0</span></span><br><span class="line"><span class="string">fs.file-max=52706963</span></span><br><span class="line"><span class="string">fs.nr_open=52706963</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开启iptables功能   ipv4</span></span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line"><span class="comment">#开启iptables功能   ipv6</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line"><span class="comment">#开启内核转发</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line"><span class="comment">#内核参数禁用swap</span></span><br><span class="line">vm.swappiness=0</span><br><span class="line"><span class="comment">#文件描述符文件最大值</span></span><br><span class="line">fs.file-max=52706963</span><br><span class="line"><span class="comment">#文件描述符开启数量</span></span><br><span class="line">fs.nr_open=52706963</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、检查是否配置成功</span><br><span class="line">sysctl --system</span><br><span class="line">执行之后输出结果倒数的行会显示第2步配置的内容</span><br><span class="line">* Applying /etc/sysctl.d/k8s.conf ...</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">vm.swappiness = 0</span><br><span class="line">fs.file-max = 52706963</span><br><span class="line">fs.nr_open = 52706963</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、更改docker源</span><br><span class="line">[root@master01 ~]# <span class="built_in">cat</span> &gt; /etc/yum.repos.d/docker-ce.repo &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[docker-ce-stable]</span></span><br><span class="line"><span class="string">name=Docker CE Stable - $basearch</span></span><br><span class="line"><span class="string">baseurl=https://download.docker.com/linux/centos/7/x86_64/stable</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://download.docker.com/linux/centos/gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">[root@master01 ~]# sed -i <span class="string">&#x27;s+download.docker.com+mirrors.huaweicloud.com/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">5、安装时间同步服务 (这个不需要写在定时任务里面)</span><br><span class="line">yum install -y chrony</span><br><span class="line">systemctl start chronyd</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6、关闭swap</span><br><span class="line">swapoff -a</span><br><span class="line">sed -i <span class="string">&#x27;/swap/d&#x27;</span> /etc/fstab</span><br><span class="line">free -m</span><br><span class="line">[root@master01 ~]# free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1846         100        1271           9         474        1564</span><br><span class="line">Swap:             0           0           0#变成0就是关闭了</span><br><span class="line"></span><br><span class="line"><span class="comment">#临时关闭swap</span></span><br><span class="line">swapoff -a</span><br><span class="line"><span class="comment">#永久关闭swap</span></span><br><span class="line">sed -i <span class="string">&#x27;/swap/d&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7、加载ipvs模块   做k8s，底层有转发，需要配合ipvs模块才可以</span><br><span class="line"><span class="built_in">cat</span>  &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">modprobe -- ip_vs</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_rr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_wrr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_sh</span></span><br><span class="line"><span class="string">modprobe -- nf_conntrack_ipv4</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> +x /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"><span class="built_in">source</span> /etc/sysconfig/modules/ipvs.modules</span><br><span class="line">lsmod|grep -e <span class="string">&#x27;ip_vs&#x27;</span> -e <span class="string">&#x27;nf_conntrack_ipv&#x27;</span>  </span><br><span class="line"><span class="comment">#过滤出ip_vs模块就加载出来了</span></span><br><span class="line"></span><br><span class="line">ipvs:LVS做四层负载,不需要装任何软件,需要下载ipvsadm命令,用ipvsadm这个命令去改主机的路由、路由表、网络相关的东西改掉,把这个主机当成四层负载的机器,底层要做转发的，LVS这个服务比较独特的，没有专门的应用，不像nginx、HAproxy做负载均衡需要安装nginx、HAproxy,LVS没有服务安装，需要安装ipvsadm,用这个命令去修改路由修改转发这些东西，让整个物理机变成转发的机器</span><br></pre></td></tr></table></figure><p><strong>②、安装docker指定版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######4台机器都执行 ####</span></span><br><span class="line">1、查询docker版本  </span><br><span class="line"><span class="comment">#(只显示yum仓库里的最新版)</span></span><br><span class="line">yum list docker-ce </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有的版本</span></span><br><span class="line">yum list docker-ce --showduplicates</span><br><span class="line"></span><br><span class="line">2、安装docke 19.03.15版本，因为这个版本比较稳定</span><br><span class="line">yum install -y docker-ce-19.03.15 docker-ce-cli-19.03.15 containerd.io</span><br><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">containerd.io：容器运行时，用k8s新版本，可以直接无痕从docke对接到containerd，默认安装最新版</span><br><span class="line"></span><br><span class="line">3、查看是否出现警告，再看一下显示的版本是否对的上</span><br><span class="line">[root@node01 ~]# docker info</span><br><span class="line">Client:</span><br><span class="line">...</span><br><span class="line"> Server Version: 19.03.15</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#生产中再加2个步骤：</span></span><br><span class="line"><span class="comment">#4、修改数据目录</span></span><br><span class="line"><span class="comment">#5、docker图形化界面</span></span><br><span class="line"> </span><br><span class="line">4、配置镜像加速和Cgroup驱动</span><br><span class="line"> <span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [</span></span><br><span class="line"><span class="string">  &quot;https://docker.1panel.live&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://dockercf.jsdelivr.fyi&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker-cf.registry.cyou&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.chenby.cn&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.jsdelivr.fyi&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.m.daocloud.io&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.m.daocloud.io&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.nju.edu.cn&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://dockerproxy.com&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.rainbond.cc&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://docker.registry.cyou&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://dockertest.jsdelivr.fyi&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://hub-mirror.c.163.com&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://hub.rat.dev/&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://mirror.aliyuncs.com&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://mirror.baidubce.com&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://mirror.iscas.ac.cn&quot;,</span></span><br><span class="line"><span class="string">  &quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、测试拉取</span><br><span class="line">[root@node01 ~]# docker pull busybox</span><br><span class="line">[root@node01 ~]# docker images</span><br></pre></td></tr></table></figure><p><strong>③、安装kubeadm</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######4台机器都执行 ####</span></span><br><span class="line">1、更换华为源</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.huaweicloud.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.huaweicloud.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.huaweicloud.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">2、安装kubelet node节点容器运行时的控制器 kubeadm做k8s集群 kubectl是k8s的客户端命令 ipvsadm加载jpvs模块</span><br><span class="line">yum install kubelet-1.19.3 kubeadm-1.19.3  kubectl-1.19.3  ipvsadm -y</span><br><span class="line"></span><br><span class="line">systemctl start kubelet.service &amp;&amp; systemctl <span class="built_in">enable</span> kubelet.service </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubelet-1.19.3 ：控制容器运行时</span><br><span class="line">kubeadm-1.19.3  ：类似于stream</span><br><span class="line">kubectl-1.19.3  ：执行k8s命令需要的客户端</span><br><span class="line">ipvsadm：上面配置IPVS模块，需要使用这个命令</span><br></pre></td></tr></table></figure><p><strong>④、master01初始化集群</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####如下操作只能master01执行(master节点执行)，其他机器不要执行</span></span><br><span class="line">1、初始化集群   大概要等待几分钟</span><br><span class="line">[root@master01 ~]# kubeadm init \</span><br><span class="line">--apiserver-advertise-address=10.0.0.200 \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers  \</span><br><span class="line">--kubernetes-version=v1.19.3 \</span><br><span class="line">--service-cidr=10.1.0.0/16 \</span><br><span class="line">--pod-network-cidr=10.2.0.0/16 \</span><br><span class="line">--service-dns-domain=cluster.local \</span><br><span class="line">--ignore-preflight-errors=Swap \</span><br><span class="line">--ignore-preflight-errors=NumCPU</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#只有一个master的写法</span></span><br><span class="line">--apiserver-advertise-address=master的ip \</span><br><span class="line"><span class="comment">#镜像仓库的地址 阿里云的谷歌容器的</span></span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers  \</span><br><span class="line">--kubernetes-version=v1.19.3 \</span><br><span class="line"><span class="comment">#service资源，设置cluster ip网段</span></span><br><span class="line">--service-cidr=10.1.0.0/16 \</span><br><span class="line"><span class="comment">#设置pod ip的网段</span></span><br><span class="line">--pod-network-cidr=10.2.0.0/16 \</span><br><span class="line"><span class="comment">#使用本地的dns</span></span><br><span class="line">--service-dns-domain=cluster.local \</span><br><span class="line"><span class="comment">#忽略swap的报错</span></span><br><span class="line">--ignore-preflight-errors=Swap \</span><br><span class="line"><span class="comment">#忽略cpu的报错</span></span><br><span class="line">--ignore-preflight-errors=NumCPU</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、保存最后几行内容</span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line">  <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line">  <span class="comment">#其他node节点加入集群</span></span><br><span class="line">Then you can <span class="built_in">join</span> any number of worker nodes by running the following on each as root:</span><br><span class="line">kubeadm <span class="built_in">join</span> 10.0.0.200:6443 --token cgex1m.9ck6cjchon5xn4j5 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:273cdce81c642065666a2d0eb4fd0c3097df69e984fa50836b8daf2ed10de18a </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#翻译</span></span><br><span class="line">您的Kubernetes控制平面已成功初始化！</span><br><span class="line">要开始使用集群，您需要以普通用户身份运行以下命令：</span><br><span class="line">mkdir-p<span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="built_in">sudo</span> cp-i/etc/kubernetes/admin.conf<span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span>$（id-u）：$（id-g）<span class="variable">$HOME</span>/.kube/config</span><br><span class="line">现在，您应该将pod网络部署到集群。</span><br><span class="line">使用以下列出的选项之一运行“kubectl apply-f[podnetwork].yaml”：</span><br><span class="line">https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line">然后，您可以通过以root身份在每个工作节点上运行以下命令来加入任意数量的工作节点：</span><br><span class="line">kubeadm <span class="built_in">join</span> 10.0.0.200:6443 --token cgex1m.9ck6cjchon5xn4j5 \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:273cdce81c642065666a2d0eb4fd0c3097df69e984fa50836b8daf2ed10de18a</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">3、可以看到多了好几个镜像，说明刚才的命令执行成功，拉取了需要的镜像</span><br><span class="line">[root@master01 ~]# docker images</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">4、执行这几个命令   创建隐藏目录，拷贝配置文件，授权</span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、查看k8s集群节点， 会看到master主节点</span><br><span class="line">[root@master01 ~]# kubectl get nodes</span><br><span class="line">NAME       STATUS     ROLES    AGE     VERSION</span><br><span class="line">master01   NotReady   master   4m32s   v1.19.3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###############node节点操作第6步  node01 node02 node03</span></span><br><span class="line">6、目前只有一个节点，所以要将其他节点加入集群</span><br><span class="line"><span class="comment">##注意：这个命令要保存好，因为横向扩展，将节点加入集群需要使用</span></span><br><span class="line">[root@master01 ~]# kubeadm <span class="built_in">join</span> 10.0.0.200:6443 --token cgex1m.9ck6cjchon5xn4j5 \</span><br><span class="line">--discovery-token-ca-cert-hash</span><br><span class="line">sha256:273cdce81c642065666a2d0eb4fd0c3097df69e984fa50836b8daf2ed10de18a </span><br><span class="line"><span class="comment">##########################################  </span></span><br><span class="line">  </span><br><span class="line">7、加入集群命令执行之后，最后一行信息显示如下</span><br><span class="line">Run <span class="string">&#x27;kubectl get nodes&#x27;</span> on the control-plane to see this node <span class="built_in">join</span> the cluster.</span><br><span class="line">在控制平面上(master)运行“kubectl get nodes”以查看此节点加入集群。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8、#到master01执行kubectl get nodes</span><br><span class="line">[root@master01 ~]# kubectl get nodes</span><br><span class="line">NAME       STATUS     ROLES    AGE     VERSION</span><br><span class="line">master01   NotReady   master   9m33s   v1.19.3</span><br><span class="line">node01     NotReady   &lt;none&gt;   3m48s   v1.19.3</span><br><span class="line">node02     NotReady   &lt;none&gt;   118s    v1.19.3</span><br><span class="line">node03     NotReady   &lt;none&gt;   106s    v1.19.3</span><br><span class="line"></span><br><span class="line">现在的状态是NotReady没有准备好的，因为网络还没配</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9、设置kube-proxy使用ipvs模式</span><br><span class="line">k8s默认使用的是iptables防火墙，可以修改成性能更高的ipvs模式，该模式LVS也在使用</span><br><span class="line">[root@master01 ~]# kubectl edit cm kube-proxy -n kube-system</span><br><span class="line"> 44行     </span><br><span class="line"> mode: <span class="string">&quot; &quot;</span> 改为 mode: <span class="string">&quot;ipvs&quot;</span></span><br><span class="line"> </span><br><span class="line">10、查看名称空间</span><br><span class="line">[root@master01 ~]# kubectl get ns</span><br><span class="line">或者</span><br><span class="line">[root@master01 ~]# kubectl get namespace</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   45m</span><br><span class="line">kube-node-lease   Active   45m</span><br><span class="line">kube-public       Active   45m</span><br><span class="line">kube-system       Active   45m</span><br><span class="line"></span><br><span class="line">11、查看指定名称空间中的pod信息</span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-system</span><br><span class="line">NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-6d56c8448f-85k2r           0/1     Pending   0          46m <span class="comment">#DNS服务器</span></span><br><span class="line">coredns-6d56c8448f-cn2t9           0/1     Pending   0          46m <span class="comment">#DNS服务器</span></span><br><span class="line">etcd-master01                      1/1     Running   0          46m <span class="comment">#数据库etcd</span></span><br><span class="line">kube-apiserver-master01            1/1     Running   0          46m <span class="comment">#司令部ipserver</span></span><br><span class="line">kube-controller-manager-master01   1/1     Running   0          46m <span class="comment">#控制器controller</span></span><br><span class="line">kube-proxy-2wfhq                   1/1     Running   0          38m <span class="comment">#网络、端口映射射kube-proxy  有4个是因为这个集群里面有4台机器</span></span><br><span class="line">kube-proxy-8tmqx                   1/1     Running   0          40m <span class="comment">#网络、端口映射射kube-proxy</span></span><br><span class="line">kube-proxy-fr9dl                   1/1     Running   0          39m <span class="comment">#网络、端口映射射kube-proxy</span></span><br><span class="line">kube-proxy-pz4ms                   1/1     Running   0          46m <span class="comment">#网络、端口映射射kube-proxy</span></span><br><span class="line">kube-scheduler-master01            1/1     Running   0          46m <span class="comment">#资源调度scheduler</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">12、查看指定名称空间中pod的详细信息  可以看到起在哪台机器上</span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-system -o wide</span><br><span class="line"></span><br><span class="line">用的DaemonSet控制器，每台有且只能起一个</span><br><span class="line"></span><br><span class="line">13、重启pod</span><br><span class="line">把他删掉，就会自动拉起，以后有哪个组件坏了，就删掉重新拉起</span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-system|grep <span class="string">&#x27;kube-proxy&#x27;</span>|awk <span class="string">&#x27;&#123;print &quot;kubectl delete pod -n kube-system &quot;$1&#125;&#x27;</span>|bash</span><br></pre></td></tr></table></figure><p>**⑤、master 配置flanale **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#部署网络插件flanale，让所有节点网络打通</span></span><br><span class="line"><span class="comment">##############master01执行#####</span></span><br><span class="line">链接地址：</span><br><span class="line">https://github.com/flannel-io/flannel/blob/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line">1、下载资源清单</span><br><span class="line">[root@master01 ~]# wget https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、修改flannel资源清单</span><br><span class="line">[root@master01 ~]# vim  kube-flannel.yml </span><br><span class="line">       <span class="comment">#搜索net-conf.json，修改网段为规划的pod ip  </span></span><br><span class="line">      <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;10.2.0.0/16&quot;</span>,</span><br><span class="line">      ......</span><br><span class="line">      .....</span><br><span class="line">      containers:</span><br><span class="line">      - args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        <span class="comment">#搜索 containers，新增使用的网卡</span></span><br><span class="line">        - --iface=eth0</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">#搜索containers，如果出现这个标签，就把这个标签里面的3行内容删掉</span></span><br><span class="line">        spec:</span><br><span class="line">          selector:  <span class="comment">#删掉</span></span><br><span class="line">            matchLabels:  <span class="comment">#删掉</span></span><br><span class="line">            app: flannel  <span class="comment">#删掉</span></span><br><span class="line"></span><br><span class="line">app: flannel是一个标签选择器，只有打了app标签的node，才会安装flannel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、只要修改了flannel资源清单，就要执行应用flannel资源清单</span><br><span class="line">[root@master01 ~]# kubectl apply -f kube-flannel.yml</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">4、#检查这几个状态</span><br><span class="line">①、检查flannel的pod是否启动成功   4个STATUS显示Running就是成功</span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-flannel</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-flannel-ds-4ncf5   1/1     Running   0          4m20s</span><br><span class="line">kube-flannel-ds-7dnxx   1/1     Running   0          4m20s</span><br><span class="line">kube-flannel-ds-dpzqp   1/1     Running   0          4m20s</span><br><span class="line">kube-flannel-ds-knmch   1/1     Running   0          4m20s</span><br><span class="line"></span><br><span class="line">②、检查k8s集群节点状态    STATUS显示Ready就是准备好的，集群之间起的pod就可以互相通信了</span><br><span class="line">[root@master01 ~]# kubectl get nodes</span><br><span class="line">NAME       STATUS   ROLES    AGE   VERSION</span><br><span class="line">master01   Ready    master   81m   v1.19.3</span><br><span class="line">node01     Ready    &lt;none&gt;   75m   v1.19.3</span><br><span class="line">node02     Ready    &lt;none&gt;   73m   v1.19.3</span><br><span class="line">node03     Ready    &lt;none&gt;   73m   v1.19.3</span><br><span class="line"></span><br><span class="line">③、检查coredns是否正常运行   只要网络配好，dns就ok了，STATUS显示Running状态</span><br><span class="line">[root@master01 ~]# kubectl get pod -n kube-system</span><br><span class="line">NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-6d56c8448f-85k2r           1/1     Running   0          81m</span><br><span class="line">coredns-6d56c8448f-cn2t9           1/1     Running   0          81m</span><br><span class="line">etcd-master01                      1/1     Running   0          81m</span><br><span class="line">kube-apiserver-master01            1/1     Running   0          81m</span><br><span class="line">kube-controller-manager-master01   1/1     Running   0          81m</span><br><span class="line">kube-proxy-2skng                   1/1     Running   0          30m</span><br><span class="line">kube-proxy-fxwbg                   1/1     Running   0          30m</span><br><span class="line">kube-proxy-w6v6r                   1/1     Running   0          30m</span><br><span class="line">kube-proxy-zng7l                   1/1     Running   0          30m</span><br><span class="line">kube-scheduler-master01            1/1     Running   0          81m</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#node设置角色信息   </span></span><br><span class="line"> kubectl label node node01 node-role.kubernetes.io/node=</span><br><span class="line"> kubectl label node node02 node-role.kubernetes.io/node=</span><br><span class="line"> kubectl label node node03 node-role.kubernetes.io/node=</span><br></pre></td></tr></table></figure><h3 id="2、安装kubectl命令补全黑科技">2、<strong>安装kubectl命令补全黑科技</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以tab补全的工具</span></span><br><span class="line"></span><br><span class="line">yum install -y bash-completion</span><br><span class="line"><span class="built_in">source</span> /usr/share/bash-completion/bash_completion </span><br><span class="line"><span class="built_in">source</span> &lt;(kubectl completion bash) </span><br><span class="line">kubectl completion bash &gt; /etc/bash_completion.d/kubectl</span><br><span class="line"></span><br><span class="line">安装完成需要退出在重新连接</span><br><span class="line"><span class="built_in">logout</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master01 ~]# kubectl ap 按tab可以补全了</span><br><span class="line">api-resources  api-versions   apply          </span><br><span class="line">[root@master01 ~]# kubectl get namespaces 按tab可以补全了</span><br><span class="line">default          kube-flannel     kube-node-lease  kube-public      kube-system  </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这篇文章写了部署k8s，超级详细，有需要的小伙伴可以查看</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>🍉1、K8s基础和资源介绍</title>
    <link href="https://www.fomal.cc/posts/4b5e2999.html"/>
    <id>https://www.fomal.cc/posts/4b5e2999.html</id>
    <published>2024-09-22T06:42:38.000Z</published>
    <updated>2024-09-22T07:53:34.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="K8s基础和资源介绍">K8s基础和资源介绍</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">k8是对容器的编排工具，之前使用的docker-compose是单机编排</span><br><span class="line"></span><br><span class="line">k8s原生的语言：go语言</span><br><span class="line"></span><br><span class="line">管理k8s集群工具：</span><br><span class="line">1、vsocde</span><br><span class="line">2、rancher（web图形化界面）</span><br><span class="line">3、k9s</span><br><span class="line"></span><br><span class="line"><span class="comment">#和k8s类似的编排工具</span></span><br><span class="line">borg   </span><br><span class="line">swarm(docker写的)</span><br><span class="line">mesos </span><br><span class="line">这些都在之前使用的编排工具，但现在k8s火起来了，他们就不怎么用了</span><br></pre></td></tr></table></figure><h3 id="1、K8s参考网站">1、<strong>K8s参考网站</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">官网：https://kubernetes.io</span><br><span class="line">官方文档：https://kubernetes.io/zh-cn/docs/home/</span><br><span class="line">kubeadm官方文档：https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/</span><br><span class="line">docker官方文档：https://docs.docker.com/</span><br><span class="line">prometheus官方文档：https://prometheus.io/docs/introduction/overview/</span><br><span class="line">ansible安装k8s项目：https://github.com/easzlab/kubeasz?tab=readme-ov-file</span><br><span class="line">阿里云ACK：https://www.aliyun.com/product/kubernetes</span><br><span class="line">亚马逊云EKS：https://aws.amazon.com/cn/eks/?nc2=h_ql_prod_ct_eks</span><br></pre></td></tr></table></figure><h3 id="2、K8s的2大组件">2、<strong>K8s的2大组件</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c/s结构的</span><br><span class="line"></span><br><span class="line">1、master组件(控制平面组件（Control Plane Components）)</span><br><span class="line"></span><br><span class="line">2、node组件</span><br></pre></td></tr></table></figure><ul><li><strong>1、master组件    (控制平面组件（Control Plane Components）)</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、kube-apiserver(apiserver)：类似于司令部，所有master上的组件工作都要经过apiserver</span><br><span class="line">(当在客户端执行命令或者在UI界面操作起一个容器都需要经过api,他会通知其他组件，所有组件调用什么东西或者计算什么东西都要经过他)</span><br><span class="line"></span><br><span class="line">2、etcd：所有组价产生的数据存放位置，储存所有命令、资源清单、证书信任、web操作及其他组件数据</span><br><span class="line">(如果这个宕了，这一套集群就废了，也就是说这套集群需要重新搭建，而不是修复一台etcd)</span><br><span class="line"></span><br><span class="line">3、kube-scheduler(scheduler  时该丢了儿)：资源计算、资源调度</span><br><span class="line">(比如说在命令行执行创建10台容器，先经过他apiserver，会把期望值存档etcd,然后通知scheduler去etcd把数据取出来)</span><br><span class="line"></span><br><span class="line">4、kube-controller-manager(controller  抗抽了儿)：控制器，控制node组件启动容器</span><br><span class="line">(schedule做完资源的计算调度,数据存档etcd了,controller通过apiserver拿到数据，会控制node组件启动)</span><br></pre></td></tr></table></figure><ul><li><strong>2、node组件</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1、kubelet：控制docker启动容器(控制容器运时，启动指定容器)</span><br><span class="line">(每一个node都要装)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、容器运行时（Container runtime）</span><br><span class="line"> (每一个node节点上得装一个容器运行时)</span><br><span class="line">    - containerd</span><br><span class="line">    - CRI-O</span><br><span class="line">    - Docker Engine</span><br><span class="line">    - Mirantis Container Runtime</span><br><span class="line"></span><br><span class="line">3、kube-proxy（可选）：POD端口映射，网络相关</span><br><span class="line">可以理解为pod就是容器</span><br><span class="line">起pod需要做端口映射，他就是做端口映射的工具</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#k8s三大接口API二次开发，调用接口</span></span><br><span class="line">CRI：runtime，容器操作接口</span><br><span class="line">CNI：network，网络操作接口</span><br><span class="line">CSI：storage，储存操作接口</span><br></pre></td></tr></table></figure><h3 id="3、K8s架构">3、<strong>K8s架构</strong></h3><p>单机节点架构</p><p><img src="../image/study_img/image-20240912101412211.png" alt="image-20240912101412211"></p><p>高可用架构</p><p><img src="../image/study_img/image-20240912163330677.png" alt="image-20240912163330677"></p><p><img src="../image/study_img/image-20240912102531543.png" alt="image-20240912102531543"></p><p>pod创建流程</p><p><img src="../image/study_img/image-20240912103904760.png" alt="image-20240912103904760"></p><p><img src="../image/study_img/image-20240912173745374.png" alt="image-20240912173745374"></p><h3 id="4、k8s核心资源-操作对象">4、<strong>k8s核心资源(操作对象)</strong></h3><p><strong>①、pod资源</strong></p><p>①什么是pod<br>1、Pod是K8s的最小单位<br>2、Pod的IP地址是随机的，删除Pod会改变IP<br>3、Pod都有一个根容器<br>4、一个Pod内可以由一个容器或多个容器组成<br>5、一个Pod内的容器共享根容器的网络、名称空间、和文件系统卷    (比如说起一个nginx的pod,他会和根容器共享网络、名称空间、和文件系统。原理是：根容器里面的网络模式用的是docker网络模式中的Container模式)<br>6、一个Pod内的网络地址由根容器提供</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请问贵公司k8s架构一个pod里面起几个容器</span><br><span class="line"></span><br><span class="line"> 答精确的数字就是错误的，首先应该pod里面起几个容器取决于项目</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240912104532405.png" alt="image-20240912104532405"></p><p>②pod运行状态，只要记住不是runing状态就是有问题的</p><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>Pending（等待）</td><td>Pod已经被K8S系统接受，但是有一个或多个容器，尚未创建，亦未运行。此阶段包括等待Pod被调度的时间和通过网络下载镜像的时间</td></tr><tr><td>Running（运行）</td><td>Pod已经绑定到某个节点(node)，Pod中所有容器都已被创建，至少有一个容器仍在运行，或者处于启动或重启状态</td></tr><tr><td>Succeeded（成功）</td><td>Pod中所有容器都已成功终止，并且不会再重启</td></tr><tr><td>Failed（失败）</td><td>Pod中所有容器都已成功终止，并且有一个容器是因为失败而终止</td></tr><tr><td>Unknown（未知）</td><td>因为某些原因无法获取Pod状态，这种情况，通常是因为与Pod所在主机通信失败</td></tr></tbody></table><p><strong>②、service资源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service也是k8s核心资源之一，service定义了服务的入口地址，用来将后端的pod服务暴露给外部的用户访问</span><br></pre></td></tr></table></figure><p>service提供了2种网络资源</p><p><img src="../image/study_img/image-20240912180101026.png" alt="image-20240912180101026"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">第一种：NodePort  宿主机端口映射clusterip端口，对外提供服务</span><br><span class="line"></span><br><span class="line">第二种：ClusterIP  pod的负载均衡(起10个pod,clusterip可以给这些pod负载，但是clusterip是内网ip，宿主机还是不能访问，所以service又提供了nodeport)</span><br><span class="line"></span><br><span class="line"><span class="comment">#问题：POD的IP是随机的，如果一个POD宕机了，k8s会自动拉起一个新的pod,ip变了如何加入到ClusterIP这个负载均衡集群中？</span></span><br><span class="line">解决方案：使用DNS解析POD的IP到一个<span class="string">&#x27;字符串上&#x27;</span>(每个pod启动都要到标签app:nginx)</span><br><span class="line">DNS的服务：</span><br><span class="line">    - coreDNS(k8s用这个)</span><br><span class="line">    - bind9(比较麻烦)</span><br><span class="line">    - dnsmsq(内外的dns用)</span><br></pre></td></tr></table></figure><p><strong>③、label标签资源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Label标签是K8S中非常重要的一个属性，Label标签就像身份证一样，可以用来识别K8S的对象。</span><br><span class="line">传统架构中，不同的服务应用之间通讯，都是通过IP和端口，但是在K8S中很多匹配关系都是通过标签来找。</span><br></pre></td></tr></table></figure><p><strong>④、Namespace资源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Namespace（名称空间）是K8S中非常重要的一个概念，Namespace将集群内部的资源进行隔离划分。</span><br><span class="line">在Namespace中，形成逻辑上的不同项目组或用户组。</span><br></pre></td></tr></table></figure><p><strong>⑤、Controller控制器资源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Controller用来管理Pod。</span></span><br><span class="line"><span class="comment">## Pod控制器的种类有很多：</span></span><br><span class="line">  - RC资源：可以做的自动拉起，控制多个副本，但现在不用了</span><br><span class="line">  - RS   RC控制器的升级版，可以自动拉起宕机的POD</span><br><span class="line">  - Deployment  生产中常用的控制器，功能强大，包含了RS控制器，对镜像做版本管理(比较常用)</span><br><span class="line">  - DaemonSet   保证所有node节点上，有且只有一个pod运行</span><br><span class="line">  - Staefulset  有状态的应用(如mysql的主从复制)，为pod提供唯一标识</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  后面起pod会写资源清单起10个nginx，挂了一台就直接挂了，pod不会再起一台，而能够拉起的是controller资源，他会检测资源清单是不是10个pod都在，如果少一个，控制器会重新拉起一个再加入集群</span><br></pre></td></tr></table></figure><p><strong>pod RC Service 的关系</strong></p><p><img src="../image/study_img/image-20240912120405666.png" alt="image-20240912120405666"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">自动扩缩容：</span><br><span class="line">比如说现在有10台nginx,双十一流量上来了，10台不够用，怎么办？</span><br><span class="line">k8s有一个资源，一开始10个nginx就够了，流量上来了会自动扩容，流量下去了会自动缩容，而且扩出来的pod和之前的pod一模一样</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">开始写k8s的基础介绍啦</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>十一、🍡Cgroup资源控制/添加磁盘</title>
    <link href="https://www.fomal.cc/posts/cb5f694f.html"/>
    <id>https://www.fomal.cc/posts/cb5f694f.html</id>
    <published>2024-09-22T06:33:37.000Z</published>
    <updated>2024-09-22T07:53:34.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Cgroup-资源控制-添加磁盘">Cgroup(资源控制)/添加磁盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1、#docker如何做资源限制的(比如说内存的限制)</span><br><span class="line">docker run -m 去限制内存</span><br><span class="line"></span><br><span class="line">2、#原理是什么</span><br><span class="line">-m指定限制内存的数量，docker通过内核参数，也就是Cgroup对资源进行限制</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、#Cgroup的作用</span><br><span class="line">在操作系统解决了资源相与隔离的问题以后，还需要解决资源限制的问题，也就是避免在同一个操作系统中，防止有些资源消耗较大的容器，将整个物理机器(宿主机)的硬件资源(CPU,Memory)占满。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在Linux 系统中能够控制的资源列表如下</span><br><span class="line">memory      <span class="comment">#内存限制</span></span><br><span class="line">hugetlb     <span class="comment">#huge pages 使用量</span></span><br><span class="line">cpu         <span class="comment">#限制CPU使用率</span></span><br><span class="line">cpuacct     <span class="comment">#统计cgroups中的进程的CPU使用报告</span></span><br><span class="line">cpuset      <span class="comment">#绑定cgroups到指定 CPUs和 NUMA节点</span></span><br><span class="line">innodb_lock_wait_timeout  <span class="comment">#block设备的I0速度</span></span><br><span class="line">not_cls     <span class="comment">#网络接口设置优先级</span></span><br><span class="line">devices     <span class="comment">#mknode访问设备权限</span></span><br><span class="line">freezer     <span class="comment">#suspend和restore cgroups 进程</span></span><br><span class="line">perf_event  <span class="comment">#性能监控</span></span><br><span class="line">pids        <span class="comment">#限制子树 cgroups 总进程数</span></span><br><span class="line"></span><br><span class="line">4、#容器与容器之间的资源如何隔离？</span><br><span class="line">Namespace  名称空间隔离</span><br><span class="line"></span><br><span class="line">5、#为什么容器之间的资源可以通过ns进行隔离？</span><br><span class="line">因为docker容器运行起来是一个进程，每一个容器都是一个进程，进程之间用来资源隔离的就是Namespace</span><br></pre></td></tr></table></figure><p>查看系统实现的限制资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 node]# <span class="built_in">cat</span> /proc/cgroups </span><br><span class="line"><span class="comment">#subsys_name    hierarchy       num_cgroups     enabled</span></span><br><span class="line">cpuset  11      7       1</span><br><span class="line">cpu     3       77      1</span><br><span class="line">cpuacct 3       77      1</span><br><span class="line">memory  7       77      1</span><br><span class="line">devices 5       77      1</span><br><span class="line">freezer 10      7       1</span><br><span class="line">net_cls 2       7       1</span><br><span class="line">blkio   9       77      1</span><br><span class="line">perf_event      4       7       1</span><br><span class="line">hugetlb 6       7       1</span><br><span class="line">pids    8       77      1</span><br><span class="line">net_prio        2       7       1</span><br></pre></td></tr></table></figure><h3 id="1、案例：限制SSH内存使用">1、<strong>案例：限制SSH内存使用</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1、限制系统服务内存</span><br><span class="line">[root@docker01 node]# <span class="built_in">cd</span> /sys/fs/cgroup/memory/system.slice/sshd.service/</span><br><span class="line"></span><br><span class="line">2、查看内存服务限制(byte)</span><br><span class="line">[root@docker01 sshd.service]# <span class="built_in">cat</span> memory.limit_in_bytes </span><br><span class="line">9223372036854771712</span><br><span class="line"></span><br><span class="line">3、计算一下，大概是7G,这个是默认值，不管系统内存多大，每个进程默认最大使用7G,这样就相当于没有做任何限制·</span><br><span class="line">[root@docker01 sshd.service]# python</span><br><span class="line">&gt;&gt;&gt; 9223372036854771712/1024/1024/1024/1024/1024/1024</span><br><span class="line">7</span><br><span class="line"></span><br><span class="line">4、ssh服务不是拿容器起起来的，如果想给他限制，就需要改文件里面的数字大小</span><br><span class="line">设置限制内存</span><br><span class="line">[root@docker01 sshd.service]# <span class="built_in">echo</span> 64K &gt; memory.limit_in_bytes </span><br><span class="line">执行之后，ssh就立马端口连接了，只写1个字节，根本就连不上ssh</span><br><span class="line"></span><br><span class="line">5、到虚拟机里面查看日志</span><br><span class="line">tailf /var/log/messages</span><br><span class="line"></span><br><span class="line">6、可以发现，远程连接时，会杀进程，因为远程连接会产生一个进程，但是ssh被做了限制</span><br><span class="line">，会杀掉连接的进程</span><br><span class="line"></span><br><span class="line">Cgroup调用内核参数，如果做限制，就改memory.limit_in_bytes文件，内核来读取这个文件来进行限制</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240912151039561.png" alt="image-20240912151039561"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 sshd.service]# <span class="built_in">echo</span> 9223372036854771712 &gt; memory.limit_in_bytes</span><br><span class="line"></span><br><span class="line">[root@docker01 sshd.service]# <span class="built_in">cat</span> memory.limit_in_bytes</span><br><span class="line">9223372036854771712</span><br></pre></td></tr></table></figure><h3 id="2、OverlayFS">2、<strong>OverlayFS</strong></h3><p><strong>OverlayFS</strong> <strong>实现方式</strong></p><p>OverlayFS通过三个目录：lower目录、upper目录、以及work目录实现,其中lower目录可以是多个,upper目录为可以进行读写操作的目录, work目录为工作基础目录,挂载后内容会被清空,且在使用过程中其内容用户不可见,最后联合挂载完成给用户呈现的统一视图称为merged目录。</p><p><img src="../image/study_img/image-20240913170119816.png" alt="image-20240913170119816"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模拟overlayfs存储方式</span></span><br><span class="line">1.创建文件</span><br><span class="line">[root@k8s01 ~]# <span class="built_in">mkdir</span> /lower&#123;1..3&#125;</span><br><span class="line">[root@k8s01 ~]# <span class="built_in">mkdir</span> /upper /work /merged</span><br><span class="line"></span><br><span class="line">2.挂载文件系统</span><br><span class="line">[root@k8s01 ~]# mount -t overlay overlay -o</span><br><span class="line">lowerdir=/lower1:/lower2:/lower3,upperdir=/upper,workdir=/work /merged</span><br><span class="line"></span><br><span class="line">3.查看挂载</span><br><span class="line">[root@k8s01 ~]# mount | grep merged</span><br><span class="line"></span><br><span class="line">4.在/upper 目录中写入文件,在merged中可以显示</span><br><span class="line">[root@k8s01 /]# <span class="built_in">touch</span> /upper/upper.txt</span><br><span class="line">[root@k8s01 /]# ll /merged/</span><br><span class="line">-rw-r--r-- 1 root root 0 Mar 14 02:17 upper.txt</span><br><span class="line"></span><br><span class="line">5. 在merged中写入文件, 实际存储到了/uppper</span><br><span class="line">[root@k8s01 /]# <span class="built_in">touch</span> /merged/d.txt</span><br><span class="line">[root@k8s01 /]# ll /upper/</span><br><span class="line">-rw-r--r-- 1 root root 0 Mar 14 02:19 d.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注:如果没有upperdir， merged是只读的</span><br><span class="line">[root@node-2 overlay2]# umount /merged</span><br><span class="line">[root@node-2 overlay2]# mount -t overlay overlay -o lowerdir=/lower1:/lower2 /merged</span><br><span class="line">[root@k8s01 /]# <span class="built_in">touch</span> /merged/c.txt</span><br><span class="line"><span class="built_in">touch</span>: cannot <span class="built_in">touch</span> ‘/merged/c.txt’: Read-only file system</span><br></pre></td></tr></table></figure><h3 id="3、扩展添加磁盘和更改docker默认数据目录">3、<strong>扩展添加磁盘和更改docker默认数据目录</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、先关机</span><br><span class="line"></span><br><span class="line">2、添加磁盘</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240913172422996.png" alt="image-20240913172422996"></p><p><img src="../image/study_img/image-20240913172442557.png" alt="image-20240913172442557"></p><p><img src="../image/study_img/image-20240913172500576.png" alt="image-20240913172500576"></p><p><img src="../image/study_img/image-20240913172538917.png" alt="image-20240913172538917"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">3、查看添加的磁盘</span><br><span class="line">[root@docker01 ~]# fdisk -l</span><br><span class="line">Disk /dev/sda: 21.5 GB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">......</span><br><span class="line">.....</span><br><span class="line"><span class="comment">#/dev/sdb是新添加的磁盘</span></span><br><span class="line">Disk /dev/sdb: 10.7 GB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line">4、创建分区</span><br><span class="line">[root@docker01 ~]# fdisk /dev/sdb</span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition <span class="built_in">type</span>: <span class="comment">## 选择主分区还是扩展分区</span></span><br><span class="line">    p primary (0 primary, 0 extended, 4 free)</span><br><span class="line">    e extended</span><br><span class="line">Select (default p): p <span class="comment"># 主分区</span></span><br><span class="line">Partition number (1-4, default 1): 1 <span class="comment"># 一个分区</span></span><br><span class="line">First sector (2048-104857599, default 2048): <span class="comment">## 设置开头扇区大小，我选择默认</span></span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-104857599, default 104857599): <span class="comment">## 设置最后扇区大小，我选择默认</span></span><br><span class="line">Partition 1 of <span class="built_in">type</span> Linux and of size 50 GiB is <span class="built_in">set</span>  <span class="comment">## 分区成功</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w <span class="comment">## 退出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、再次查看磁盘</span><br><span class="line">[root@docker01 ~]# fdisk -l</span><br><span class="line">.....</span><br><span class="line">Disk /dev/sdb: 10.7 GB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x481c9cdc</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1            2048    20971519    10484736   83  Linux</span><br><span class="line"><span class="comment">#新分区 /dev/sdb1 </span></span><br><span class="line"></span><br><span class="line">5、格式化分区</span><br><span class="line">[root@docker01 ~]# mkfs.xfs /dev/sdb1</span><br><span class="line"></span><br><span class="line">6、查看分区的UUID</span><br><span class="line">[root@docker01 ~]# blkid /dev/sdb1</span><br><span class="line">/dev/sdb1: UUID=<span class="string">&quot;65cdcede-223b-40ad-aa68-6165b7606b71&quot;</span> TYPE=<span class="string">&quot;xfs&quot;</span> </span><br><span class="line"></span><br><span class="line">7、#设置永久挂载</span><br><span class="line">方法一：这个方法如果写错一个字母，很可能造成系统起不来，所以写完了要仔细检查</span><br><span class="line">[root@docker01 ~]# vim /etc/fstab </span><br><span class="line"><span class="comment">#把内容加入最后一行</span></span><br><span class="line">UUID=65cdcede-223b-40ad-aa68-6165b7606b71   /docker_data  xfs     defaults        0 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法二：写入自启动文件   这个写错了不会造成系统起不来的情况</span><br><span class="line">vim /root/.bashrc </span><br><span class="line">mount -t xfs /dev/sdb1 /docker_data </span><br><span class="line">不要影响文件原先的内容</span><br><span class="line"></span><br><span class="line">8、临时挂载</span><br><span class="line">[root@docker01 ~]# <span class="built_in">mkdir</span> /docker_data</span><br><span class="line">[root@docker01 ~]# mount -a</span><br><span class="line"></span><br><span class="line">9、查看磁盘分区</span><br><span class="line">[root@docker01 ~]# <span class="built_in">df</span> -Th</span><br><span class="line">Filesystem              Type      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/centos-root xfs        19G   14G  5.1G  73% /</span><br><span class="line">devtmpfs                devtmpfs  1.6G     0  1.6G   0% /dev</span><br><span class="line">tmpfs                   tmpfs     1.6G     0  1.6G   0% /dev/shm</span><br><span class="line">tmpfs                   tmpfs     1.6G   12M  1.6G   1% /run</span><br><span class="line">tmpfs                   tmpfs     1.6G     0  1.6G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1               xfs       497M  126M  372M  26% /boot</span><br><span class="line">tmpfs                   tmpfs     318M     0  318M   0% /run/user/0</span><br><span class="line">/dev/sdb1               xfs        10G   33M   10G   1% /docker_data</span><br></pre></td></tr></table></figure><p>如下步骤可以不需要操作，如果不更改docker默认数据目录的话，不需要操作，如果更改了数据目录，之前拉的镜像就需要重新拉取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改docker默认数据目录的操作</span></span><br><span class="line"></span><br><span class="line">1、在配置文件里面添加目录信息</span><br><span class="line">[root@docker01 docker_data]# vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://10.0.0.105&quot;</span>,<span class="string">&quot;http://172.16.1.101:5000&quot;</span>],</span><br><span class="line"><span class="string">&quot;data-root&quot;</span>: <span class="string">&quot;/docker_data&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">[root@docker01 docker_data]# systemctl daemon-reload</span><br><span class="line">[root@docker01 docker_data]# systemctl restart docker</span><br><span class="line"></span><br><span class="line">2、查看docker信息</span><br><span class="line">[root@docker01 docker_data]# docker info</span><br><span class="line">Docker Root Dir: /docker_data</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">docker做资源限制的方法</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>十、🍡容器化监控Prometheus</title>
    <link href="https://www.fomal.cc/posts/f75a8470.html"/>
    <id>https://www.fomal.cc/posts/f75a8470.html</id>
    <published>2024-09-22T06:12:54.000Z</published>
    <updated>2024-09-22T07:53:34.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="容器化监控Promethues">容器化监控Promethues</h2><h3 id="1、Docker自带的监控命令">1、<strong>Docker自带的监控命令</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker02 ~]# docker ps</span><br><span class="line">[root@docker02 ~]# docker top mysql80</span><br><span class="line">[root@docker02 ~]# docker top jenkins</span><br><span class="line">[root@docker02 ~]# docker stats</span><br></pre></td></tr></table></figure><p>有了上面的命令，我们就可以使用zabbix来监控docker容器了，但是问题就是， zabbix-agent 的端口，我们在宿主机上只能映射出来一个。<br><strong>解决方案：</strong><br>1.起多块网卡<br>2.每个容器装一个zabbix-server<br>3.修改不同容器的agent端口<br>4.映射容器的相关文件，然后监控宿主机上的对应文件<br>5.不用zabbix</p><h3 id="2、监控软件的介绍">2、<strong>监控软件的介绍</strong></h3><p><em>服务端</em></p><p>prometheus：类似于zabbix-server服务端，负责收集客户端监控指标(Metrics)</p><p><em>客户端</em></p><p>cAdvisor：类似 zabbix-agent 客户端，用来收集容器里面的监控指标<br>node_exporter：类似 zabbix-agent 客户端，用来收集宿主机的监控指标</p><p><em>组件</em></p><p>Grafana：出图工具</p><p>1、cAdvisor介绍     凯得歪热儿</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cAdvisor介绍</span><br><span class="line">cAdvisor是谷歌开发的容器监控工具，cAdvisor会显示当前host资源使用情况，包括CPU、内存、网络、文件系统等。</span><br><span class="line"></span><br><span class="line">不过cAdvisor提供的操作界面略显简陋，而且要在不同的页面之间跳转，并且只能监控一个host，不免让人质疑它的实用性，但是cAdvisor有一个亮点，就是将监控数据导出给其他第三方工具，而且它兼容很多第三方工具，所以我们把它定位成是一个 监控数据收集器 ，收集和导出是它的强项，而非展示</span><br><span class="line"></span><br><span class="line">dokcer stats 可以查看运行的 Docker 镜像的运行状态，例如：这种方式比较原始，因为你无法通过http 的方式来获取数据，而且没有界面，数据可视化还需要做大量的工作。</span><br><span class="line"></span><br><span class="line">由于 dokcer stats 有这些问题，所以 cadvisor 诞生了。 cadvisor 不仅可以搜集一台机器上所有运行的容器信息还提供基础查询界面和 http 接口，方便 Prometheus 进行数据抓取。</span><br></pre></td></tr></table></figure><p>2、grafana介绍<br>grafana是一个支持多种数据源的图形展示工具</p><p>3、prometheus介绍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">promethues官网：https://prometheus.io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">prometheus是一个非常优秀的监控工具，提供了监控数据的收集、存储、处理、可视化、和告警等一系列完整的监控体系。</span><br><span class="line"></span><br><span class="line">组件包含：</span><br><span class="line">Node Exporter：负责收集host硬件和操作系统数据，以容器的形式运行在所有的host上。</span><br><span class="line">cAdvisor：负责收集容器数据，以容器的形式运行在所有的host上。</span><br><span class="line"></span><br><span class="line">zabbix是在客户端配服务端的地址，所以数据能从客户端推送给服务端</span><br><span class="line"></span><br><span class="line">prometheus数据获取的来源：</span><br><span class="line">服务端配客户端的地址，prometheus-server去其他客户端拉过来的数据，只有告警是推的</span><br><span class="line">设置触发器出现告警了，出发告警方式，才会推送数据</span><br></pre></td></tr></table></figure><p>支持：<br>1、MySQL、Oracle、Postgre、es等数据库<br>2、zabbix、prometheus等监控系统</p><h3 id="3、Prometheus架构">3、<strong>Prometheus架构</strong></h3><p><img src="../image/study_img/image-20240911085025512.png" alt="image-20240911085025512"></p><p>TSDB：时序数据库，和时间轴有关的</p><p>influxDB：时序数据库</p><h3 id="4、部署Prometheus">4、<strong>部署Prometheus</strong></h3><p>环境准备</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th><th>应用</th></tr></thead><tbody><tr><td>docker01</td><td>10.0.0.101  /  172.16.1.101</td><td>被监控端</td><td>cadvisor、node_exporter</td></tr><tr><td>docker02</td><td>10.0.0.102  /  172.16.1.102</td><td>被监控端</td><td>cadvisor、node_exporter</td></tr><tr><td>docker03</td><td>10.0.0.103  /  172.16.1.103</td><td>被监控端</td><td>cadvisor、node_exporter</td></tr><tr><td>elk01</td><td>10.0.0.76  /  172.16.1.76</td><td>监控端、服务端</td><td>prometheus、grafana、cadvisor</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## docker run命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动node-exporter</span></span><br><span class="line">docker run -d -p 9100:9100 -v <span class="string">&quot;/:/host:ro,rslave&quot;</span> --name=node_exporter</span><br><span class="line">quay.io/prometheus/node-exporter --path.rootfs /host</span><br><span class="line"></span><br><span class="line">-v <span class="string">&quot;/:/host：相当于监控宿主机</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 启动cadvisor</span></span><br><span class="line"><span class="string">docker run --volume=/:/rootfs:ro --volume=/var/run:/var/run:rw --</span></span><br><span class="line"><span class="string">volume=/sys:/sys:ro --volume=/var/lib/docker/:/var/lib/docker:ro -p 8080:8080 -d --name=cadvisor google/cadvisor:latest</span></span><br></pre></td></tr></table></figure><p>1、elk机器 部署docker compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">1、准备工作目录</span><br><span class="line">[root@elk1 ~]# <span class="built_in">mkdir</span> prometheus &amp;&amp; <span class="built_in">cd</span> prometheus/</span><br><span class="line"></span><br><span class="line">2、准备promethues配置文件</span><br><span class="line">[root@elk1 prometheus]# vim prometheus.yml</span><br><span class="line">scrape_configs:</span><br><span class="line">- job_name: cadvisor</span><br><span class="line">  scrape_interval: 5s</span><br><span class="line">  static_configs:</span><br><span class="line">  - targets:</span><br><span class="line">    - 10.0.0.101:8080</span><br><span class="line">    - 10.0.0.102:8080</span><br><span class="line">    - 10.0.0.103:8080</span><br><span class="line"></span><br><span class="line">- job_name: prometheus</span><br><span class="line">  scrape_interval: 5s</span><br><span class="line">  static_configs:</span><br><span class="line">  - targets:</span><br><span class="line">    - 10.0.0.76:9090</span><br><span class="line"></span><br><span class="line">- job_name: node_exporter</span><br><span class="line">  scrape_interval: 5s</span><br><span class="line">  static_configs:</span><br><span class="line">  - targets:</span><br><span class="line">    - 10.0.0.101:9100</span><br><span class="line">    - 10.0.0.102:9100</span><br><span class="line">    - 10.0.0.103:9100</span><br><span class="line"></span><br><span class="line">3、编写docker-compose</span><br><span class="line">[root@elk1 prometheus]# vim pro-docker-compose.yml </span><br><span class="line">version: <span class="string">&#x27;3.2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  prometheus:</span><br><span class="line">    image: prom/prometheus:latest</span><br><span class="line">    container_name: prometheus</span><br><span class="line">    ports:</span><br><span class="line">      - 9090:9090</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - --config.file=/etc/prometheus/prometheus.yml</span><br><span class="line">    volumes:</span><br><span class="line">      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro</span><br><span class="line">    restart: always</span><br><span class="line">    </span><br><span class="line">  grafana:</span><br><span class="line">    image: grafana/grafana:latest</span><br><span class="line">    container_name: grafana</span><br><span class="line">    ports:</span><br><span class="line">      - 3000:3000</span><br><span class="line">    restart: always</span><br><span class="line">    </span><br><span class="line">  cadvisor:</span><br><span class="line">    image: google/cadvisor:latest</span><br><span class="line">    container_name: cadvisor</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:8080</span><br><span class="line">    volumes:</span><br><span class="line">      - /:/rootfs:ro</span><br><span class="line">      - /var/run:/var/run:rw</span><br><span class="line">      - /sys:/sys:ro</span><br><span class="line">      - /var/lib/docker:/var/lib/docker:ro</span><br><span class="line">    restart: always</span><br><span class="line">      </span><br><span class="line">  node-exporter:</span><br><span class="line">    image: prom/node-exporter:latest</span><br><span class="line">    container_name: node_exporter</span><br><span class="line">    ports:</span><br><span class="line">      - 9100:9100</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">[root@elk1 promethenus]# docker-compose -f pro-docker-compose.yml up -d</span><br></pre></td></tr></table></figure><p>2、docker01 02 03</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 node]# <span class="built_in">mkdir</span> node &amp;&amp; <span class="built_in">cd</span> node</span><br><span class="line">[root@docker01 node]# vim node-docker-compose.yml </span><br><span class="line">version: <span class="string">&#x27;3.2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  node-exporter:</span><br><span class="line">    image: prom/node-exporter:latest</span><br><span class="line">    container_name: node_exporter</span><br><span class="line">    ports:</span><br><span class="line">      - 9100:9100</span><br><span class="line">    restart: always</span><br><span class="line">    </span><br><span class="line">  cadvisor:</span><br><span class="line">    image: google/cadvisor:latest</span><br><span class="line">    container_name: cadvisor</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:8080</span><br><span class="line">    volumes:</span><br><span class="line">      - /:/rootfs:ro</span><br><span class="line">      - /var/run:/var/run:rw</span><br><span class="line">      - /sys:/sys:ro</span><br><span class="line">      - /var/lib/docker:/var/lib/docker:ro</span><br><span class="line">    restart: always</span><br><span class="line">    </span><br><span class="line">[root@docker02 node]# docker-compose -f node-docker-compose.yml up</span><br></pre></td></tr></table></figure><p>3、访问网页 10.0.0.76:9090，可以看到监控的其他客户端</p><p><img src="../image/study_img/image-20240911093304356.png" alt="image-20240911093304356"></p><p><img src="../image/study_img/image-20240911163131170.png" alt="image-20240911163131170"></p><p>收集到的数据指标是Key:value的格式</p><p>数据查询操作</p><p><img src="../image/study_img/image-20240911163606439.png" alt="image-20240911163606439"></p><p><img src="../image/study_img/image-20240911163702757.png" alt="image-20240911163702757"></p><p>如果只想看101的数据  ：  就用{ }花括号里面写想要查看的字段  花括号里面的字段相当于过滤</p><p><img src="../image/study_img/image-20240911170150515.png" alt="image-20240911170150515"></p><p>4、访问cadvisor页面 10.0.0.101:8080</p><p><img src="../image/study_img/image-20240911165134739.png" alt="image-20240911165134739"></p><p><img src="../image/study_img/image-20240911165240850.png" alt="image-20240911165240850"></p><p><img src="../image/study_img/image-20240911165311636.png" alt="image-20240911165311636"></p><p>5、grafana模版出图</p><p>登录自己搭建的grafana ：10.0.0.76:3000/</p><p><img src="../image/study_img/image-20240911160356809.png" alt="image-20240911160356809"></p><p>进入grafana官网：<a href="https://grafana.com/">https://grafana.com/</a>     进入官网首页，来到首页的页面最底下</p><p><img src="../image/study_img/image-20240911170835247.png" alt="image-20240911170835247"></p><p><img src="../image/study_img/image-20240911171206521.png" alt="image-20240911171206521"></p><p>选择一个自己想要的模版点击进去，自动他的ID，之后添加</p><p><img src="../image/study_img/image-20240911171354848.png" alt="image-20240911171354848"></p><p>①、回到自己搭建的grafana</p><p><img src="../image/study_img/image-20240911171850344.png" alt="image-20240911171850344"></p><p>②、找到prometheus的图标，双击进去，添加prometheus的URL,然后点击最下面的save &amp; test  可看到Successfully添加成功的信息</p><p><img src="../image/study_img/image-20240911172651580.png" alt="image-20240911172651580"></p><p>③测试：  再点击左边的数据源栏 可看到添加成功，之后添加模版</p><p><img src="../image/study_img/image-20240911173117487.png" alt="image-20240911173117487"></p><p><img src="../image/study_img/image-20240911173228995.png" alt="image-20240911173228995"></p><p><img src="../image/study_img/image-20240911173445043.png" alt="image-20240911173445043"></p><p>模版里面可以点击进去看看，有的有数据，有的没有数据</p><p><img src="../image/study_img/image-20240911173624110.png" alt="image-20240911173624110"></p><p>其实可以把刚刚添加的3个模版删除，因为不是我需要的，接下来会添加需要的模版</p><p>④、添加cAdcisor的模版</p><p><img src="../image/study_img/image-20240911174519155.png" alt="image-20240911174519155"></p><p>8919    11277  这两个ID比较常用</p><p><img src="../image/study_img/image-20240911174945815.png" alt="image-20240911174945815"></p><p><img src="../image/study_img/image-20240911175011030.png" alt="image-20240911175011030"></p><p><img src="../image/study_img/image-20240911175141393.png" alt="image-20240911175141393"></p><p>可以看到数据，但是目前默认是看101的数据，项目和主机都是空的，想看指定主机的数据没有，所以需要改模版</p><p><img src="../image/study_img/image-20240911175238626.png" alt="image-20240911175238626"></p><p><em>6、修改模版</em></p><p>需要使用prometheus查询数据的语句 ：promeQL</p><p><img src="../image/study_img/image-20240911181443564.png" alt="image-20240911181443564"></p><p><img src="../image/study_img/image-20240911181734944.png" alt="image-20240911181734944"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、project</span><br><span class="line">label_values(container_last_seen, project)</span><br><span class="line"></span><br><span class="line">2、server</span><br><span class="line">label_values(container_last_seen&#123;project=~<span class="string">&quot;<span class="variable">$project</span>&quot;</span>&#125;, server)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、instance</span><br><span class="line">label_values(container_last_seen&#123;project=~<span class="string">&quot;<span class="variable">$project</span>&quot;</span>,server=~<span class="string">&quot;<span class="variable">$server</span>&quot;</span>&#125;, instance)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、project</span><br><span class="line">label_values(container_last_seen, project)</span><br><span class="line">获取的是container_last_seen里面的project，去prometheus里面去查一下是否有这个值</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240911192227950.png" alt="image-20240911192227950"></p><p>可以看到这个版本的project项目名叫job，所以project应该改成job</p><p><img src="../image/study_img/image-20240911194340683.png" alt="image-20240911194340683"></p><p>把project修改成job成功</p><p><img src="../image/study_img/image-20240911194429236.png" alt="image-20240911194429236"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2、server</span><br><span class="line">label_values(container_last_seen&#123;project=~<span class="string">&quot;<span class="variable">$project</span>&quot;</span>&#125;, server)</span><br></pre></td></tr></table></figure><p>这里面只要instance和job,没有server,所以把server删除</p><p><img src="../image/study_img/image-20240911194700416.png" alt="image-20240911194700416"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3、instance</span><br><span class="line">label_values(container_last_seen&#123;project=~<span class="string">&quot;<span class="variable">$project</span>&quot;</span>,server=~<span class="string">&quot;<span class="variable">$server</span>&quot;</span>&#125;, instance)</span><br><span class="line">server没有，不要，可以删除</span><br><span class="line"></span><br><span class="line">label_values(container_last_seen&#123;job=~<span class="string">&quot;<span class="variable">$project</span>&quot;</span>&#125;, instance)</span><br><span class="line"></span><br><span class="line"><span class="variable">$project</span>这个表示获取project里面的变量</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240911200218534.png" alt="image-20240911200218534"></p><p><img src="../image/study_img/image-20240911195320041.png" alt="image-20240911195320041"></p><p>修改完成，保存</p><p><img src="../image/study_img/image-20240911195411815.png" alt="image-20240911195411815"></p><p><img src="../image/study_img/image-20240911200333043.png" alt="image-20240911200333043"></p><p>查看没有数据，添加数据</p><p><img src="../image/study_img/image-20240911200507280.png" alt="image-20240911200507280"></p><p><img src="../image/study_img/image-20240911200625330.png" alt="image-20240911200625330"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">count(container_last_seen&#123;project=~<span class="string">&quot;<span class="variable">$project</span>&quot;</span>,instance=~<span class="string">&quot;<span class="variable">$instance</span>&quot;</span>,image!=<span class="string">&quot;&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">把变量和job换一下</span><br><span class="line">count(container_last_seen&#123;job=~<span class="string">&quot;cadvisor&quot;</span>,instance=~<span class="string">&quot;10.0.0.101:8080&quot;</span>,image!=<span class="string">&quot;&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>可以获取到数据</p><p><img src="../image/study_img/image-20240911200945018.png" alt="image-20240911200945018"></p><p><img src="../image/study_img/image-20240911201650404.png" alt="image-20240911201650404"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">因为prometheus里面查出来的没有project标签，只有job标签</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">container_last_seen&#123;<span class="built_in">id</span>=<span class="string">&quot;/&quot;</span>, instance=<span class="string">&quot;10.0.0.101:8080&quot;</span>, job=<span class="string">&quot;cadvisor&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>目前只改了一个数据，但是不可能一个一个去修改，所以需要批量修改</p><p><img src="../image/study_img/image-20240911201813116.png" alt="image-20240911201813116"></p><p>这个json文件就是模版，但往下看，这个json文件里面还是project，可以复制出来，批量替换成job</p><p><img src="../image/study_img/image-20240911201937730.png" alt="image-20240911201937730"></p><p><img src="../image/study_img/image-20240911202129508.png" alt="image-20240911202129508"></p><p>把替换后的json文件粘贴</p><p><img src="../image/study_img/image-20240911202309412.png" alt="image-20240911202309412"></p><p>保存之后，重新进入，查看数据</p><p><img src="../image/study_img/image-20240911202434264.png" alt="image-20240911202434264"></p><p><img src="../image/study_img/image-20240911202449993.png" alt="image-20240911202449993"></p><p>⑤、添加node_exporter的模版</p><p>在官网搜索模版ID</p><p><img src="../image/study_img/image-20240911215221833.png" alt="image-20240911215221833"></p><p><img src="../image/study_img/image-20240911215237958.png" alt="image-20240911215237958"></p><p>回到自己安装的grafana，添加模版</p><p><img src="../image/study_img/image-20240911215341094.png" alt="image-20240911215341094"></p><p><img src="../image/study_img/image-20240911215432195.png" alt="image-20240911215432195"></p><p><img src="../image/study_img/image-20240911215458213.png" alt="image-20240911215458213"></p><p>数据生成</p><p><img src="../image/study_img/image-20240911215516206.png" alt="image-20240911215516206"></p><p><img src="../image/study_img/image-20240911215800737.png" alt="image-20240911215800737"></p><p><img src="../image/study_img/image-20240911215816266.png" alt="image-20240911215816266"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node_filesystem_size_bytes&#123;instance=<span class="string">&quot;<span class="variable">$node</span>&quot;</span>,job=<span class="string">&quot;<span class="variable">$job</span>&quot;</span>,mountpoint=<span class="string">&quot;/&quot;</span>,fstype!=<span class="string">&quot;rootfs&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">想要展示数据就把,fstype!=<span class="string">&quot;rootfs&quot;</span>删掉</span><br><span class="line">node_filesystem_size_bytes&#123;instance=<span class="string">&quot;<span class="variable">$node</span>&quot;</span>,job=<span class="string">&quot;<span class="variable">$job</span>&quot;</span>,mountpoint=<span class="string">&quot;/&quot;</span>,fstype!=<span class="string">&quot;rootfs&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240911215845909.png" alt="image-20240911215845909"></p><p>想要展示数据就把,fstype!=&quot;rootfs&quot;删掉</p><p><img src="../image/study_img/image-20240911220402516.png" alt="image-20240911220402516"></p><p><img src="../image/study_img/image-20240911220531172.png" alt="image-20240911220531172"></p><p>再查看没数据的框，查看没数据的原因，并修改</p><p><img src="../image/study_img/image-20240911220656392.png" alt="image-20240911220656392"></p><p>无法查询数据，CPU没有等待时间，查询不出数据，所以没有数据没关系</p><p><img src="../image/study_img/image-20240911221251157.png" alt="image-20240911221251157"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irate(node_pressure_cpu_waiting_seconds_total&#123;instance=<span class="string">&quot;<span class="variable">$node</span>&quot;</span>,job=<span class="string">&quot;<span class="variable">$job</span>&quot;</span>&#125;[<span class="variable">$__rate_interval</span>])</span><br></pre></td></tr></table></figure><p>再继续排查下一个没有数据的原因，并修改</p><p><img src="../image/study_img/image-20240911221454957.png" alt="image-20240911221454957"></p><p><img src="../image/study_img/image-20240911221632432.png" alt="image-20240911221632432"></p><p><img src="../image/study_img/image-20240911222204013.png" alt="image-20240911222204013"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">没有数据就去prometheus里面查一下，看看是否有相关字段</span><br><span class="line"></span><br><span class="line">比较好用的模版有</span><br><span class="line">11277</span><br><span class="line">8919</span><br></pre></td></tr></table></figure><p>8919的模版图</p><p><img src="../image/study_img/image-20240911224138667.png" alt="image-20240911224138667"></p>]]></content>
    
    
    <summary type="html">不仅业务服务器可以监控，容器也可以监控，本文使用Promethues对容器进行监控，已经使用Grafana出好看的</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>九、🍡docker的资源限制</title>
    <link href="https://www.fomal.cc/posts/79ab352e.html"/>
    <id>https://www.fomal.cc/posts/79ab352e.html</id>
    <published>2024-09-22T06:03:04.000Z</published>
    <updated>2024-09-22T07:53:34.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker的资源限制">docker的资源限制</h2><h3 id="1、docker资源限制介绍"><strong>1、docker资源限制介绍</strong></h3><p>官网： <a href="https://docs.docker.com/engine/containers/resource_constraints/">https://docs.docker.com/engine/containers/resource_constraints/</a></p><p>带有内存、CPU 和 GPU 的运行时选项<br>默认情况下，容器没有资源限制，可以使用主机内核调度程序允许的尽可能多的给定资源。Docker 提供了控制容器可以使用多少内存或 CPU 的方法，设置docker run命令的运行时配置标志。本节提供有关何时应该设置此类限制以及设置这些限制的可能影响的详细信息。</p><p>其中许多功能需要您的内核支持 Linux 功能。要检查支持，您可以使用该 docker info命令。如果您的内核中禁用了某个功能，您可能会在输出的末尾看到如下警告：<br>WARNING: no swap limit support</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">阿里云上面没有swap空间，因为swap是虚拟的，阿里云也是虚拟的</span><br><span class="line">docker k8s都不要搞swap,本来就是虚拟化的产品，把虚拟磁盘再变成虚拟内存，性能更低</span><br><span class="line"></span><br><span class="line">当磁盘被沾满了，会内存溢出，会启动OOM <span class="built_in">kill</span>,会杀进程</span><br></pre></td></tr></table></figure><h4 id="Dokcer内存限制"><strong>Dokcer内存限制</strong></h4><p>Docker限制内存的相关参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1、拉取压测工具的镜像</span><br><span class="line">[root@docker03 ~]# docker pull akarshes/docker-stress-ng:latest</span><br><span class="line"></span><br><span class="line">2、# 内存限制测试</span><br><span class="line"><span class="comment"># 没有内存限制</span></span><br><span class="line">[root@docker02 ~]# docker run --name mem_test -it --<span class="built_in">rm</span> akarshes/docker-stress-ng --vm 8</span><br><span class="line">[root@docker03 ~]# docker stats</span><br><span class="line">CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O         BLOCK I/O         PIDS</span><br><span class="line">9450d02cb9a1   mem_test          234.65%   2.006GiB / 2.885GiB   69.55%    586B / 0B       5.55MB / 0B       17</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#对容器做资源限制</span></span><br><span class="line">[root@docker03 ~]# docker run --name mem_test -it --<span class="built_in">rm</span>  -m 200m akarshes/docker-stress-ng --vm 8</span><br><span class="line">[root@docker03 ~]# docker stats</span><br><span class="line">CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O          BLOCK I/O         PIDS</span><br><span class="line">7870345de325   mem_test          136.94%   193.2MiB / 200MiB     96.59%    656B / 0B        59.7MB / 7.41GB   15</span><br><span class="line"></span><br><span class="line">-m：允许容器使用的最大内存，单位：k、m、g</span><br><span class="line">--oom-kill-disable</span><br><span class="line"><span class="comment">#查看命令的帮助</span></span><br><span class="line">docker run --name mem_test -it --<span class="built_in">rm</span> akarshes/docker-stress-ng --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Example: stress-ng --cpu 8 --io 4 --vm 2 --vm-bytes 128M --fork 4 --<span class="built_in">timeout</span> 10s</span><br></pre></td></tr></table></figure><h4 id="Dokcer限制CPU"><strong>Dokcer限制CPU</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没做CPU限制</span></span><br><span class="line">[root@docker02 ~]# docker run --name mem_test -it --<span class="built_in">rm</span> akarshes/docker-stress-ng --cpu 4</span><br><span class="line">[root@docker03 ~]# docker stats</span><br><span class="line">CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O         BLOCK I/O         PIDS</span><br><span class="line">3c74f649be1e   mem_test          214.19%   25.6MiB / 2.885GiB    0.87%     656B / 0B       0B / 0B           9</span><br><span class="line"><span class="comment">#cpu数据一直增加，在超载</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制CPU</span></span><br><span class="line">[root@docker02 ~]# docker run --name mem_test -it --<span class="built_in">rm</span> --cpus 0.5 akarshes/docker-stress-ng -cpu 8</span><br></pre></td></tr></table></figure><p>我们资源限制不是目的，目的是我们要随时监控到我们的资源，能看到容器对宿主机资源的使用，才能更好的做限制，不要盲目限制，不知道资源使用的情况下，就对容器资源限制，是很危险的。所以我们要对容器进行监控，如果不监控。容器超载了就会出现OMM内存溢出，杀进程的情况</p>]]></content>
    
    
    <summary type="html">docker资源限制介绍</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>八、🍡docker容器跨主机通信</title>
    <link href="https://www.fomal.cc/posts/f36f1204.html"/>
    <id>https://www.fomal.cc/posts/f36f1204.html</id>
    <published>2024-09-22T05:57:59.000Z</published>
    <updated>2024-09-22T07:53:34.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker容器跨主机通信">docker容器跨主机通信</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">起那么多台docker，想做集群，就要让容器之间互相通信，然后做成一个架构</span><br><span class="line"></span><br><span class="line"><span class="comment">#docker-compos多机编排，需要配合docker-swarm</span></span><br><span class="line"></span><br><span class="line">现在起一个容器自己决定起在哪一台上，没有对这台的资源进行计算</span><br><span class="line">多机编排工具可以计算哪台机器适合把服务起在哪台机器</span><br></pre></td></tr></table></figure><p><strong>Docker跨主机网络类型</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、静态路由</span><br><span class="line">2、flannel (k8s里面用的比较多)</span><br><span class="line">3、overlay</span><br><span class="line">4、macvlan</span><br><span class="line">5、calico</span><br></pre></td></tr></table></figure><h3 id="1、静态路由模式"><strong>1、静态路由模式</strong></h3><p><img src="C:%5CUsers%5CMac%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240910090901456.png" alt="image-20240910090901456"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">静态路由做起来简单，但是阿里云不让添加路由</span><br><span class="line"></span><br><span class="line">1. 添加一条到达网络192.168.1.0/24的路由，网关为192.168.0.1，距离值为10：</span><br><span class="line">route add -net 192.168.1.0 netmask 255.255.255.0 gw 192.168.0.1 metric 10</span><br><span class="line"></span><br><span class="line">2. 添加一条到达主机192.168.1.100的路由，网关为192.168.0.1：</span><br><span class="line">route add -host 192.168.1.100 gw 192.168.0.1</span><br><span class="line"></span><br><span class="line">3. 添加一条到达网络192.168.0.0/16的路由，网关为192.168.1.1，距离值为20，经过eth0接口：</span><br><span class="line">route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 metric 20 dev eth0</span><br></pre></td></tr></table></figure><p>2、flannel (k8s里面用的比较多)</p><p><img src="C:%5CUsers%5CMac%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240910091610337.png" alt="image-20240910091610337"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flannel图形化界面需要配置证书</span><br></pre></td></tr></table></figure><h3 id="2、flanne网络模式的部署"><strong>2、flanne网络模式的部署</strong></h3><p>环境准备</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th><th>应用</th></tr></thead><tbody><tr><td>docker01</td><td>10.0.0.101  /  172.16.1.101</td><td>互相通信的容器</td><td>flanne</td></tr><tr><td>docker02</td><td>10.0.0.102  /  172.16.1.102</td><td>互相通信的容器</td><td>flanne</td></tr><tr><td>docker03</td><td>10.0.0.103  /  172.16.1.103</td><td>互相通信的容器</td><td>flanne</td></tr><tr><td>elk01</td><td>10.0.0.76  /  172.16.1.76</td><td>储存数据的中介</td><td>ETCD</td></tr></tbody></table><p>1、部署ETCD</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1、安装etcd</span><br><span class="line">[root@elk1 ~]# yum -y install etcd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、修改etcd配置文件</span><br><span class="line">[root@elk1 ~]# vim /etc/etcd/etcd.conf </span><br><span class="line"><span class="comment"># [member]</span></span><br><span class="line">ETCD_NAME=default</span><br><span class="line">ETCD_DATA_DIR=<span class="string">&quot;/var/lib/etcd/default.etcd&quot;</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">&quot;http://172.16.1.76:2379,http://127.0.0.1:2379&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [cluster]</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=<span class="string">&quot;new&quot;</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">&quot;etcd-cluster&quot;</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">&quot;http://172.16.1.76:2379&quot;</span></span><br><span class="line"></span><br><span class="line">3、启动etcd并加入开机自启</span><br><span class="line">[root@elk1 ~]# systemctl start etcd</span><br><span class="line">[root@elk1 ~]# systemctl <span class="built_in">enable</span> etcd</span><br><span class="line">查看端口 2380是图形化界面连接的端口</span><br></pre></td></tr></table></figure><p>ETCD的基础操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-c  调接口</span><br><span class="line"></span><br><span class="line">1、检查集群的健康状态</span><br><span class="line">[root@elk1 ~]# etcdctl -C http://127.0.0.1:2379 cluster-health</span><br><span class="line"></span><br><span class="line">2、写入数据</span><br><span class="line">[root@elk1 ~]# etcdctl -C http://127.0.0.1:2379 <span class="built_in">set</span> /testdir/testkey <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line">3、查看数据</span><br><span class="line">[root@elk1 ~]# etcdctl -C http://127.0.0.1:2379 get /testdir/testkey </span><br></pre></td></tr></table></figure><p>2、3台机器安装配置flannel</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1、3台机器安装flannel</span><br><span class="line">[root@docker01 ~]# yum -y install flannel</span><br><span class="line">[root@docker02 ~]# yum -y install flannel</span><br><span class="line">[root@docker02 ~]# yum -y install flannel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、3台机器修改flannle配置文件</span><br><span class="line">[root@docker02 ~]# vim /etc/sysconfig/flanneld</span><br><span class="line"><span class="comment">#写etcd端的ip</span></span><br><span class="line">FLANNEL_ETCD_ENDPOINTS=<span class="string">&quot;http://172.16.1.76:2379&quot;</span></span><br><span class="line"><span class="comment">#这段是默认的，不需要修改，一会要在改目录下创建文件</span></span><br><span class="line">FLANNEL_ETCD_PREFIX=<span class="string">&quot;/atomic.io/network&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、创建flannel数据再etcd中</span><br><span class="line">[root@elk1 ~]# etcdctl mk /atomic.io/network/config <span class="string">&#x27;&#123;&quot;Network&quot;:&quot;192.168.0.0/16&quot;&#125;&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;Network&quot;</span>:<span class="string">&quot;192.168.0.0/16&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">[root@elk1 ~]# etcdctl -C http://127.0.0.1:2379 <span class="built_in">set</span> /atomic.io/network/config <span class="string">&#x27;&#123;&quot;Network&quot;:&quot;192.168.0.0/16&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">4、3台机器启动flannel</span><br><span class="line">[root@docker01 ~]# systemctl start flanneld &amp;&amp; systemctl <span class="built_in">enable</span> flanneld</span><br><span class="line"></span><br><span class="line">5、3台机器查看flannel0网卡信息</span><br><span class="line">[root@docker01 ~]# ifconfig</span><br><span class="line">flannel0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1472</span><br><span class="line">        inet 192.168.54.0  netmask 255.255.0.0  destination 192.168.54.0</span><br></pre></td></tr></table></figure><p>3、关联flannel和docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">1、3台机器查看改文件，一会会在启动脚本里面加信息</span><br><span class="line">[root@docker02 ~]# <span class="built_in">cat</span> /run/flannel/docker </span><br><span class="line">DOCKER_OPT_BIP=<span class="string">&quot;--bip=192.168.22.1/24&quot;</span></span><br><span class="line">DOCKER_OPT_IPMASQ=<span class="string">&quot;--ip-masq=true&quot;</span></span><br><span class="line">DOCKER_OPT_MTU=<span class="string">&quot;--mtu=1472&quot;</span></span><br><span class="line">DOCKER_NETWORK_OPTIONS=<span class="string">&quot; --bip=192.168.22.1/24 --ip-masq=true --mtu=1472&quot;</span></span><br><span class="line"></span><br><span class="line">2、3台机器修改docker启动脚本</span><br><span class="line">[root@docker02 ~]# vim /usr/lib/systemd/system/docker.service</span><br><span class="line">[Service]</span><br><span class="line"><span class="comment">#添加这行读取环境变量文件</span></span><br><span class="line">EnviromentFile=/run/flannel/docker </span><br><span class="line"><span class="comment">#在最后面添加变量</span></span><br><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock <span class="variable">$DOCKER_NETWORK_OPTIONS</span></span><br><span class="line"></span><br><span class="line">[root@docker03 ~]# systemctl daemon-reload &amp;&amp; systemctl restart flanneld</span><br><span class="line"></span><br><span class="line">3、3台机器开启内核转发</span><br><span class="line">[root@docker03 ~]# <span class="built_in">echo</span> <span class="string">&#x27;net.ipv4.ip_forward=1&#x27;</span>  &gt;&gt; /etc/sysctl.conf </span><br><span class="line"></span><br><span class="line">4、3台机器开做如下操作</span><br><span class="line">[root@docker01 ~]# systemctl restart docker</span><br><span class="line">[root@docker01 ~]# systemctl start firewalld</span><br><span class="line">[root@docker01 ~]# systemctl stop firewalld</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# systemctl start firewalld &amp;&amp; systemctl stop firewalld</span><br><span class="line">[root@docker01 ~]#  systemctl restart network</span><br><span class="line">[root@docker01 ~]#  systemctl restart flanneld </span><br><span class="line">[root@docker01 ~]#  systemctl restart docker</span><br><span class="line"></span><br><span class="line">------------注意---------------------</span><br><span class="line">1、# 执行docker info 出现警告</span><br><span class="line"><span class="comment">#需要配置内核转发支持iptables</span></span><br><span class="line">WARNING: bridge-nf-call-iptables is disabled</span><br><span class="line">WARNING: bridge-nf-call-ip6tables is disabled</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysctl.d/docker.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables=1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables=1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward=1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">[root@docker01 ~]#  systemctl restart network</span><br><span class="line">[root@docker01 ~]#  systemctl restart flanneld </span><br><span class="line">[root@docker01 ~]#  systemctl restart docker</span><br></pre></td></tr></table></figure><p>3、测试是否可以通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1、进去查看3台机器的ip,然后再互相ping  IP，如果可以ping通则ok</span><br><span class="line">[root@docker01 ~]# docker run -it busybox /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:36:02  </span><br><span class="line">          inet addr:192.168.54.2  Bcast:192.168.54.255  Mask:255.255.255.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@docker02 ~]# docker run -it busybox /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:16:05  </span><br><span class="line">          inet addr:192.168.22.5  Bcast:192.168.22.255  Mask:255.255.255.0</span><br><span class="line">          </span><br><span class="line">[root@docker03 ~]# docker run -it busybox /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:39:05  </span><br><span class="line">          inet addr:192.168.57.5  Bcast:192.168.57.255  Mask:255.255.255.0</span><br></pre></td></tr></table></figure><h3 id="3、overlay跨主机通信"><strong>3、overlay跨主机通信</strong></h3><p><img src="C:%5CUsers%5CMac%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240910144826332.png" alt="image-20240910144826332"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">http://www.cnblogs.com/CloudMan6/p/7270551.html</span><br><span class="line"></span><br><span class="line">docker03上： consul存储ip地址的分配</span><br><span class="line">docker run -d -p 8500:8500 -h consul --name consul progrium/consul -server -bootstrap</span><br><span class="line"></span><br><span class="line">设置容器的主机名</span><br><span class="line">consul：kv类型的存储数据库（key:value）</span><br><span class="line">docker01、02上：</span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;cluster-store&quot;</span>: <span class="string">&quot;consul://10.0.0.13:8500&quot;</span>,</span><br><span class="line"><span class="string">&quot;cluster-advertise&quot;</span>: <span class="string">&quot;10.0.0.11:2376&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vim /usr/lib/systemd/system/docker.service</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line">2）创建overlay网络</span><br><span class="line">docker network create -d overlay --subnet 172.16.2.0/24 --gateway 172.16.2.254 ol1</span><br><span class="line"></span><br><span class="line">3）启动容器测试</span><br><span class="line">docker run -it --network ol1 --name oldboy01 busybox /bin/sh</span><br><span class="line">每个容器有两块网卡,eth0实现容器间的通讯,eth1实现容器访问外网</span><br></pre></td></tr></table></figure><h3 id="4、macvlan"><strong>4、macvlan</strong></h3><p>默认一个物理网卡，只有一个物理mac地址，虚拟多个mac地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建macvlan网络</span></span><br><span class="line">docker network create --driver macvlan --subnet 10.0.0.0/24 --gateway 10.0.0.254 -o parent=eth0 macvlan_1</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置eth0的网卡为混杂模式</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> eth0 promisc on</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建使用macvlan网络的容器</span></span><br><span class="line">docker run -it --network macvlan_1 --ip=10.0.0.200 busybox</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Docker跨主机网络模式的介绍</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>七、🍡DOcker单机编排工具</title>
    <link href="https://www.fomal.cc/posts/c7b1e5e1.html"/>
    <id>https://www.fomal.cc/posts/c7b1e5e1.html</id>
    <published>2024-09-22T05:54:39.000Z</published>
    <updated>2024-09-22T07:53:34.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DOcker单机编排工具">DOcker单机编排工具</h2><h3 id="1、docker-compose的介绍">1、<strong>docker-compose的介绍</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Compose是用于定义和运行多容器Docker应用工具通过Compose 可以使用YML文件来配置应用程序所需要的所有服务，用来管理容器的起停，查看容器的日志，比较方便</span><br><span class="line">不像docker run命令比较长，而且是临时执行的</span><br><span class="line"></span><br><span class="line">DockerCompose使用的三步:</span><br><span class="line">1.使用docker file 定义应用程序的环境镜像</span><br><span class="line">2.docker-compose定义构成应用程序的服务</span><br><span class="line">3.启动Compose，就相当于启动应用</span><br></pre></td></tr></table></figure><p><strong>版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">compose文件版本：version: <span class="string">&#x27;2.3&#x27;</span></span><br><span class="line"></span><br><span class="line">docker-compose程序安装的版本：</span><br><span class="line">[root@harbor harbor]# docker-compose --version</span><br><span class="line">docker-compose version 1.18.0, build 8dd22a9</span><br><span class="line"></span><br><span class="line">docker版本：</span><br><span class="line">[root@harbor harbor]# docker --version</span><br><span class="line">Docker version 26.1.4, build 5650f9b</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240909134745384.png" alt="image-20240909134745384"></p><h3 id="2、安装bocker-compose">2、<strong>安装bocker-compose</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方法一：版本不可控，安装的版本稍微偏老  1.18的</span></span><br><span class="line">1、安装bocker-compose </span><br><span class="line">[root@docker01 ~]# yum install -y docker-compose</span><br><span class="line">[root@docker01 ~]# docker-compose --version</span><br><span class="line">docker-compose version 1.18.0, build 8dd22a9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、方法二  可能要开代理下载</span><br><span class="line">[root@docker02 bin]# curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/2.29.2/dockercompose-Linux-x86_64&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# <span class="built_in">mv</span> docker-compose-linux-x86_64\ \(2\)  docker-compose</span><br><span class="line">[root@docker01 ~]# <span class="built_in">mv</span> docker-compose /usr/local/bin/</span><br><span class="line">[root@docker01 ~]# <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose    </span><br><span class="line">[root@docker01 ~]# docker-compose  --version</span><br><span class="line">Docker Compose version v2.29.2</span><br><span class="line"></span><br><span class="line"><span class="comment">#想要其他机器能够使用docker-compose命令,可以把这个文件scp过去</span></span><br><span class="line">scp /usr/local/bin/docker-compose 10.0.0.102:/usr/local/bin/</span><br></pre></td></tr></table></figure><h3 id="3、docker-compose的模版">3、<strong>docker-compose的模版</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;版本号&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  服务名称1:</span><br><span class="line">    image: 容器镜像</span><br><span class="line">    container_name: 容器名称(容器名称和服务名称保持一致)</span><br><span class="line">    environment:</span><br><span class="line">      - 环境变量1=值1</span><br><span class="line">      - 环境变量2=值2</span><br><span class="line">    volumes:</span><br><span class="line">      - 宿主机数据目录:容器内数据目录</span><br><span class="line">    ports:</span><br><span class="line">      - 宿主机端口:容器内映射端口</span><br><span class="line">    networks:</span><br><span class="line">      - 自定义网络名称</span><br><span class="line">    links:</span><br><span class="line">      - namenode</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - 数据库使用字符集变量时可以用</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  服务名称2:</span><br><span class="line">    image: 容器镜像</span><br><span class="line">    container_name: 容器名称(容器名称和服务名称保持一致)</span><br><span class="line">    environment:</span><br><span class="line">      - 环境变量1=值1</span><br><span class="line">      - 环境变量2=值2</span><br><span class="line">    user: 宿主机用户:容器用户</span><br><span class="line">    volumes:</span><br><span class="line">      - 宿主机数据目录:容器内数据目录</span><br><span class="line">    ports:</span><br><span class="line">      - 宿主机端口:容器内映射端口</span><br><span class="line">    networks:</span><br><span class="line">      - 自定义网络名称</span><br><span class="line">    links:</span><br><span class="line">      - namenode</span><br><span class="line">    depends_on:</span><br><span class="line">      - 依赖服务</span><br><span class="line">    restart: always</span><br><span class="line"> </span><br><span class="line"><span class="comment">#如果没有网络，就会自动创建</span></span><br><span class="line">networks:</span><br><span class="line">  default:</span><br><span class="line">  externnal: <span class="literal">true</span></span><br><span class="line">  name: 自定义网络名称</span><br></pre></td></tr></table></figure><h3 id="4、docker-compose——单机编排mysql">4、<strong>docker-compose——单机编排mysql</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">1、#找到运行mysql的命令</span><br><span class="line">docker run \</span><br><span class="line">--name mysql80 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=zabbix \</span><br><span class="line">-e MYSQL_USER=zabbix \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:8.0 \</span><br><span class="line">--character-set-server=utf8mb4 \</span><br><span class="line">--collation-server=utf8mb4_bin \</span><br><span class="line">--log_bin_trust_function_creators</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#编写docker-compose</span><br><span class="line">如果之前运行有其他版本的mysql，需要清除目录</span><br><span class="line">[root@docker01 mysql]# <span class="built_in">rm</span> -rf /data/</span><br><span class="line">[root@docker01 ~]# <span class="built_in">mkdir</span> mysql</span><br><span class="line">[root@docker01 ~]# <span class="built_in">cd</span> mysql/</span><br><span class="line">[root@docker01 mysql]# vim mysql-compose.yml    (名字最好叫docker-compose.yml)</span><br><span class="line">version: <span class="string">&#x27;2.0&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  mysql80:</span><br><span class="line">    image: mysql:8.0</span><br><span class="line">    container_name: mysql80</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=123</span><br><span class="line">      - MYSQL_DATABASE=zabbix</span><br><span class="line">      - MYSQL_USER=zabbix</span><br><span class="line">      - MYSQL_PASSWORD=123</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/mysql:/var/lib/mysql</span><br><span class="line">    ports:</span><br><span class="line">      - 3306:3306</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - --character-set-server=utf8mb4</span><br><span class="line">      - --collation-server=utf8mb4_bin</span><br><span class="line">      - --log_bin_trust_function_creators</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、#第一次启动使用up,会创建容器并启动容器,前台输出日志</span><br><span class="line">如果创建的文件名叫docker-compose.yml，启动命令是：</span><br><span class="line">      docker-compose up</span><br><span class="line">      </span><br><span class="line">如果创建的文件名不叫docker-compose.yml，启动命令是：</span><br><span class="line">[root@docker01 mysql]# docker-compose -f mysql-compose.yml up</span><br><span class="line"></span><br><span class="line">检查没问题就ctrl+c</span><br></pre></td></tr></table></figure><p>docker-compose的操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一次启动创建容器并前台输出日志</span></span><br><span class="line">[root@docker01 mysql]# docker-compose -f mysql-compose.yml up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果日志没有报错，直接后台启动</span></span><br><span class="line">[root@docker01 mysql]# docker-compose -f mysql-compose.yml up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">[root@docker01 mysql]# docker-compose -f mysql-compose.yml stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">[root@docker01 mysql]# docker-compose -f mysql-compose.yml start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">[root@docker01 mysql]# docker-compose -f mysql-compose.yml restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看该compose中的所有容器运行状态</span></span><br><span class="line">[root@docker01 mysql]# docker-compose -f mysql-compose.yml ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除compose中的容器</span></span><br><span class="line">[root@docker01 mysql]# docker-compose <span class="built_in">rm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">[root@docker01 mysql]# docker-compose logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定服务启停</span></span><br><span class="line">[root@harbor harbor]# docker-compose start proxy</span><br></pre></td></tr></table></figure><h3 id="5、docker-compose——单机编排zabbix">5、<strong>docker-compose——单机编排zabbix</strong></h3><p>1、找到运行zabbix的docker命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">mysql要初始化。所以web-server要后启动  写成=如果报错。就要写成key: value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、#找到运行mysql的命令</span><br><span class="line">docker run \</span><br><span class="line">--name mysql80 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=zabbix \</span><br><span class="line">-e MYSQL_USER=zabbix \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:8.0 \</span><br><span class="line">--character-set-server=utf8mb4 \</span><br><span class="line">--collation-server=utf8mb4_bin \</span><br><span class="line">--log_bin_trust_function_creators</span><br><span class="line"></span><br><span class="line">2、运行容器化zabbix-server</span><br><span class="line">docker run \</span><br><span class="line">--<span class="built_in">link</span> mysql80 \</span><br><span class="line">--name zabbix-server \</span><br><span class="line">-p 10051:10051 \</span><br><span class="line">-e DB_SERVER_HOST=<span class="string">&quot;mysql80&quot;</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">&quot;zabbix&quot;</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">&quot;123&quot;</span> \</span><br><span class="line">-d zabbix/zabbix-server-mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、容器化zabbix-web</span><br><span class="line">docker run \</span><br><span class="line">--<span class="built_in">link</span> zabbix-server \</span><br><span class="line">--<span class="built_in">link</span> mysql80 \</span><br><span class="line">--name zabbix-web \</span><br><span class="line">-p 80:8080 \</span><br><span class="line">-p 8443:8443 \</span><br><span class="line">-e DB_SERVER_HOST=<span class="string">&quot;mysql80&quot;</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">&quot;zabbix&quot;</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">&quot;123&quot;</span> \</span><br><span class="line">-e ZBX_SERVER_HOST=<span class="string">&quot;zabbix-server&quot;</span> \</span><br><span class="line">-e PHP_TZ=<span class="string">&quot;Asia/Shanghai&quot;</span> \</span><br><span class="line">-d zabbix/zabbix-web-nginx-mysql</span><br></pre></td></tr></table></figure><p>2、编写zabbix的docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]# <span class="built_in">rm</span> -rf /data/</span><br><span class="line">[root@docker01 ~]# <span class="built_in">mkdir</span> zabbix</span><br><span class="line">[root@docker01 ~]# <span class="built_in">cd</span> zabbix/</span><br><span class="line">[root@docker01 zabbix]# vim docker-compose.yml</span><br><span class="line">version: <span class="string">&#x27;2.0&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  mysql80:</span><br><span class="line">    image: mysql:8.0</span><br><span class="line">    container_name: mysql80</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=123</span><br><span class="line">      - MYSQL_DATABASE=zabbix</span><br><span class="line">      - MYSQL_USER=zabbix</span><br><span class="line">      - MYSQL_PASSWORD=123</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/mysql:/var/lib/mysql</span><br><span class="line">    ports:</span><br><span class="line">      - 3306:3306</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - --character-set-server=utf8mb4</span><br><span class="line">      - --collation-server=utf8mb4_bin</span><br><span class="line">      - --log_bin_trust_function_creators</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  zabbix-server:</span><br><span class="line">    image: zabbix/zabbix-server-mysql</span><br><span class="line">    container_name: zabbix-server</span><br><span class="line">    environment:</span><br><span class="line">      - DB_SERVER_HOST=mysql80</span><br><span class="line">      - MYSQL_USER=zabbix</span><br><span class="line">      - MYSQL_PASSWORD=123</span><br><span class="line">    ports:</span><br><span class="line">      - 10051:10051</span><br><span class="line">    links:</span><br><span class="line">      - mysql80</span><br><span class="line">    restart: always</span><br><span class="line">    </span><br><span class="line">  zabbix-web:</span><br><span class="line">    image: zabbix/zabbix-web-nginx-mysql</span><br><span class="line">    container_name: zabbix-web</span><br><span class="line">    environment:</span><br><span class="line">      - DB_SERVER_HOST=mysql80</span><br><span class="line">      - MYSQL_USER=zabbix</span><br><span class="line">      - MYSQL_PASSWORD=123</span><br><span class="line">      - ZBX_SERVER_HOST=zabbix-server</span><br><span class="line">      - PHP_TZ=Asia/Shanghai</span><br><span class="line">    ports:</span><br><span class="line">      - 80:8080</span><br><span class="line">      - 443:8443</span><br><span class="line">    links:</span><br><span class="line">      - mysql80</span><br><span class="line">      - zabbix-server</span><br><span class="line">    restart: always</span><br><span class="line">    </span><br><span class="line"><span class="comment">#  networks:</span></span><br><span class="line"><span class="comment">#    default:</span></span><br><span class="line"><span class="comment">#      externnal: true</span></span><br><span class="line"><span class="comment">#      name: zabbix-net</span></span><br><span class="line"><span class="comment">#基于默认的default-bridge类型创建一个bridge类型的网桥</span></span><br></pre></td></tr></table></figure><p>####报错</p><p><img src="../image/study_img/image-20240909153932154.png" alt="image-20240909153932154"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 如果有环境变量的报错，就取消单引号试一下，不行再换成key:value格式</span></span><br><span class="line">environment:</span><br><span class="line">- DB_SERVER_HOST: <span class="string">&#x27;mysql80&#x27;</span></span><br><span class="line">- MYSQL_USER: <span class="string">&#x27;zabbix&#x27;</span></span><br><span class="line">- MYSQL_PASSWORD: <span class="string">&#x27;zabbix&#x27;</span></span><br></pre></td></tr></table></figure><p>3、启动zabbix</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、前台检查是否有报错</span><br><span class="line">[root@docker01 zabbix]# docker-compose up </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、没有报错就放后台运行</span><br><span class="line">[root@docker01 zabbix]# docker-compose up -d</span><br><span class="line"></span><br><span class="line">3、浏览器访问</span><br><span class="line">10.0.0.101</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240909154947402.png" alt="image-20240909154947402"></p><h3 id="6、docker-compose——单机编排jenkins">6、<strong>docker-compose——单机编排jenkins</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">1、gitlab镜像</span><br><span class="line">docker run \</span><br><span class="line">--hostname 10.0.0.102 \</span><br><span class="line">--<span class="built_in">env</span> GITLAB_OMNIBUS_CONFIG=<span class="string">&quot;external_url &#x27;http://10.0.0.102&#x27;&quot;</span> \</span><br><span class="line">-p 443:443 -p 80:80 -p 2222:22 \</span><br><span class="line">--name gitlab \</span><br><span class="line">--restart always \</span><br><span class="line">-v /data/gitlab/config:/etc/gitlab \</span><br><span class="line">-v /data/gitlab/logs:/var/log/gitlab \</span><br><span class="line">-v /data/gitlab/data:/var/opt/gitlab \</span><br><span class="line">-d gitlab/gitlab-ce</span><br><span class="line"></span><br><span class="line">2、运行jenkins容器</span><br><span class="line">docker run \</span><br><span class="line">--name jenkins \</span><br><span class="line">--privileged \</span><br><span class="line">--user=root \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /data/jenkins/:/var/jenkins_home \</span><br><span class="line">-v /usr/bin/docker:/usr/bin/docker \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">-v /root/.ssh/:/root/.ssh/ \</span><br><span class="line">-v /root/.docker/config.json:/root/.docker/config.json \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-p 5000:5000 \</span><br><span class="line">-d jenkins/jenkins:2.422</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# <span class="built_in">mkdir</span> jenkins &amp;&amp; <span class="built_in">cd</span> jenkins</span><br><span class="line">[root@docker01 jenkins]# vim jenkins-docker-compose.yml</span><br><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  gitlab:</span><br><span class="line">    image: gitlab/gitlab-ce</span><br><span class="line">    container_name: gitlab</span><br><span class="line">    hostname: 10.0.0.102</span><br><span class="line">    environment:</span><br><span class="line">      GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">        external_url <span class="string">&#x27;http://10.0.0.102</span></span><br><span class="line"><span class="string">        gitlab_rails[&#x27;</span>gitlab_shell_ssh_port<span class="string">&#x27;] = 2222 </span></span><br><span class="line"><span class="string">        alertmanager[&#x27;</span><span class="built_in">enable</span><span class="string">&#x27;] = false</span></span><br><span class="line"><span class="string">        node_exporter[&#x27;</span><span class="built_in">enable</span><span class="string">&#x27;] = false</span></span><br><span class="line"><span class="string">        redis_exporter[&#x27;</span><span class="built_in">enable</span><span class="string">&#x27;] = false</span></span><br><span class="line"><span class="string">        postgres_exporter[&#x27;</span><span class="built_in">enable</span><span class="string">&#x27;] = false</span></span><br><span class="line"><span class="string">    volumes:</span></span><br><span class="line"><span class="string">      - /data/gitlab/config:/etc/gitlab </span></span><br><span class="line"><span class="string">      - /data/gitlab/logs:/var/log/gitlab </span></span><br><span class="line"><span class="string">      - /data/gitlab/data:/var/opt/gitlab</span></span><br><span class="line"><span class="string">    ports:</span></span><br><span class="line"><span class="string">      - 443:443 </span></span><br><span class="line"><span class="string">      - 80:80 </span></span><br><span class="line"><span class="string">      - 2222:22</span></span><br><span class="line"><span class="string">    restart: always</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">  jenkins:</span></span><br><span class="line"><span class="string">    image: jenkins/jenkins:2.422</span></span><br><span class="line"><span class="string">    container_name: jenkins</span></span><br><span class="line"><span class="string">    user: root</span></span><br><span class="line"><span class="string">    privileged: ture</span></span><br><span class="line"><span class="string">    volumes:</span></span><br><span class="line"><span class="string">      - /data/jenkins/:/var/jenkins_home</span></span><br><span class="line"><span class="string">      - /usr/bin/docker:/usr/bin/docker</span></span><br><span class="line"><span class="string">      - /var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line"><span class="string">      - /root/.ssh/:/root/.ssh/</span></span><br><span class="line"><span class="string">      - /root/.docker/config.json:/root/.docker/config.json</span></span><br><span class="line"><span class="string">    ports:</span></span><br><span class="line"><span class="string">      - 8080:8080 </span></span><br><span class="line"><span class="string">      - 5000:5000 </span></span><br><span class="line"><span class="string">    restart: always</span></span><br></pre></td></tr></table></figure><h3 id="7、docker-compose——单机编排wordpress">7、<strong>docker-compose——单机编排wordpress</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行数据库</span></span><br><span class="line">docker run \</span><br><span class="line">--name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=wp_db \</span><br><span class="line">-e MYSQL_USER=wp_user \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:5.7.44</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行wordpress容器</span></span><br><span class="line">docker run \</span><br><span class="line">--name wp \</span><br><span class="line">--<span class="built_in">link</span> mysql57 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-e WORDPRESS_DB_HOST=mysql57 \</span><br><span class="line">-e WORDPRESS_DB_USER=wp_user \</span><br><span class="line">-e WORDPRESS_DB_PASSWORD=123 \</span><br><span class="line">-e WORDPRESS_DB_NAME=wp_db \</span><br><span class="line">-d wordpress-df:v1 </span><br></pre></td></tr></table></figure><p>2、编写docker-compos</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]# <span class="built_in">mkdir</span> wp</span><br><span class="line">[root@docker01 ~]# <span class="built_in">cd</span> wp/</span><br><span class="line">[root@docker01 wp]# vim wp-docker-compose.yml</span><br><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  mysql57:</span><br><span class="line">    image: mysql:5.7.44</span><br><span class="line">    container_name: mysql57</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=123</span><br><span class="line">      - MYSQL_DATABASE=wp_db</span><br><span class="line">      - MYSQL_USER=wp_user</span><br><span class="line">      - MYSQL_PASSWORD=123</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/mysql:/var/lib/mysql</span><br><span class="line">    ports:</span><br><span class="line">      - 3306:3306</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  wp:</span><br><span class="line">    image:  wordpress-df:v2</span><br><span class="line">    container_name: wp</span><br><span class="line">    environment:</span><br><span class="line">      - WORDPRESS_DB_HOST=mysql57</span><br><span class="line">      - WORDPRESS_DB_USER=wp_user</span><br><span class="line">      - WORDPRESS_DB_PASSWORD=123</span><br><span class="line">      - WORDPRESS_DB_NAME=wp_db</span><br><span class="line">    ports:</span><br><span class="line">      - 80:80</span><br><span class="line">    links:</span><br><span class="line">      - mysql57</span><br><span class="line">    restart: always</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">[root@docker01 wp]# docker-compose -f wp-docker-compose.yml up -d</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用docker-compose理容器的起停</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>六、🍡docker的容器化代码上线</title>
    <link href="https://www.fomal.cc/posts/93124e7b.html"/>
    <id>https://www.fomal.cc/posts/93124e7b.html</id>
    <published>2024-09-22T05:24:52.000Z</published>
    <updated>2024-09-25T13:48:36.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="容器化代码上线">容器化代码上线</h2><h3 id="1、容器化gitlab"><strong>1、容器化gitlab</strong></h3><p>环境准备  先检查可以内存Avail(最少还有10G)比较多的机器，去拉取gitlab，不然会拉取失败</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th><th>内存</th></tr></thead><tbody><tr><td>docker03</td><td>10.0.0.102  /  172.16.1.102</td><td>部署容器化gitlab</td><td>8G</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器化代码上线坑：</span></span><br><span class="line">1.gitlab如何使用非22端口拉代码</span><br><span class="line">2.jenkins容器如何使用docker命令</span><br><span class="line">3.jenkins的密钥上传到gitlab</span><br><span class="line">4.jenkins如何登录 harbor</span><br><span class="line"></span><br><span class="line">开发把代码提交到gitlab，jekins去拉取代码到容器里面</span><br></pre></td></tr></table></figure><p>容器化代码上线流程图</p><p><img src="../image/study_img/image-20240905093733661.png" alt="image-20240905093733661"></p><p>1、去官网查找运行容器的代码  <a href="https://about.gitlab.com/">https://about.gitlab.com/</a></p><p><img src="../image/study_img/image-20240907130711368.png" alt="image-20240907130711368"></p><p>往下滑 找到容器安装</p><p><img src="../image/study_img/image-20240907130745739.png" alt="image-20240907130745739"></p><p><img src="../image/study_img/image-20240907131037286.png" alt="image-20240907131037286"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1、拉取镜像   Git-ce 是社区版，gitlab-ee是企业版，收费的。</span><br><span class="line">[root@docker02 ~]# docker pull gitlab/gitlab-ce:latest</span><br><span class="line"></span><br><span class="line">2、运行镜像</span><br><span class="line">docker run \</span><br><span class="line">--hostname 10.0.0.102 \</span><br><span class="line">--<span class="built_in">env</span> GITLAB_OMNIBUS_CONFIG=<span class="string">&quot;external_url &#x27;http://10.0.0.102&#x27;&quot;</span> \</span><br><span class="line">-p 443:443 -p 80:80 -p 2222:22 \</span><br><span class="line">--name gitlab \</span><br><span class="line">--restart always \</span><br><span class="line">-v /data/gitlab/config:/etc/gitlab \</span><br><span class="line">-v /data/gitlab/logs:/var/log/gitlab \</span><br><span class="line">-v /data/gitlab/data:/var/opt/gitlab \</span><br><span class="line">-d gitlab/gitlab-ce</span><br><span class="line"></span><br><span class="line">-p 2222:22  宿主机的22端口被占用了，所有使用宿主机的2222端口</span><br><span class="line">--detach=-d</span><br><span class="line"></span><br><span class="line">3、运行之后，执行</span><br><span class="line">[root@docker02 ~]# docker ps</span><br><span class="line">可能一开始看不到运行结果，因为镜像比较大，运行起来比较慢，后面还要做优化，先进入容器里面，查看启动状态</span><br><span class="line">[root@docker02 ~]# docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line">root@10:/# gitlab-ctl status</span><br><span class="line">run: alertmanager: (pid 1281) 314s; run: <span class="built_in">log</span>: (pid 1008) 429s</span><br><span class="line">run: gitaly: (pid 1231) 318s; run: <span class="built_in">log</span>: (pid 559) 642s</span><br><span class="line">run: gitlab-exporter: (pid 1219) 319s; run: <span class="built_in">log</span>: (pid 939) 448s</span><br><span class="line">run: gitlab-kas: (pid 751) 626s; run: <span class="built_in">log</span>: (pid 768) 623s</span><br><span class="line">run: gitlab-workhorse: (pid 1155) 321s; run: <span class="built_in">log</span>: (pid 885) 461s</span><br><span class="line">run: logrotate: (pid 502) 655s; run: <span class="built_in">log</span>: (pid 514) 653s</span><br><span class="line">run: nginx: (pid 1169) 320s; run: <span class="built_in">log</span>: (pid 917) 455s</span><br><span class="line">run: postgres-exporter: (pid 1289) 314s; run: <span class="built_in">log</span>: (pid 1032) 420s</span><br><span class="line">run: postgresql: (pid 583) 632s; run: <span class="built_in">log</span>: (pid 594) 631s</span><br><span class="line">run: prometheus: (pid 1238) 318s; run: <span class="built_in">log</span>: (pid 984) 437s</span><br><span class="line">run: puma: (pid 835) 474s; run: <span class="built_in">log</span>: (pid 842) 473s</span><br><span class="line">run: redis: (pid 519) 649s; run: <span class="built_in">log</span>: (pid 532) 647s</span><br><span class="line">run: redis-exporter: (pid 1221) 319s; run: <span class="built_in">log</span>: (pid 968) 441s</span><br><span class="line">run: sidekiq: (pid 852) 468s; run: <span class="built_in">log</span>: (pid 860) 467s</span><br><span class="line">run: sshd: (pid 37) 676s; run: <span class="built_in">log</span>: (pid 36) 676s</span><br><span class="line"></span><br><span class="line">4、看到nginx服务起来了，就可以访问网页</span><br><span class="line">10.0.0.102</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240907152247060.png" alt="image-20240907152247060"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">登录的用户名是root</span><br><span class="line"></span><br><span class="line">5、查看gitlab的初始密码</span><br><span class="line">[root@docker02 ~]# docker <span class="built_in">exec</span> -it gitlab grep <span class="string">&#x27;Password:&#x27;</span> /etc/gitlab/initial_root_password</span><br><span class="line">Password: dUs0tOCn+nDOkWoShlwCvYYWlnIZUwaiBujL9BkO2TU=</span><br></pre></td></tr></table></figure><p>6、创建一个项目</p><p><img src="../image/study_img/image-20240907153032437.png" alt="image-20240907153032437"></p><p><img src="../image/study_img/image-20240907153123588.png" alt="image-20240907153123588"></p><p><img src="../image/study_img/image-20240907155134996.png" alt="image-20240907155134996"></p><p>7、拉取代码：目前项目创建完成后，使用其他机器拉取代码，无法拉取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、拉取代码的机器需要安装git</span><br><span class="line">[root@docker01 ~]# yum -y install git</span><br><span class="line"></span><br><span class="line">2、生成密钥对，配置到gitlab仓库</span><br><span class="line">[root@docker01 ~]# ssh-keygen</span><br><span class="line">[root@docker01 ~]# <span class="built_in">cat</span> ~/.ssh/id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDQrHuOoZahkYpkUthbzbVLMH3ijST4TSPGuKWm77QBIredxGGKpoq2TN71pysOPUiGUKpBQnttyfo5AOealp0knNFuxqiShcRa8IlJQMX6mJfVFrY6jI5g/AnDvIayurVVBsf6T7h6sQNV8Pj4bzGpO8PXi8Z8GGslZ2LbmqA+LsfLLX/KR3BJce4JC/0PsK4DqAVO/WVYd7H0qeSUK5arrnpt7ncYVx02k63KI47Tb4W+nyqhlChwxD55V3ArzbvVpQy3BnRoOQQ5cr7le6HP+kl27jHTxCNJ7bf5uU1O4Polc3ODBkq2gZC9JaN6O8RuyB2UeCe5odVYOmxb5IKJ root@docker01</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240907154118623.png" alt="image-20240907154118623"></p><p><img src="../image/study_img/image-20240907154153334.png" alt="image-20240907154153334"></p><p><img src="../image/study_img/image-20240907154228630.png" alt="image-20240907154228630"></p><p>修改为中文字体，再刷新</p><p><img src="../image/study_img/image-20240907154846257.png" alt="image-20240907154846257"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1、使用这个命令拉取代码时，还需要输入密码，所以配置的ssh密钥对到gitlab时是不太行的</span><br><span class="line">[root@docker01 ~]# git <span class="built_in">clone</span> git@10.0.0.102:root/web.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#gitlab使用非22端口拉代码</span><br><span class="line">[root@docker01 ~]# git <span class="built_in">clone</span> ssh://git@10.0.0.102:2222/root/web.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、由于每次拉取代码都要输入协议和端口，效率不高，可以修改配置文件设置自动出现协议和端口，直接复制</span><br><span class="line"><span class="comment">#修改配置文件和做gitlab的优化</span></span><br><span class="line">由于配置文件已经映射出来了，直接修改</span><br><span class="line">[root@docker02 ~]# vim /data/gitlab/config/gitlab.rb</span><br><span class="line"><span class="comment">#32行：url的配置</span></span><br><span class="line">external_url <span class="string">&#x27;http://10.0.0.102&#x27;</span>  </span><br><span class="line"><span class="comment"># 698行：端口的配置</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = 2222 </span><br><span class="line"><span class="comment">###优化内容  把这几行加入配置文件</span></span><br><span class="line"><span class="comment">#告警关闭</span></span><br><span class="line">alertmanager[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br><span class="line"><span class="comment">#关闭前端的node功能</span></span><br><span class="line">node_exporter[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br><span class="line"><span class="comment">#关闭redis功能</span></span><br><span class="line">redis_exporter[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br><span class="line"><span class="comment">#关闭postgre功能</span></span><br><span class="line">postgres_exporter[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、重新加载gitlab配置文件，需要等待3分钟左右</span><br><span class="line">[root@docker02 ~]# docker <span class="built_in">exec</span> -it gitlab gitlab-ctl reconfigure</span><br><span class="line">reconfigure相当于nginx的reload，还是可以正常访问网页的</span><br><span class="line"></span><br><span class="line">5、再次访问网页，刷新页面，可以看到提供的地址是直接可以使用的地址</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240907162925699.png" alt="image-20240907162925699"></p><h3 id="2、容器化jenkins"><strong>2、容器化jenkins</strong></h3><p>访问官网，找到启动容器的命令：<a href="https://www.jenkins.io/">https://www.jenkins.io/</a></p><p><img src="../image/study_img/image-20240907163455778.png" alt="image-20240907163455778"></p><p><img src="../image/study_img/image-20240907163613722.png" alt="image-20240907163613722"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--name jenkins-docker \</span><br><span class="line">--<span class="built_in">rm</span> \</span><br><span class="line">--detach \</span><br><span class="line">--privileged \</span><br><span class="line">--network jenkins \    <span class="comment">#网络没有配置，需要删除</span></span><br><span class="line">--network-alias docker \ <span class="comment">#网络没有配置，需要删除</span></span><br><span class="line">--<span class="built_in">env</span> DOCKER_TLS_CERTDIR=/certs \  <span class="comment">#没有证书，需要删除</span></span><br><span class="line">--volume jenkins-docker-certs:/certs/client \ <span class="comment">#没有证书，需要删除</span></span><br><span class="line">--volume jenkins-data:/var/jenkins_home \  <span class="comment">#映射的jenkins目录</span></span><br><span class="line">--publish 2376:2376 \</span><br><span class="line">docker:dind \</span><br><span class="line">--storage-driver overlay2</span><br></pre></td></tr></table></figure><p>到docker官网，找到jenkins镜像  <a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p><img src="../image/study_img/image-20240907164947184.png" alt="image-20240907164947184"></p><p><img src="../image/study_img/image-20240907165448303.png" alt="image-20240907165448303"></p><p><img src="../image/study_img/image-20240907165642490.png" alt="image-20240907165642490"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">1、拉取2.422版本的镜像</span><br><span class="line">[root@docker02 ~]# docker pull jenkins/jenkins:2.422</span><br><span class="line"></span><br><span class="line">2、运行jenkins容器</span><br><span class="line">docker run \</span><br><span class="line">--name jenkins \</span><br><span class="line">--privileged \</span><br><span class="line">--user=root \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /data/jenkins/:/var/jenkins_home \</span><br><span class="line">-v /usr/bin/docker:/usr/bin/docker \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">-v /root/.ssh/:/root/.ssh/ \</span><br><span class="line">-v /root/.docker/config.json:/root/.docker/config.json \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-p 5000:5000 \</span><br><span class="line">-d jenkins/jenkins:2.422</span><br><span class="line"></span><br><span class="line">--<span class="built_in">rm</span>：只要容器停止就会删掉</span><br><span class="line">--user=root：jenkins需要root用户去启动，不然运行之后docker <span class="built_in">log</span> -f jenkins查看日志都会没有权限</span><br><span class="line">--privileged：相当于zabbix需要监控宿主机，想要有权限就需要这个参数，还可以让容器有权限能使用宿主机上的docker命令</span><br><span class="line">docker容器想要使用宿主机的命令就是docker <span class="keyword">in</span> docker</span><br><span class="line">-v /usr/bin/docker：将宿主机的docker命令映射，容器里面就可以执行docker ps..</span><br><span class="line">-v /var/run/docker.sock：docker的命令通过sockt连接的，需要映射sock文件，由于容器里面没有sock文件，不然执行docker命令会报错</span><br><span class="line"><span class="comment">#解决jenkins生成密钥到gitlab,如果在容器里面生成密钥对，万一jenkins宕机了，在重新生成密钥对，之前放到gitlab里面的密钥对就不能使用了，为了密钥对持久化，需要在宿主机上生成密钥对，映射到容器</span></span><br><span class="line">[root@docker02 ~]# ssh-keygen</span><br><span class="line">-v /root/.ssh：将宿主机的密钥对映射到容器</span><br><span class="line">-v /root/.docker/config.json：将登录harbor的认证信息映射，容器就可以推送镜像到harbor</span><br><span class="line"></span><br><span class="line">3、上传插件</span><br><span class="line"></span><br><span class="line">4、解压插件</span><br><span class="line">[root@docker02 ~]# tar xf jenkins_plugins_2.422.tgz -C /data/jenkins/</span><br><span class="line"></span><br><span class="line">5、再重新启动jenkins</span><br><span class="line">[root@docker02 ~]# docker restart jenkins</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6、浏览器访问网页</span><br><span class="line">10.0.0.102:8080</span><br><span class="line"></span><br><span class="line">7、查看密码</span><br><span class="line">[root@docker02 ~]# docker <span class="built_in">exec</span> -it jenkins <span class="built_in">cat</span> /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line">3766efc193fe418f9256897f39840929</span><br><span class="line"></span><br><span class="line">由于/var/jenkins_home目录已经映射出来在宿主机上已经持久化了，还可以这样查看密码文件</span><br><span class="line">[root@docker02 ~]# <span class="built_in">cat</span> /data/jenkins/secrets/initialAdminPassword </span><br><span class="line">3766efc193fe418f9256897f39840929</span><br><span class="line"></span><br><span class="line">然后出现安装jenkins插件的页面之间，不要安装插件，直接点击右上角的×——&gt;点击开始使用jenkins</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240907175615967.png" alt="image-20240907175615967"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">8、将搭建了jenkins服务器的公钥放到gitlab服务器</span><br><span class="line">[root@docker02 ~]# <span class="built_in">cat</span> .ssh/id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDPOMkDhGerkcJCwv55/6B4vTtzY0gxDKDYibzGUHX18AKgN8eZUBQVyub/mLmhBYlPWBIlb8x1xzNqH6N+kt/aIp03KheYAJBk26Npc8vtVEh009kf9DU3q4QopDrbKOmaF21/0LZ+ZVsAT0AmPKVH8pWodOv9O8aoXoVZe+uxAD+nItopJ6bnDzalKLEeVadtGZqm4k+AZRY2W7bZFUlss6WEKB2DLWfnf4FkIkDBQqLTPOS8ovB4U9gEBqN0vRFGI9qa1dDE4I9bK3ISKWBLR1yzV5wA4ARszXuj4t/nEP71qWfdi3vi9xdYvWStGdWa487nIFgi7s96ix9g8QBD root@docker02</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240907182329531.png" alt="image-20240907182329531"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">9、jenkins机器拉取gitlab里面的代码</span><br><span class="line">进入jenkins容器</span><br><span class="line">[root@docker02 ~]# docker <span class="built_in">exec</span> -it jenkins /bin/bash</span><br><span class="line"></span><br><span class="line">10、拉取代码</span><br><span class="line">root@126b61b9d225:/# git <span class="built_in">clone</span> ssh://git@10.0.0.102:2222/root/web.git</span><br><span class="line">输入<span class="built_in">yes</span>，不需要输入密码，直接免密拉取代码</span><br></pre></td></tr></table></figure><h3 id="3、测试将jenkins里面的镜像推送到Harbor图形化镜像仓库"><strong>3、测试将jenkins里面的镜像推送到Harbor图形化镜像仓库</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1、进入jenkins容器</span><br><span class="line">[root@docker02 ~]# docker <span class="built_in">exec</span> -it jenkins /bin/bash</span><br><span class="line">root@126b61b9d225:/# docker images</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、将镜像改名</span><br><span class="line">root@126b61b9d225:/# docker tag wordpress:v7 172.16.1.76/wordpress/wordpress-jenkins-harbor:v7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、推送镜像   报错，是因为需要登录，但是每次重启都需要登录</span><br><span class="line">root@126b61b9d225:/# docker push 172.16.1.76/wordpress/wordpress-jenkins-harbor:v7</span><br><span class="line">unauthorized: unauthorized to access repository: wordpress/wordpress-jenkins-harbor, action: push: unauthorized to access repository: wordpress/wordpress-jenkins-harbor, action: push</span><br><span class="line"></span><br><span class="line">4、检查宿主机是否能够推送</span><br><span class="line">[root@docker02 ~]# docker push 172.16.1.76/wordpress/wordpress-jenkins-harbor:v7</span><br><span class="line">unauthorized: unauthorized to access repository: wordpress/wordpress-jenkins-harbor, action: push: unauthorized to access repository: wordpress/wordpress-jenkins-harbor, action: push</span><br><span class="line"></span><br><span class="line">5、宿主机不能推送，需要登录harbor</span><br><span class="line">[root@docker01 ~]# docker login 172.16.1.76</span><br><span class="line">Username: admin</span><br><span class="line">Password:  <span class="comment">#密码：Harbor12345</span></span><br><span class="line">......</span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line">6、宿主机正常推送  推送成功</span><br><span class="line">[root@docker02 ~]# docker push 172.16.1.76/wordpress/wordpress-jenkins-harbor:v7</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240907210452739.png" alt="image-20240907210452739"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">7、宿主机能够推送镜像，但是容器不一定能推，因为容器也是需要login登录的，但是这里不需要容器登录</span><br><span class="line">宿主机登录了之后，会有一个认证信息做出一个文件保存到~/.docker/config.json</span><br><span class="line">[root@docker02 ~]# ll -a ~/.docker/config.json </span><br><span class="line">-rw------- 1 root root 139 Sep  7 21:02 /root/.docker/config.json</span><br><span class="line">[root@docker02 ~]# <span class="built_in">cat</span> ~/.docker/config.json</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;auths&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;10.0.0.76&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;auth&quot;</span>: <span class="string">&quot;YWRtaW46SGFyYm9yMTIzNDU=&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;172.16.1.76&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;auth&quot;</span>: <span class="string">&quot;YWRtaW46SGFyYm9yMTIzNDU=&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">#所以，是需要在启动jenkins的时候，将认证信息的文件映射，这样jenkins容器就可以推送镜像到Harbor从库，在运行的时候我已经加上这个文件映射了的，只要我的宿主机登录过，我的jenkins容器可以推送</span></span><br></pre></td></tr></table></figure><h3 id="4、jenkins容器构建代码上线——自由风格"><strong>4、jenkins容器构建代码上线——自由风格</strong></h3><p>1、测试构建</p><p><img src="../image/study_img/image-20240907230455222.png" alt="image-20240907230455222"></p><p><img src="../image/study_img/image-20240907234349843.png" alt="image-20240907234349843"></p><p>复制代码地址</p><p><img src="../image/study_img/image-20240907234446792.png" alt="image-20240907234446792"></p><p><img src="../image/study_img/image-20240907234558247.png" alt="image-20240907234558247"></p><p><img src="../image/study_img/image-20240908000318150.png" alt="image-20240908000318150"></p><p>执行构建，构建成功</p><p><img src="../image/study_img/image-20240908000821406.png" alt="image-20240908000821406"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、#拉取后代码存放的目录</span><br><span class="line">[root@docker02 ~]# ll /data/jenkins/workspace/web-frestlye/</span><br><span class="line">-rw-r--r-- 1 root root    7 Sep  8 00:06 index.html</span><br><span class="line">-rw-r--r-- 1 root root 6141 Sep  8 00:06 README.md</span><br><span class="line"></span><br><span class="line">2、#免密web服务器</span><br><span class="line">[root@docker02 ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.1.101</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;WORKSPACE&#125;</span></span><br><span class="line">/var/jenkins_home/workspace/web-frestlye</span><br></pre></td></tr></table></figure><p>2、写脚本构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">harbor_ip=172.16.1.76</span><br><span class="line">web_ip=172.16.1.101</span><br><span class="line"><span class="built_in">cat</span> &gt; <span class="variable">$&#123;WORKSPACE&#125;</span>/Dockerfile &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">FROM nginx:alpine</span></span><br><span class="line"><span class="string">#将网页代码复制到nginx的站点目录下</span></span><br><span class="line"><span class="string">COPY index.html /usr/share/nginx/html/</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment">#进入工作目录构建镜像</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;WORKSPACE&#125;</span> &amp;&amp; \</span><br><span class="line">docker build -t <span class="variable">$&#123;harbor_ip&#125;</span>/wordpress/web-frestlye:v1 .</span><br><span class="line"><span class="comment">#打完镜像后推送到Harbor仓库</span></span><br><span class="line">docker push <span class="variable">$&#123;harbor_ip&#125;</span>/wordpress/web-frestlye:v1</span><br><span class="line"><span class="comment">#连接到web服务器把镜像从harbor拉下来,注意jenkins机器要和web免密</span></span><br><span class="line">ssh root@<span class="variable">$&#123;web_ip&#125;</span> <span class="string">&quot;docker pull <span class="variable">$&#123;harbor_ip&#125;</span>/wordpress/web-frestlye:v1&quot;</span></span><br><span class="line"><span class="comment">#删除之前旧的web镜像</span></span><br><span class="line">ssh root@<span class="variable">$&#123;web_ip&#125;</span> <span class="string">&quot;docker rm -f web&quot;</span></span><br><span class="line"><span class="comment">#在web服务器部署nginx网页代码</span></span><br><span class="line">ssh root@<span class="variable">$&#123;web_ip&#125;</span> <span class="string">&quot;docker run --name web -p 80:80 -d <span class="variable">$&#123;harbor_ip&#125;</span>/wordpress/web-frestlye:v1&quot;</span></span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240908230050715.png" alt="image-20240908230050715"></p><p><img src="../image/study_img/image-20240908230246558.png" alt="image-20240908230246558"></p><h3 id="5、jenkins容器构建代码上线——参数化构建"><strong>5、jenkins容器构建代码上线——参数化构建</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1、第一版</span><br><span class="line">[root@docker02 ~]# <span class="built_in">mkdir</span> /web</span><br><span class="line">[root@docker02 ~]# <span class="built_in">cd</span> /web</span><br><span class="line">[root@docker02 web]# git init /web</span><br><span class="line">[root@docker02 web]# vim index.html</span><br><span class="line">[root@docker02 web]# vim src.js</span><br><span class="line">[root@docker02 web]# git add .</span><br><span class="line">[root@docker02 web]#  git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">[root@docker02 web]# git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">[root@docker02 web]# git commit -m <span class="string">&#x27;官网v1.0&#x27;</span></span><br><span class="line">[root@docker02 web]#  git tag -a <span class="string">&#x27;v1&#x27;</span>  -m <span class="string">&quot;官网v1.0&quot;</span></span><br><span class="line">[root@docker02 web]# git remote add origin ssh://git@10.0.0.102:2222/root/web-website.git</span><br><span class="line">[root@docker02 web]# git push --all</span><br><span class="line">[root@docker02 web]# git push --tag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、第二版</span><br><span class="line">[root@docker02 web]# vim src.js</span><br><span class="line">[root@docker02 web]# git add .</span><br><span class="line">[root@docker02 web]# git commit -m <span class="string">&#x27;官网v2.0&#x27;</span></span><br><span class="line">[root@docker02 web]# git tag -a <span class="string">&#x27;v2&#x27;</span>  -m <span class="string">&quot;官网v2.0&quot;</span></span><br><span class="line">[root@docker02 web]# git push --all</span><br><span class="line">[root@docker02 web]# git push --tag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">代码不需要软连接了。已经容器部署了，代码可以随便删除</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240909172701792.png" alt="image-20240909172701792"></p><p><img src="../image/study_img/image-20240909224852871.png" alt="image-20240909224852871"></p><p><img src="../image/study_img/image-20240909224914742.png" alt="image-20240909224914742"></p><p><img src="../image/study_img/image-20240909224936189.png" alt="image-20240909224936189"></p><p><img src="../image/study_img/image-20240909225006620.png" alt="image-20240909225006620"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">harbor_ip=172.16.1.76</span><br><span class="line">project_name=<span class="string">&#x27;wordpress&#x27;</span></span><br><span class="line">pkg_name=<span class="string">&#x27;$&#123;harbor_ip&#125;/$&#123;project_name&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; <span class="variable">$&#123;WORKSPACE&#125;</span>/Dockerfile &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">FROM nginx:alpine</span></span><br><span class="line"><span class="string">#将网页代码复制到nginx的站点目录下</span></span><br><span class="line"><span class="string">COPY ./* /usr/share/nginx/html/</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进入工作目录构建镜像</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;WORKSPACE&#125;</span> &amp;&amp; \</span><br><span class="line">docker build -t <span class="variable">$&#123;pkg_name&#125;</span>/web-frestlye:<span class="variable">$&#123;git_tag&#125;</span> .</span><br><span class="line"><span class="comment">#打完镜像后推送到Harbor仓库</span></span><br><span class="line">docker push <span class="variable">$pkg_name</span>&#125;/web-frestlye:<span class="variable">$&#123;git_tag&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">deploy</span></span> () &#123;</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="variable">$@</span> ;<span class="keyword">do</span></span><br><span class="line"><span class="comment">#连接到web服务器把镜像从harbor拉下来,注意jenkins机器要和web免密</span></span><br><span class="line">ssh root@172.16.1.<span class="variable">$&#123;n&#125;</span> <span class="string">&quot;docker pull <span class="variable">$&#123;harbor_ip&#125;</span>/wordpress/web-frestlye:<span class="variable">$&#123;git_tag&#125;</span>&quot;</span></span><br><span class="line"><span class="comment">#删除之前旧的web镜像</span></span><br><span class="line">ssh root@172.16.1.<span class="variable">$&#123;n&#125;</span> <span class="string">&quot;docker rm -f web&quot;</span></span><br><span class="line"><span class="comment">#在web服务器部署nginx网页代码</span></span><br><span class="line">ssh root@172.16.1.<span class="variable">$&#123;n&#125;</span> <span class="string">&quot;docker run --name web -p 80:80 -d <span class="variable">$&#123;harbor_ip&#125;</span>/wordpress/web-frestlye:<span class="variable">$&#123;git_tag&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$env</span> <span class="keyword">in</span></span><br><span class="line">dev)</span><br><span class="line"><span class="comment">#给函数传参数 传递机器的ip</span></span><br><span class="line">   deploy 101</span><br><span class="line">   ;;</span><br><span class="line">prod)</span><br><span class="line">   deploy 103</span><br><span class="line">   ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240909225041225.png" alt="image-20240909225041225"></p><h3 id="6、jenkins容器构建代码上线——MAVEN项目构建"><strong>6、jenkins容器构建代码上线——MAVEN项目构建</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1、哪台机器需要部署java代码，到docker官网拉取tomcat</span><br><span class="line">docker pull tomcat:alpine </span><br><span class="line">需要先手动编译代码，下载maven</span><br><span class="line">yum -y install maven</span><br><span class="line"></span><br><span class="line">2、下载java代码helloword</span><br><span class="line"></span><br><span class="line">3、运行tmocat</span><br><span class="line">docker run -p 8080:8080 -d tomcat:alpine </span><br><span class="line"></span><br><span class="line">改Maven源。换成阿里云的源</span><br><span class="line">vim</span><br><span class="line"></span><br><span class="line">构建  构建完成之后会生成一个target目录</span><br><span class="line">maven pakage</span><br><span class="line"><span class="built_in">cd</span> target/hellowrd</span><br><span class="line">tar zcf hello-1.0.0.tgz</span><br><span class="line"></span><br><span class="line">vim Dockerfile</span><br><span class="line">FROM tomcat:alpine </span><br><span class="line">RUN <span class="built_in">rm</span> -rf /usr/local/tomcat/webapps/ROOT/*</span><br><span class="line">ADD hello-1.0.0.tgz /usr/local/tomcat/webapps/ROOT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker build -t 172.16.1.76/wordpress/hello:v1 .</span><br><span class="line">docker run -p 8080:8080 -d 172.16.1.76/wordpress/hello:v1</span><br><span class="line"></span><br><span class="line">目前访问的时候要加上目录，tomcat前面会加上nginx做代理，代理这个目录</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240909092954321.png" alt="image-20240909092954321"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#jenkins机器</span></span><br><span class="line">起宿主机把maven映射进去  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Jenkins时区不对，差8个小时，解决方案</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it -u root jenkins bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改容器时区</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&#x27;Asia/Shanghai&#x27;</span> &gt; /etc/timezone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看修改后的容器时区</span></span><br><span class="line"><span class="built_in">cat</span> /etc/timezone</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启jenkins容器</span></span><br><span class="line">docker restart jenkins</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果觉得Jenkins占用内存过大,我们可以采用下面的方式限制ienkins占用内存大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker限制内存大小</span></span><br><span class="line">docker update jenkins -m 3g --memory-swap -1</span><br><span class="line"></span><br><span class="line">--memory 或-m 限制容器的内存使用量</span><br><span class="line">--memory-swap 限制内存和swap的总和，不设置的话默认为--memory的两倍</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用容器化的jenkins部署代码，多种方法代码上线</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>五、🍡Docker的图形化Portainer</title>
    <link href="https://www.fomal.cc/posts/812941c2.html"/>
    <id>https://www.fomal.cc/posts/812941c2.html</id>
    <published>2024-09-22T05:20:28.000Z</published>
    <updated>2024-09-22T07:53:34.212Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker的图形化Portainer">Docker的图形化Portainer</h3><p>启动Portainer     坡泰了</p><p>环境准备</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th></tr></thead><tbody><tr><td>elk1</td><td>10.0.0.76  /  172.16.1.76</td><td>图形化portainer</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@elk1 harbor]# docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock --restart=always --name portainer portainer/portainer</span><br><span class="line"></span><br><span class="line">2、浏览器访问</span><br><span class="line">http://10.0.0.76:9000/</span><br><span class="line"></span><br><span class="line">3、登录进去可能回提示portainer超时，需要重启</span><br><span class="line">[root@elk1 harbor]# docker restart  portainer</span><br><span class="line">portainer</span><br><span class="line"></span><br><span class="line">4、重启之后再访问页面，进去刷新，设置初始密码 12位的</span><br><span class="line">aaaaaa111111</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240906175708573.png" alt="image-20240906175708573"></p><p>5、查看本地的docker</p><p><img src="../image/study_img/image-20240906175929805.png" alt="image-20240906175929805"></p><p><img src="../image/study_img/image-20240906180028688.png" alt="image-20240906180028688"></p><p>此处可以启动容器</p><p><img src="../image/study_img/image-20240906180212414.png" alt="image-20240906180212414"></p><p>6、测试拉取一个镜像并启动</p><p><img src="../image/study_img/image-20240906180900453.png" alt="image-20240906180900453"></p><p><img src="../image/study_img/image-20240906180924462.png" alt="image-20240906180924462"></p><p>等待一会，显示拉取镜像并启动成功，跳转到容器启动的页面，并且在命令行主可以查看到已拉取成功，启动成功</p><p><img src="../image/study_img/image-20240906181242551.png" alt="image-20240906181242551"></p><p><img src="../image/study_img/image-20240906181309969.png" alt="image-20240906181309969"></p><p>7、查看所有镜像</p><p><img src="../image/study_img/image-20240906181607353.png" alt="image-20240906181607353"></p><p>8、测试拉取镜像</p><p><img src="../image/study_img/image-20240906181951743.png" alt="image-20240906181951743"></p><p>9、挂载目录的页面</p><p><img src="../image/study_img/image-20240906182154901.png" alt="image-20240906182154901"></p><p>10、事件的查看，哪个容器退出了，查看日志</p><p><img src="../image/study_img/image-20240906182246878.png" alt="image-20240906182246878"></p><p>12、查看物理机的信息</p><p><img src="../image/study_img/image-20240906182322538.png" alt="image-20240906182322538"></p><p>13、添加自己的镜像仓库。拉取容器的时候就去自己创建的仓库里面拉取</p><p><img src="../image/study_img/image-20240906182455490.png" alt="image-20240906182455490"></p><p><img src="../image/study_img/image-20240906182652673.png" alt="image-20240906182652673"></p><p>添加之后，如果想拉取自己仓库里面的容器，就这样选择</p><p><img src="../image/study_img/image-20240906182823018.png" alt="image-20240906182823018"></p><p>拉取harbor里面的容器</p><p><img src="../image/study_img/image-20240906182929405.png" alt="image-20240906182929405"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#portainer需要信任harbor的地址</span></span><br><span class="line">[root@elk1 harbor]# vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.1panel.live&quot;</span>, <span class="string">&quot;https://hub.rat.dev/&quot;</span>, <span class="string">&quot;https://docker.chenby.cn&quot;</span>, <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>],</span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://10.0.0.76&quot;</span>,<span class="string">&quot;http://172.16.1.101:5000&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@elk1 harbor]# systemctl restart docker</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240906183541971.png" alt="image-20240906183541971"></p><p>14、管理docker01 ~ 03机器的镜像</p><p><img src="../image/study_img/image-20240906183926754.png" alt="image-20240906183926754"></p><p><img src="../image/study_img/image-20240906184008628.png" alt="image-20240906184008628"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在想要管理的docker机器执行这个命令</span></span><br><span class="line">docker run -d \</span><br><span class="line">  -p 9001:9001 \</span><br><span class="line">  --name portainer_agent \</span><br><span class="line">  --restart=always \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -v /var/lib/docker/volumes:/var/lib/docker/volumes \</span><br><span class="line">  portainer/agent:2.16.2</span><br><span class="line">  </span><br><span class="line"><span class="comment">#重启docker</span></span><br><span class="line">  systemctl restart docker</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240906185043251.png" alt="image-20240906185043251"></p><p><img src="../image/study_img/image-20240906185302712.png" alt="image-20240906185302712"></p>]]></content>
    
    
    <summary type="html">部署Docker的图形化Portainer</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>四、🍡docker的网络与Harbor镜像仓库</title>
    <link href="https://www.fomal.cc/posts/5c6d7d69.html"/>
    <id>https://www.fomal.cc/posts/5c6d7d69.html</id>
    <published>2024-09-22T05:07:23.000Z</published>
    <updated>2024-09-22T07:53:34.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker的网络与Harbor镜像仓库">docker的网络与Harbor镜像仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">101上起的容器和103上起的容器不能通信</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器的ip</span></span><br><span class="line"><span class="comment">#101起centos</span></span><br><span class="line">[root@docker01 ~]# docker run --<span class="built_in">link</span> mysql80 -it centos:7 /bin/bash</span><br><span class="line">[root@56db98b318bb /]# ping mysql80</span><br><span class="line">PING mysql80 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mysql80 (172.17.0.2): icmp_seq=1 ttl=64 time=0.271 ms</span><br><span class="line"></span><br><span class="line">mysql80容器的ip是：172.17.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment">#102起centos</span></span><br><span class="line">[root@bdc4ac174cb6 /]# ping 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line"></span><br><span class="line">可以发现是ping不通的，如果开启内核转，就可以通信，A虚拟机里面起的容器就与B虚拟机可以通信</span><br></pre></td></tr></table></figure><h3 id="1、Bridge桥接模式-docker-默认的网络模式"><strong>1、Bridge桥接模式  (docker 默认的网络模式)</strong></h3><p>Bridge：Docker设计的NAT网络模型 默认类型，类似于虚拟机里面的NAT模式</p><p><img src="../image/study_img/image-20240905150011381.png" alt="image-20240905150011381"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">你的容器桥接到docker0那个网卡，容器的网卡和docker0那个网卡在同一网段</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前虚拟机的网络类型</span></span><br><span class="line">[root@docker02 ~]# docker network <span class="built_in">ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">870935df49b1   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">a7fce1fe694d   host      host      <span class="built_in">local</span></span><br><span class="line">d7fe2c2b78e7   none      null      <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看桥接模式的详细信息</span></span><br><span class="line">[root@docker01 ~]# docker network inspect bridge</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装bridge-utils 查看</span></span><br><span class="line">[root@docker01 ~]# brctl show</span><br><span class="line">bridge name bridge <span class="built_in">id</span> STP enabled interfaces</span><br><span class="line">docker0 8000.0242eca7bc4c no</span><br><span class="line"></span><br><span class="line"><span class="comment">#调试网络专用镜像</span></span><br><span class="line">[root@docker01 ~]# docker run -it -d  busybox  /bin/sh</span><br><span class="line"></span><br><span class="line">公司有规定 内网的ip规定192或者168的网段</span><br><span class="line"><span class="comment">#修改桥接模式的网段</span></span><br><span class="line">方法1：修改docker的启动脚本</span><br><span class="line">[root@docker01 ~]# vim /lib/systemd/system/docker.service</span><br><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line">--bip=192.168.10.1/24</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# systemctl daemon-reload</span><br><span class="line">[root@docker01 ~]# systemctl restart docker</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# docker run -it busybox /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0 Link encap:Ethernet HWaddr 02:42:C0:A8:0A:03</span><br><span class="line">     inet addr:192.168.10.3 Bcast:192.168.10.255 Mask:255.255.255.0</span><br><span class="line">     UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1</span><br><span class="line">     RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">     collisions:0 txqueuelen:0</span><br><span class="line">     RX bytes:656 (656.0 B) TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">[root@docker02 ~]# docker run -it busybox /bin/sh</span><br><span class="line"><span class="comment">#这个是专门的网络工具，网络相关的命令都支持</span></span><br><span class="line"></span><br><span class="line">方法2：修改docker的配置文件</span><br><span class="line">[root@docker01 ~]# vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;bip&quot;</span>: <span class="string">&quot;192.168.30.1/24&quot;</span>,</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.1panel.live&quot;</span>,<span class="string">&quot;https://hub.rat.dev/&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://docker.chenby.cn&quot;</span>, <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">## 或者</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.1panel.live&quot;</span>,<span class="string">&quot;https://hub.rat.dev/&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://docker.chenby.cn&quot;</span>, <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>],</span><br><span class="line"><span class="string">&quot;bip&quot;</span>: <span class="string">&quot;192.168.30.1/24&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# systemctl daemon-reload</span><br><span class="line">[root@docker01 ~]# systemctl restart docker</span><br><span class="line">[root@docker01 ~]# docker run -it busybox /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0 Link encap:Ethernet HWaddr 02:42:C0:A8:14:03</span><br><span class="line">     inet addr:192.168.20.3 Bcast:192.168.20.255 Mask:255.255.255.0</span><br><span class="line">     UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1</span><br><span class="line">     RX packets:6 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">     collisions:0 txqueuelen:0</span><br><span class="line">     RX bytes:516 (516.0 B) TX bytes:0 (0.0 B)</span><br><span class="line">     </span><br><span class="line">这样子就可以定义容器的网段了</span><br></pre></td></tr></table></figure><h3 id="2、Host模式">**2、Host模式   **</h3><p>host：与宿主机共享Network Namespace，–network=host 性能最高</p><p><img src="../image/study_img/image-20240905151204236.png" alt="image-20240905151204236"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]# docker run --network=host -d nginx:alpine</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# docker run -it --network=host nginx:alpine /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">docker0 Link encap:Ethernet HWaddr 02:42:77:C6:BE:B9</span><br><span class="line">        inet addr:192.168.20.1 Bcast:192.168.20.255 Mask:255.255.255.0</span><br><span class="line">        inet6 addr: fe80::42:77ff:fec6:beb9/64 Scope:Link</span><br><span class="line">        UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1</span><br><span class="line">        RX packets:3150 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">        TX packets:2794 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">        collisions:0 txqueuelen:0</span><br><span class="line">        RX bytes:7792958 (7.4 MiB) TX bytes:1119887 (1.0 MiB)</span><br><span class="line"></span><br><span class="line">eth0    Link encap:Ethernet HWaddr 00:0C:29:1A:2F:80</span><br><span class="line">        inet addr:10.0.0.101 Bcast:10.0.0.255 Mask:255.255.255.0</span><br><span class="line">        inet6 addr: fe80::20c:29ff:fe1a:2f80/64 Scope:Link</span><br><span class="line"></span><br><span class="line">和主机共享网卡的模式，一般起容器不会用到这个模式</span><br></pre></td></tr></table></figure><h3 id="3、container模式"><strong>3、container模式</strong></h3><p>Container：与另一个运行中的容器共享Network Namespace，–net=container:containerID（K8S）</p><p><img src="../image/study_img/image-20240905114345031.png" alt="image-20240905114345031"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]# docker run -it busybox /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0 Link encap:Ethernet HWaddr 02:42:C0:A8:14:03</span><br><span class="line">     inet addr:192.168.20.3 Bcast:192.168.20.255 Mask:255.255.255.0</span><br><span class="line">     UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1</span><br><span class="line">     RX packets:6 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">     collisions:0 txqueuelen:0</span><br><span class="line">     RX bytes:516 (516.0 B) TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# docker run -it --network=container:763cd9e2da94 centos:7 /bin/bash</span><br><span class="line">[root@docker01 ~]# docker run -it --network=container:763cd9e2da94 nginx:alpine /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0 Link encap:Ethernet HWaddr 02:42:C0:A8:14:03</span><br><span class="line">     inet addr:192.168.20.3 Bcast:192.168.20.255 Mask:255.255.255.0</span><br><span class="line">     UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1</span><br><span class="line">     RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">     collisions:0 txqueuelen:0</span><br><span class="line">     RX bytes:656 (656.0 B) TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure><h3 id="4、None模式"><strong>4、None模式</strong></h3><p>None:不为客器配置任何网络功能，–net=none   没有网络的模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">启动的时候指定  </span><br><span class="line">[root@docker01 ~]# docker run -it --network=none busybox /bin/sh</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">lo   Link encap:Local Loopback</span><br><span class="line">     inet addr:127.0.0.1 Mask:255.0.0.0</span><br><span class="line">     inet6 addr: ::1/128 Scope:Host</span><br><span class="line">     UP LOOPBACK RUNNING MTU:65536 Metric:1</span><br><span class="line">     RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">     collisions:0 txqueuelen:1000</span><br><span class="line">     RX bytes:0 (0.0 B) TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240905113318250.png" alt="image-20240905113318250"></p><h3 id="5、Docker自定义网络模式"><strong>5、Docker自定义网络模式</strong></h3><p>基于以上4种模式创建网络</p><p><img src="../image/study_img/image-20240905113509543.png" alt="image-20240905113509543"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自定义网络</span></span><br><span class="line">docker network create -d &lt;mode&gt; --subnet &lt;CIDR&gt; --gateway &lt;网关&gt; &lt;自定义网路名称&gt;</span><br><span class="line">创建</span><br><span class="line">docker network create -d bridge --subnet 192.168.100.0/24 --gateway 192.168.100.1 abc-net</span><br><span class="line"></span><br><span class="line"><span class="comment">## 引用自定义网络</span></span><br><span class="line">[root@docker01 ~]# docker run -it --network=abc-net busybox /bin/sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">就相当于创建了一个交换机</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除自定义网络</span></span><br><span class="line">[root@docker01 ~]# docker network <span class="built_in">ls</span></span><br><span class="line">NETWORK ID NAME DRIVER SCOPE</span><br><span class="line">2b0a232f6643 bridge bridge <span class="built_in">local</span></span><br><span class="line">168f91213e19 host host <span class="built_in">local</span></span><br><span class="line">4de4c2edcb74 none null <span class="built_in">local</span></span><br><span class="line">7a7b8742e475 abc-net bridge <span class="built_in">local</span></span><br><span class="line">[root@docker01 ~]# docker network <span class="built_in">rm</span> abc-net</span><br><span class="line">abc-net</span><br><span class="line">[root@docker01 ~]# docker network <span class="built_in">ls</span></span><br><span class="line">NETWORK ID NAME DRIVER SCOPE</span><br><span class="line">2b0a232f6643 bridge bridge <span class="built_in">local</span></span><br><span class="line">168f91213e19 host host <span class="built_in">local</span></span><br><span class="line">4de4c2edcb74 none null <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">创建了网络就创建了一个桥接的网卡，相当于一个网卡就是一个交换机</span><br><span class="line">docker默认就是bridge模式，当有不同的·项目就要自己创建一个网络，把不同项目的主机放到这个模式里面</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240905113639559.png" alt="image-20240905113639559"></p><h3 id="6、Docker私有创建Harbor">6、<strong>Docker私有创建Harbor</strong></h3><p>Harbor 是为企业用户设计的容器镜像仓库开源项目，包括了权限管理(RBAC)、+DAP、审计、安全漏洞扫描、镜像验真、管理界面、自我注册、HA 等企业必需的功能，同时针对中国用户的特点，设计镜像复制和中文支持等功舱   <a href="https://goharbor.io/">https://goharbor.io/</a></p><p>环境准备</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th></tr></thead><tbody><tr><td>elk1</td><td>10.0.0.76  /  172.16.1.76</td><td>Harbor图形化仓库</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">harbor 图形化界面的  https://goharbor.io/</span><br><span class="line">registry 命令行操作的</span><br><span class="line"></span><br><span class="line">下载harbor带offline标签的，所有的镜像，安装包里面都在一起的所以比较大</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、#安装docker环境</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-7-anon.repo</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">sed -i <span class="string">&quot;s@http://mirrors.aliyun.com@https://mirrors.huaweicloud.com@g&quot;</span> /etc/yum.repos.d/epel.repo</span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/docker-ce.repo &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[docker-ce-stable]</span></span><br><span class="line"><span class="string">name=Docker CE Stable - $basearch</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.huaweicloud.com/docker-ce/linux/centos/7/x86_64/stable</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.huaweicloud.com/docker-ce/linux/centos/gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sed -i <span class="string">&#x27;s+download.docker.com+mirrors.huaweicloud.com/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;：[&quot;https://docker.1panel.live&quot;,&quot;https://hub.rat.dev/&quot;,&quot;https://docker.chenby.cn&quot;, &quot;https://docker.m.daocloud.io&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.下载harbor</span><br><span class="line">[root@harbor ~]# wget https://github.com/goharbor/harbor/releases/download/v2.11.1/harbor-offline-installer-v2.11.1.tgz</span><br><span class="line"></span><br><span class="line"> 3.解压</span><br><span class="line">[root@harbor ~]# tar xf harbor-offline-installer-v2.11.1.tgz </span><br><span class="line"></span><br><span class="line">4.进入harbor目录</span><br><span class="line">[root@harbor harbor]# <span class="built_in">cd</span> /root/harbor/</span><br><span class="line">[root@elk1 harbor]# ll</span><br><span class="line">total 646848</span><br><span class="line">-rw-r--r-- 1 root root      3646 Aug 15 18:07 common.sh</span><br><span class="line">-rw-r--r-- 1 root root 662330539 Aug 15 18:07 harbor.v2.11.1.tar.gz#harbor的所有镜像</span><br><span class="line">-rw-r--r-- 1 root root     14270 Aug 15 18:07 harbor.yml.tmpl</span><br><span class="line">-rwxr-xr-x 1 root root      1975 Aug 15 18:07 install.sh</span><br><span class="line">-rw-r--r-- 1 root root     11347 Aug 15 18:07 LICENSE</span><br><span class="line">-rwxr-xr-x 1 root root      1882 Aug 15 18:07 prepare</span><br><span class="line"></span><br><span class="line">5.改配置文件名</span><br><span class="line">[root@harbor harbor]# <span class="built_in">cp</span> /root/harbor/harbor.yml.tmpl /root/harbor/harbor.yml</span><br><span class="line"></span><br><span class="line">6.修改配置文件 (注释HTTPS的配置)</span><br><span class="line">[root@harbor harbor]# vim harbor.yml</span><br><span class="line">第5行 改成当前主机的ip</span><br><span class="line">hostname: 10.0.0.105</span><br><span class="line">47行：先记录harbor的密码</span><br><span class="line">harbor_admin_password: Harbor12345</span><br><span class="line"></span><br><span class="line">7.执行安装脚本</span><br><span class="line">[root@harbor harbor]# ./install.sh</span><br><span class="line">✔ ----Harbor has been installed and started successfully.----#出现这个就安装成功</span><br><span class="line"></span><br><span class="line">[root@harbor harbor]# docker images</span><br><span class="line">会看到harbor自动安装的镜像</span><br><span class="line">[root@harbor harbor]# netstat -lntup</span><br><span class="line">会看到80端口</span><br><span class="line"></span><br><span class="line">8、浏览器访问当前主机的IP</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240905171032747.png" alt="image-20240905171032747"></p><p>1、创建项目     -1 就是无限大</p><p><img src="../image/study_img/image-20240905171320050.png" alt="image-20240905171320050"></p><p>2、上传镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上传镜像的需求</span></span><br><span class="line">需要修改镜像名称：命名规则</span><br><span class="line">harbor的IP地址/项目名称/镜像名称:标签</span><br><span class="line"></span><br><span class="line">1、将镜像重新命名</span><br><span class="line">[root@docker02 ~]# docker tag wordpress:v7 10.0.0.76/wordpress/wordpress:v7</span><br><span class="line"></span><br><span class="line">2、推送镜像  报错</span><br><span class="line">[root@docker02 ~]# docker push 10.0.0.76/wordpress/wordpress:v7</span><br><span class="line">The push refers to repository [10.0.0.76/wordpress/wordpress]</span><br><span class="line">Get <span class="string">&quot;https://10.0.0.76/v2/&quot;</span>: dial tcp 10.0.0.76:443: connect: connection refused</span><br><span class="line">原因是没有信任不安全的连接</span><br><span class="line"></span><br><span class="line">3、修改docker配置文件，添加信任不安全的镜像仓库配置</span><br><span class="line">[root@docker02 ~]# vim /etc/docker/daemon.json </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.1panel.live&quot;</span>, <span class="string">&quot;https://hub.rat.dev/&quot;</span>, <span class="string">&quot;https://docker.chenby.cn&quot;</span>, <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>],</span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://10.0.0.76&quot;</span>]#就是加这个配置，注意，需要在上一行结束位置加,逗号</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">重启docker</span><br><span class="line">[root@docker02 ~]# systemctl restart docker</span><br><span class="line"></span><br><span class="line">4、再次推送 报错</span><br><span class="line">[root@docker02 ~]# docker push 10.0.0.76/wordpress/wordpress:v7</span><br><span class="line">unauthorized: unauthorized to access repository: wordpress/wordpress, action: push: unauthorized to access repository: wordpress/wordpress, action: push</span><br><span class="line">仓库没有做认证</span><br><span class="line"></span><br><span class="line">5、命令行登录Harbor进行认证</span><br><span class="line">[root@docker02 ~]# docker login 10.0.0.76</span><br><span class="line">Username: admin</span><br><span class="line">Password:  <span class="comment">#密码：Harbor12345</span></span><br><span class="line">......</span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line">6、这次推送镜像成功，进入web页面，刷新一下查看</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240905173214933.png" alt="image-20240905173214933"></p><p><img src="../image/study_img/image-20240905173246328.png" alt="image-20240905173246328"></p><p><img src="../image/study_img/image-20240905173324730.png" alt="image-20240905173324730"></p><p>3、下载Harbor仓库里面的镜像</p><p><img src="../image/study_img/image-20240905181051876.png" alt="image-20240905181051876"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">使用10.0.0.101下载镜像</span><br><span class="line"><span class="comment">#10.0.0.101操作如下</span></span><br><span class="line">1、修改docker配置文件，添加信任不安全的镜像仓库配置</span><br><span class="line">[root@docker01 ~]# vim /etc/docker/daemon.json </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.1panel.live&quot;</span>, <span class="string">&quot;https://hub.rat.dev/&quot;</span>, <span class="string">&quot;https://docker.chenby.cn&quot;</span>, <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>],</span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://10.0.0.76&quot;</span>]#就是加这个配置，注意，需要在上一行结束位置加,逗号</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# systemctl restart docker</span><br><span class="line"></span><br><span class="line">2、登录harbor</span><br><span class="line">[root@docker01 ~]# docker login 10.0.0.76</span><br><span class="line">Username: admin</span><br><span class="line">Password:  <span class="comment">#密码：Harbor12345</span></span><br><span class="line">......</span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line">3、下载镜像</span><br><span class="line">[root@docker01 ~]# docker pull 10.0.0.76/wordpress/wordpress@sha256:c23f172bdd40059652c0a45affd4c0d1740fa8578c56e0209316e43516560050</span><br><span class="line">或者</span><br><span class="line">[root@docker01 ~]# docker pull 10.0.0.76/wordpress/wordpress:v7</span><br></pre></td></tr></table></figure><h3 id="7、镜像仓库registry">7、<strong>镜像仓库registry</strong></h3><p>环境准备</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th></tr></thead><tbody><tr><td>docker01</td><td>10.0.0.101  /  172.16.1.101</td><td>registry命令行仓库</td></tr></tbody></table><p>1、使用10.0.0.101地址的机器搭建仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、搭建仓库</span><br><span class="line">[root@docker01 ~]# docker run -d -p 5000:5000 --restart=always --name registry -v /opt/myregistry:/var/lib/registry registry</span><br><span class="line"></span><br><span class="line">[root@docker01 wordpress]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS         PORTS                                                  NAMES</span><br><span class="line">356673cd10da   registry          <span class="string">&quot;/entrypoint.sh /etc…&quot;</span>   11 seconds ago   Up 9 seconds   0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp              registry</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个是http的80端口，一般在企业中，会在他前面加nginx代理，用nginx80代理他的5000端口，nginx上配置域名或者ip</span></span><br><span class="line">regsitry做集群可以挂载这个目录/opt/myregistry/docker/registry/v2/repositories/</span><br><span class="line"></span><br><span class="line">Harbor：他本来就是http,如果想给harbor做集群,可以多起几个harbor,前面加个负载均衡，虽然数据不是统一的数据，可以使用NFS挂载，nginx负载均衡可以解决数据统一的问题，一台上面安装rsync，其他2台实时同步也可以，所有机器都要安装rsync,seysync</span><br><span class="line"></span><br><span class="line">registry可以使用nginx代理</span><br><span class="line">habor不可以使用nginx代理</span><br></pre></td></tr></table></figure><p>2、上传镜像到仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1、给镜像打tag标签，要写全仓库地址    地址:端口/镜像名:版本号</span><br><span class="line">[root@docker02 ~]# docker tag wordpress-manual:v1 172.16.1.101:5000/wordpress-manual:v1</span><br><span class="line">[root@docker02 ~]# docker tag nginx:alpine 172.16.1.101:5000/nginx:alpine</span><br><span class="line">[root@docker02 ~]# docker tag busybox:latest  172.16.1.101:5000/busybox:latest</span><br><span class="line"></span><br><span class="line">2、其他机器需要将代码上传到仓库的机器配置文件，改机器就要信任仓库地址</span><br><span class="line">[root@docker03 ~]# vim /etc/docker/daemon.json </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.1panel.live&quot;</span>, <span class="string">&quot;https://hub.rat.dev/&quot;</span>, <span class="string">&quot;https://docker.chenby.cn&quot;</span>, <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>],</span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://10.0.0.76&quot;</span>,<span class="string">&quot;http://172.16.1.101:5000&quot;</span>]#就是加这个配置，注意，需要在上一行结束位置加,逗号，地址写内外推送会比较快，如果写内外，命名就要用内外命名</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3、重启Docker</span><br><span class="line">[root@docker03 ~]# systemctl restart docker</span><br><span class="line"></span><br><span class="line">4、推送镜像</span><br><span class="line">[root@docker02 ~]# docker push 172.16.1.101:5000/wordpress-manual:v1</span><br><span class="line">[root@docker02 ~]# docker push 172.16.1.101:5000/nginx:alpine</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、查看私有查看镜像列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1、随便在哪台机器查看都行，只要和registre查看的机器通，查看所有镜像仓库</span><br><span class="line">[root@docker02 ~]# curl http://172.16.1.101:5000/v2/_catalog</span><br><span class="line">&#123;<span class="string">&quot;repositories&quot;</span>:[<span class="string">&quot;busybox&quot;</span>,<span class="string">&quot;nginx&quot;</span>,<span class="string">&quot;wordpress-manual&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">2、查看指定仓库的tag标签</span><br><span class="line">[root@docker02 ~]# curl http://172.16.1.101:5000/v2/nginx/tags/list</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;nginx&quot;</span>,<span class="string">&quot;tags&quot;</span>:[<span class="string">&quot;alpine&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">3、格式化输出json格式信息</span><br><span class="line">[root@docker02 ~]# yum -y install jq</span><br><span class="line">[root@docker02 ~]#  curl -s http://172.16.1.101:5000/v2/_catalog|jq</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;repositories&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;busybox&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nginx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;wordpress-manual&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、删除私有仓库中的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1、查看映射的目录</span><br><span class="line">[root@docker01 ~]# docker inspect registry</span><br><span class="line">        <span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/opt/myregistry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/var/lib/registry&quot;</span>,</span><br><span class="line"></span><br><span class="line">2、查看/opt/myregistry目录下的文件，可以看到上传到的镜像</span><br><span class="line">[root@docker01 ~]# ll /opt/myregistry/docker/registry/v2/repositories/</span><br><span class="line">drwxr-xr-x 5 root root 55 Sep  6 16:40 busybox</span><br><span class="line">drwxr-xr-x 5 root root 55 Sep  6 16:32 nginx</span><br><span class="line">drwxr-xr-x 5 root root 55 Sep  6 16:17 wordpress-manual</span><br><span class="line"></span><br><span class="line">3、由于做了映射，就不需要连到容器里面，直接在宿主机上删除</span><br><span class="line">[root@docker01 ~]# <span class="built_in">rm</span> -rf /opt/myregistry/docker/registry/v2/repositories/busybox</span><br><span class="line">[root@docker01 ~]# ll /opt/myregistry/docker/registry/v2/repositories/</span><br><span class="line">drwxr-xr-x 5 root root 55 Sep  6 16:32 nginx</span><br><span class="line">drwxr-xr-x 5 root root 55 Sep  6 16:17 wordpress-manual</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# curl -s http://172.16.1.101:5000/v2/_catalog|jq</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;repositories&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;nginx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;wordpress-manual&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">4、查看是否生成blob二进制文件，如果有就删除，没有生成就不用管</span><br><span class="line">[root@docker01 ~]# ll /etc/docker</span><br><span class="line">-rw-r--r-- 1 root root 219 Sep  6 16:52 daemon.json</span><br><span class="line"></span><br><span class="line">删除方法：</span><br><span class="line">registry garbage-collect /etc/docker/registry/config.yml</span><br></pre></td></tr></table></figure><p>5、拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker03 ~]# docker pull 172.16.1.101:5000/wordpress-manual:v1</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">汇总docker的网络的模式，部署图形化的镜像仓库Harbor，对仓库进行一些基本操作；部署命令行的私有仓库registry</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>三、🍡Docker制作镜像</title>
    <link href="https://www.fomal.cc/posts/eb54e23d.html"/>
    <id>https://www.fomal.cc/posts/eb54e23d.html</id>
    <published>2024-09-22T05:00:48.000Z</published>
    <updated>2024-09-22T07:53:34.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker制作镜像">Docker制作镜像</h2><p>Docker 容器操作的选项</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>–name</td><td>自定义容器名</td></tr><tr><td>-d</td><td>将容器放后台启动</td></tr><tr><td>-it   (input   TTY)</td><td>分配一个交互式的终端</td></tr><tr><td>-p</td><td>端口映射</td></tr><tr><td>-P</td><td>映射随机端口</td></tr><tr><td>-v</td><td>数据卷映射</td></tr><tr><td>-e</td><td>env  指定环境变量</td></tr><tr><td>–restart=always</td><td>设置容器开机自启，docker启动就跟着自动启动</td></tr><tr><td>–link=mysql57</td><td>指定另一个容器的名字，就可以和指定的容器通信</td></tr></tbody></table><p>运行mysql容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">1、拉取mysql5.7.44镜像</span><br><span class="line">root@docker01 ~]# docker pull mysql:5.7.44</span><br><span class="line"></span><br><span class="line">2、查看工作目录和端口</span><br><span class="line">[root@docker01 ~]# docker inspect mysql:5.7.44</span><br><span class="line">            <span class="string">&quot;ExposedPorts&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;3306/tcp&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;33060/tcp&quot;</span>: &#123;&#125;</span><br><span class="line">                </span><br><span class="line">            <span class="string">&quot;Volumes&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;/var/lib/mysql&quot;</span>: &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#环境变量</span></span><br><span class="line"><span class="comment">#root密码</span></span><br><span class="line">MYSQL_ROOT_PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建库</span></span><br><span class="line">MYSQL_DATABASE</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建用户</span></span><br><span class="line">MYSQL_USER</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建普通用户的密码</span></span><br><span class="line">MYSQL_PASSWORD</span><br><span class="line"></span><br><span class="line">2、运行镜像</span><br><span class="line">docker run \</span><br><span class="line">--name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=wordpress \</span><br><span class="line">-e MYSQL_USER=wp_user \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:5.7.44</span><br><span class="line"></span><br><span class="line">-v <span class="comment">#映射配置文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">-name some-mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=my-secret-pw \</span><br><span class="line">-d mysql:tag \</span><br><span class="line">--character-set-server=utf8mb4 \</span><br><span class="line">--collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">--name wp \</span><br><span class="line">--<span class="built_in">link</span> mysql57 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-v /data/wp:/var/www/html \</span><br><span class="line">-e WORDPRESS_DB_HOST=mysql57 \</span><br><span class="line">-e WORDPRESS_DB_USER=wp_user \</span><br><span class="line">-e WORDPRESS_DB_PASSWORD=123 \</span><br><span class="line">-e WORDPRESS_DB_NAME=wordpress \</span><br><span class="line">-d wordpress</span><br><span class="line">一般都是创建普通用户，做了端口映射宿主机也能连接</span><br><span class="line"></span><br><span class="line">3、连接进去</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">exec</span> -it eedc00b /bin/bash</span><br><span class="line">bash-4.2# </span><br><span class="line">bash-4.2# mysql -uroot -p123</span><br><span class="line"></span><br><span class="line">4、查看创建的库和用户</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| wordpress          |</span><br><span class="line">+--------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> user,host from mysql.user;</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| user          | host      |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| root          | %         |</span><br><span class="line">| wp_user       | %         | <span class="comment">#容器的ip是内外ip,不把端口映射到宿主机上就没事</span></span><br><span class="line">| mysql.session | localhost |</span><br><span class="line">| mysql.sys     | localhost |</span><br><span class="line">| root          | localhost |</span><br><span class="line">+---------------+-----------+</span><br><span class="line"></span><br><span class="line">mysql&gt; show grants <span class="keyword">for</span> wp_user@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">+--------------------------------------------------------+</span><br><span class="line">| Grants <span class="keyword">for</span> wp_user@%                                   |</span><br><span class="line">+--------------------------------------------------------+</span><br><span class="line">| GRANT USAGE ON *.* TO <span class="string">&#x27;wp_user&#x27;</span>@<span class="string">&#x27;%&#x27;</span>                    |</span><br><span class="line">| GRANT ALL PRIVILEGES ON `wordpress`.* TO <span class="string">&#x27;wp_user&#x27;</span>@<span class="string">&#x27;%&#x27;</span> |</span><br><span class="line">+--------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">4、映射的目录里面有数据</span><br><span class="line">[root@docker01 ~]# ll /data/mysql/</span><br></pre></td></tr></table></figure><h3 id="1、手动制作WordPress镜像">1、<strong>手动制作WordPress镜像</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">1、下载wordpress代码包</span><br><span class="line">[root@docker01 ~]# wget https://cn.wordpress.org/wordpress-5.9.10-zh_CN.tar.gz</span><br><span class="line"></span><br><span class="line">2、运行一个基础容器</span><br><span class="line">[root@docker01 ~]# docker run --name wp_base -it  centos:7 /bin/bash</span><br><span class="line"></span><br><span class="line">3、换源</span><br><span class="line">[root@3dcd1060f3ab /]#  curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-7-anon.repo</span><br><span class="line">[root@3dcd1060f3ab /]#  curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">[root@3dcd1060f3ab /]#sed -i <span class="string">&quot;s@http://mirrors.aliyun.com@https://mirrors.huaweicloud.com@g&quot;</span> /etc/yum.repos.d/epel.repo</span><br><span class="line"></span><br><span class="line">4、换php源</span><br><span class="line">[root@3dcd1060f3ab /]# <span class="built_in">cat</span> &gt; /etc/yum.repos.d/php.repo &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[php-webtatic]</span></span><br><span class="line"><span class="string">name = PHP Repository</span></span><br><span class="line"><span class="string">baseurl = http://us-east.repo.webtatic.com/yum/el7/x86_64/</span></span><br><span class="line"><span class="string">gpgcheck = 0</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> -e  <span class="string">&quot;[php-webtatic]\nname = PHP Repository\nbaseurl = http://us-east.repo.webtatic.com/yum/el7/x86_64/\ngpgcheck = 0&quot;</span>&gt; /etc/yum.repos.d/php.repo</span><br><span class="line"></span><br><span class="line">5、安装php、mysql、nginx</span><br><span class="line">[root@nginx ~]# yum -y install php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache php71w-pecl-memcached php71w-pecl-redis php71w-pecl-mongodb mariadb-server nginx</span><br><span class="line"></span><br><span class="line">6、创建nginx启动用户</span><br><span class="line">[root@3dcd1060f3ab code]# groupadd -g 666 www</span><br><span class="line">[root@3dcd1060f3ab code]# useradd -u 666 -g 666 -s /sbin/nologin -M www</span><br><span class="line"></span><br><span class="line">7、优化nginx  php 统一用户</span><br><span class="line">主配置文件   (如果是nginxX官方源下载的nginx，就不用优化)</span><br><span class="line">[root@3dcd1060f3ab /]# vi /etc/nginx/nginx.conf</span><br><span class="line">user www;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 4096;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@3dcd1060f3ab ~]# sed -i <span class="string">&#x27;s#user = apache#user = www#g&#x27;</span> /etc/php-fpm.d/www.conf</span><br><span class="line">[root@3dcd1060f3ab ~]# sed -i <span class="string">&#x27;s#group = apache#group = www#g&#x27;</span> /etc/php-fpm.d/www.conf </span><br><span class="line"></span><br><span class="line">8、编写网站主配置文件</span><br><span class="line">[root@3dcd1060f3ab /]# vi /etc/nginx/conf.d/wp.conf</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name _;</span><br><span class="line">        root /code/wordpress;</span><br><span class="line">        index index.php index.html;</span><br><span class="line">        </span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">             fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">             fastcgi_param SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">             include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">9、创建站点目录，宿主机新开窗口上传代码到站点目录，并解压，授权</span><br><span class="line">[root@3dcd1060f3ab /]# <span class="built_in">mkdir</span> /code</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">cp</span> wordpress-5.9.10.tar.gz  wp_base:/code</span><br><span class="line"></span><br><span class="line">[root@3dcd1060f3ab /]# <span class="built_in">cd</span> /code</span><br><span class="line">[root@3dcd1060f3ab code]# tar xf wordpress-5.9.10.tar.gz </span><br><span class="line">[root@3dcd1060f3ab code]# <span class="built_in">chown</span> -R  www.www /code/</span><br><span class="line"></span><br><span class="line">10、启动数据库</span><br><span class="line">虽然是不能systemd启动，但是mariadb的启动脚本还是在的</span><br><span class="line">[root@3dcd1060f3ab code]# <span class="built_in">cat</span> /usr/lib/systemd/system/mariadb.service </span><br><span class="line"> 35行：启动之前要做初始化，找到初始化命令 </span><br><span class="line"> ExecStartPre=/usr/libexec/mariadb-prepare-db-dir %n</span><br><span class="line"> 38行：启动命令</span><br><span class="line"> ExecStart=/usr/bin/mysqld_safe --basedir=/usr   (可以卡主)</span><br><span class="line"> </span><br><span class="line"> [root@3dcd1060f3ab code]# /usr/libexec/mariadb-prepare-db-dir %n</span><br><span class="line"> [root@3dcd1060f3ab code]# /usr/bin/mysqld_safe --basedir=/usr &amp;</span><br><span class="line"> </span><br><span class="line"> 11、进去数据库创建库 用户</span><br><span class="line">[root@3dcd1060f3ab code]# mysql</span><br><span class="line">MariaDB [(none)]&gt; create database wordpress;</span><br><span class="line">MariaDB [(none)]&gt; grant all on *.* to wp_user@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">12、测试用户是否可以连接</span><br><span class="line">[root@3dcd1060f3ab code]# mysql -uwp_user -p123 -h127.0.0.1</span><br><span class="line"></span><br><span class="line">13、启动nginx</span><br><span class="line">[root@3dcd1060f3ab code]# nginx</span><br><span class="line"></span><br><span class="line">14、启动php</span><br><span class="line">找到启动脚本里面的启动命令</span><br><span class="line">[root@3dcd1060f3ab code]# vi /usr/lib/systemd/system/php-fpm.service </span><br><span class="line"> 9行</span><br><span class="line"> ExecStart=/usr/sbin/php-fpm --nodaemonize --fpm-config /etc/php-fpm.conf</span><br><span class="line"> </span><br><span class="line"> --nodaemonize：可以卡住，不加就放后台</span><br><span class="line">[root@3dcd1060f3ab code]# /usr/sbin/php-fpm  --fpm-config /etc/php-fpm.conf</span><br><span class="line"> </span><br><span class="line"> 15、curl一下，能够正常访问</span><br><span class="line"> [root@3dcd1060f3ab code]# curl -L 127.0.0.1</span><br><span class="line"> ....</span><br><span class="line"> &lt;p&gt;Welcome to WordPress. Before getting started, we need some information on the database. You will need to know the following items before proceeding.&lt;/p&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">        &lt;li&gt;Database name&lt;/li&gt;     <span class="comment">#填写数据库信息的页面</span></span><br><span class="line">        &lt;li&gt;Database username&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;Database password&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;Database host&lt;/li&gt;</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">16、将3个服务写脚本启动，就不用一个一个启动了</span><br><span class="line">[root@3dcd1060f3ab code]# <span class="built_in">cd</span> ~</span><br><span class="line">[root@3dcd1060f3ab ~]# vi start.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">/sbin/nginx</span><br><span class="line">/usr/sbin/php-fpm  --fpm-config /etc/php-fpm.conf</span><br><span class="line"><span class="comment">#脚本里面需要卡主一个就可以，把mysql卡住</span></span><br><span class="line">/usr/bin/mysqld_safe --basedir=/usr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">17、输入此时可以打包了，但是打包出来的镜像很大，需要优化一下</span><br><span class="line">[root@3dcd1060f3ab ~]# <span class="built_in">rm</span> -rf /code/wordpress-5.9.10.tar.gz</span><br><span class="line">[root@3dcd1060f3ab ~]# yum clean all</span><br><span class="line">删除所有yum源，以后用不到的，这个就是wordpress</span><br><span class="line">[root@3dcd1060f3ab ~]# <span class="built_in">rm</span> -rf /etc/yum.repos.d/* </span><br><span class="line">如果有下载wget下载东西，都要卸载掉，以后用不到的</span><br><span class="line"></span><br><span class="line">18、打开新窗口，将容器打包</span><br><span class="line">[root@docker01 ~]# docker commit wp_base wordpress:v1</span><br><span class="line">[root@docker01 ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">wordpress    v1        26586db1eda4   9 seconds ago   615MB</span><br><span class="line"></span><br><span class="line">19、运行这个容器，测试是否能够在网页里面访问</span><br><span class="line">[root@docker01 ~]# docker run -p 80:80 -d wordpress:v1  /bin/sh ~/start.sh</span><br><span class="line">脚本在容器里面的绝对路径</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS        PORTS                               NAMES</span><br><span class="line">720febe29da7   wordpress:v1   <span class="string">&quot;/bin/sh /root/start…&quot;</span>   2 seconds ago   Up 1 second   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   hopeful_wing</span><br><span class="line"></span><br><span class="line">20、浏览器访问10.0.0.101</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240904155106974.png" alt="image-20240904155106974"></p><p><img src="../image/study_img/image-20240905192409386.png" alt="image-20240905192409386"></p><p><img src="../image/study_img/image-20240904160154137.png" alt="image-20240904160154137"></p><p><img src="../image/study_img/image-20240904160307363.png" alt="image-20240904160307363"></p><p><img src="../image/study_img/image-20240904160327203.png" alt="image-20240904160327203"></p><p><img src="../image/study_img/image-20240904160430589.png" alt="image-20240904160430589"></p><p><img src="../image/study_img/image-20240904162155815.png" alt="image-20240904162155815"></p><h3 id="2、使用官方的wordpress容器">2、<strong>使用官方的wordpress容器</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1、拉取wordpress容器</span><br><span class="line">[root@docker02 ~]# docker pull wordpress</span><br><span class="line"></span><br><span class="line">2、拉取数据库</span><br><span class="line">[root@docker02 ~]# docker pull mysql:5.7.44</span><br><span class="line"></span><br><span class="line">3、#官方wp容器的启动方法</span><br><span class="line">[root@docker02 ~]# docker run \</span><br><span class="line">--name wp \</span><br><span class="line">--<span class="built_in">link</span> mysql57 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-v /data/wp:/var/www/html \</span><br><span class="line">-e WORDPRESS_DB_HOST=mysql57 \</span><br><span class="line">-e WORDPRESS_DB_USER=wp_user \</span><br><span class="line">-e WORDPRESS_DB_PASSWORD=123 \</span><br><span class="line">-e WORDPRESS_DB_NAME=wordpress \</span><br><span class="line">-d wordpress</span><br><span class="line"></span><br><span class="line"><span class="comment">#官方mysql容器的启动方法</span></span><br><span class="line">[root@docker02 ~]# docker run \</span><br><span class="line">--name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=wordpress \</span><br><span class="line">-e MYSQL_USER=wp_user \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:5.7.44</span><br><span class="line"></span><br><span class="line">4、浏览器访问10.0.0.102</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240904164056259.png" alt="image-20240904164056259"></p><p>可以看到没有填写数据库信息的阶段，因为在启动数据库之前已经使用参数传递进去了，而且不会出现错误，不会出现破图，这个才是生产中需要的效果，需要变量传递参数</p><p><img src="../image/study_img/image-20240904164144932.png" alt="image-20240904164144932"></p><h3 id="3、构建可以传递参数的镜像-（模拟官方打wordpress镜像）">3、<strong>构建可以传递参数的镜像    （模拟官方打wordpress镜像）</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先了解读取系统环境变量的命令：envsubst</span></span><br><span class="line">[root@docker02 ~]# <span class="built_in">export</span> wp_db_name=wp</span><br><span class="line">[root@docker02 ~]# <span class="built_in">export</span> wp_db_user=wp_user</span><br><span class="line">[root@docker02 ~]# <span class="built_in">echo</span> <span class="variable">$wp_db_name</span></span><br><span class="line">wp</span><br><span class="line">[root@docker02 ~]# <span class="built_in">echo</span> <span class="variable">$wp_db_user</span></span><br><span class="line">wp_user</span><br><span class="line">[root@docker02 ~]# vim 1.txt</span><br><span class="line">define( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;$wp_db_name&#x27;</span> );</span><br><span class="line">define( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;$wp_db_user&#x27;</span> );</span><br><span class="line"></span><br><span class="line">拿环境变量去渲染这个文件,1.txt会变成空文件</span><br><span class="line">envsubst读取1.txt里面的变量，匹配环境变量里面有没有，有的话，输出渲染到2.txt</span><br><span class="line">[root@docker02 ~]# envsubst &lt; 1.txt &gt; 2.txt</span><br><span class="line">[root@docker02 ~]# <span class="built_in">cat</span> 2.txt </span><br><span class="line">define( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;wp&#x27;</span> );</span><br><span class="line">define( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;wp_user&#x27;</span> );</span><br><span class="line"></span><br><span class="line">指定只渲染一个变量，没被渲染的变量就是默认的</span><br><span class="line">[root@docker02 ~]# <span class="built_in">cat</span> 1.txt </span><br><span class="line">define( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;$wp_db_name&#x27;</span> );</span><br><span class="line">define( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;$wp_db_user&#x27;</span> );</span><br><span class="line">define( <span class="string">&#x27;DB_PASS&#x27;</span>, <span class="string">&#x27;$wp_db_pass&#x27;</span> );</span><br><span class="line">[root@docker02 ~]# envsubst <span class="string">&#x27;$wp_db_name&#x27;</span> &lt; 1.txt &gt;2.txt </span><br><span class="line">[root@docker02 ~]# <span class="built_in">cat</span> 2.txt </span><br><span class="line">define( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;wp&#x27;</span> );</span><br><span class="line">define( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;$wp_db_user&#x27;</span> );</span><br><span class="line">define( <span class="string">&#x27;DB_PASS&#x27;</span>, <span class="string">&#x27;$wp_db_pass&#x27;</span> );</span><br><span class="line"></span><br><span class="line">容器里面没有这个命令，先查询一个属于哪个包，在容器里面安装服务的时候一起安装</span><br><span class="line">[root@docker02 ~]# yum provides envsbet</span><br><span class="line">gettext-0.19.8.1-3.el7.x86_64 : GNU libraries and utilities <span class="keyword">for</span> producing multi-lingual messages</span><br></pre></td></tr></table></figure><p>在docker02    10.0.0.102 构建     需要把之前允许的容器关闭，需要打nginx、php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line">1、下载wordpress代码包</span><br><span class="line">[root@docker01 ~]# wget https://cn.wordpress.org/wordpress-5.9.10-zh_CN.tar.gz</span><br><span class="line"></span><br><span class="line">1、运行一个基础容器</span><br><span class="line">[root@docker01 ~]# docker run --name wp_base -it  centos:7 /bin/bash</span><br><span class="line"></span><br><span class="line">2、换源</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-7-anon.repo</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">sed -i <span class="string">&quot;s@http://mirrors.aliyun.com@https://mirrors.huaweicloud.com@g&quot;</span> /etc/yum.repos.d/epel.repo</span><br><span class="line"></span><br><span class="line">3、换php源</span><br><span class="line">[root@3dcd1060f3ab /]# <span class="built_in">cat</span> &gt; /etc/yum.repos.d/php.repo &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[php-webtatic]</span></span><br><span class="line"><span class="string">name = PHP Repository</span></span><br><span class="line"><span class="string">baseurl = http://us-east.repo.webtatic.com/yum/el7/x86_64/</span></span><br><span class="line"><span class="string">gpgcheck = 0</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> -e  <span class="string">&quot;[php-webtatic]\nname = PHP Repository\nbaseurl = http://us-east.repo.webtatic.com/yum/el7/x86_64/\ngpgcheck = 0&quot;</span>&gt; /etc/yum.repos.d/php.repo</span><br><span class="line"></span><br><span class="line">4、安装php、nginx、envsubst命令</span><br><span class="line">[root@nginx ~]# yum -y install php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache php71w-pecl-memcached php71w-pecl-redis php71w-pecl-mongodb nginx  gettext</span><br><span class="line"></span><br><span class="line">5、创建nginx启动用户</span><br><span class="line">groupadd -g 666 www</span><br><span class="line">useradd -u 666 -g 666 -s /sbin/nologin -M www</span><br><span class="line"></span><br><span class="line">6、优化nginx  php 统一用户</span><br><span class="line">主配置文件   (如果是nginxX官方源下载的nginx，就不用优化)</span><br><span class="line">[root@3dcd1060f3ab /]# vi /etc/nginx/nginx.conf</span><br><span class="line">user www;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 4096;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@3dcd1060f3ab ~]# sed -i <span class="string">&#x27;s#user = apache#user = www#g&#x27;</span> /etc/php-fpm.d/www.conf</span><br><span class="line">sed -i <span class="string">&#x27;s#group = apache#group = www#g&#x27;</span> /etc/php-fpm.d/www.conf </span><br><span class="line"></span><br><span class="line">7、编写网站主配置文件</span><br><span class="line">[root@3dcd1060f3ab /]# vi /etc/nginx/conf.d/wp.conf</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name _;</span><br><span class="line">        root /code/wordpress;</span><br><span class="line">        index index.php index.html;</span><br><span class="line">        </span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">             fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">             fastcgi_param SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">             include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">8、创建站点目录，宿主机新开窗口上传代码到站点目录，并解压，授权</span><br><span class="line">[root@3dcd1060f3ab /]# <span class="built_in">mkdir</span> /code</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">cp</span> wordpress-5.9.10.tar.gz  wp_base:/code</span><br><span class="line">[root@3dcd1060f3ab code]# <span class="built_in">cd</span> /code</span><br><span class="line">[root@3dcd1060f3ab code]# tar xf wordpress-5.9.10.tar.gz </span><br><span class="line">[root@3dcd1060f3ab code]# <span class="built_in">chown</span> -R  www.www /code/</span><br><span class="line"><span class="built_in">chown</span> -R www.www /var/lib/nginx/</span><br><span class="line"></span><br><span class="line">9、启动nginx</span><br><span class="line">[root@3dcd1060f3ab code]# nginx</span><br><span class="line"></span><br><span class="line">10、启动php</span><br><span class="line">找到启动脚本里面的启动命令</span><br><span class="line">[root@3dcd1060f3ab code]# vi /usr/lib/systemd/system/php-fpm.service </span><br><span class="line"> 9行</span><br><span class="line"> ExecStart=/usr/sbin/php-fpm --nodaemonize --fpm-config /etc/php-fpm.conf</span><br><span class="line"> </span><br><span class="line"> --nodaemonize：可以卡住，不加就放后台</span><br><span class="line">[root@3dcd1060f3ab code]# /usr/sbin/php-fpm  --fpm-config /etc/php-fpm.conf</span><br><span class="line"> </span><br><span class="line"> 11、curl一下，能够正常访问</span><br><span class="line"> [root@3dcd1060f3ab code]# curl -L 127.0.0.1</span><br><span class="line"> ....    <span class="comment">#可以看到选中语言的界面</span></span><br><span class="line">&lt;option value=<span class="string">&quot;zh_HK&quot;</span> lang=<span class="string">&quot;zh&quot;</span> data-continue=<span class="string">&quot;繼續&quot;</span>&gt;香港中文&lt;/option&gt;</span><br><span class="line">&lt;option value=<span class="string">&quot;zh_CN&quot;</span> lang=<span class="string">&quot;zh&quot;</span> data-continue=<span class="string">&quot;继续&quot;</span>&gt;简体中文&lt;/option&gt;</span><br><span class="line">&lt;option value=<span class="string">&quot;zh_TW&quot;</span> lang=<span class="string">&quot;zh&quot;</span> data-continue=<span class="string">&quot;繼續&quot;</span>&gt;繁體中文&lt;/option&gt;</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">12、传参，不要数据的页面，需要使用读取系统环境变量的命令envsubst</span><br><span class="line">将配置文件改成模版文件</span><br><span class="line">[root@1925f5794372 code]# vi /code/wordpress/wp-config-sample.php</span><br><span class="line">......</span><br><span class="line"><span class="comment">#把这几行改成变量</span></span><br><span class="line">     23 define( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;$WORDPRESS_DB_NAME&#x27;</span> );</span><br><span class="line">     24 </span><br><span class="line">     25 /** Database username */</span><br><span class="line">     26 define( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;$WORDPRESS_DB_USER&#x27;</span> );</span><br><span class="line">     27 </span><br><span class="line">     28 /** Database password */</span><br><span class="line">     29 define( <span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;$WORDPRESS_DB_PASSWORD&#x27;</span> );</span><br><span class="line">     30 </span><br><span class="line">     31 /** Database hostname */</span><br><span class="line">     32 define( <span class="string">&#x27;DB_HOST&#x27;</span>, <span class="string">&#x27;$WORDPRESS_DB_HOST&#x27;</span> );</span><br><span class="line">     </span><br><span class="line"> </span><br><span class="line">sed -i <span class="string">&#x27;s#database_name_here#$WORDPRESS_DB_NAME#g&#x27;</span> /code/wordpress/wp-config-sample.php</span><br><span class="line">sed -i <span class="string">&#x27;s#username_here#$WORDPRESS_DB_USER#g&#x27;</span> /code/wordpress/wp-config-sample.php</span><br><span class="line">sed -i <span class="string">&#x27;s#password_here#$WORDPRESS_DB_PASSWORD#g&#x27;</span> /code/wordpress/wp-config-sample.php</span><br><span class="line">sed -i <span class="string">&#x27;s#localhost#$WORDPRESS_DB_HOST#g&#x27;</span> /code/wordpress/wp-config-sample.php</span><br><span class="line"></span><br><span class="line">13、将2个服务写脚本启动，就不用一个一个启动了</span><br><span class="line">[root@3dcd1060f3ab ~]# vi /start.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#渲染变量到wp-config.php</span></span><br><span class="line">envsubst <span class="string">&#x27;$WORDPRESS_DB_NAME $WORDPRESS_DB_USER $WORDPRESS_DB_PASSWORD $WORDPRESS_DB_HOST&#x27;</span> &lt; /code/wordpress/wp-config-sample.php &gt; /code/wordpress/wp-config.php</span><br><span class="line"><span class="built_in">chown</span> -R  www.www /code/</span><br><span class="line">/usr/sbin/php-fpm  --fpm-config /etc/php-fpm.conf</span><br><span class="line"><span class="comment">#脚本里面必须有一个卡在，哪个卡在都可以</span></span><br><span class="line">/sbin/nginx -g <span class="string">&#x27;daemon off;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">14、输入此时可以打包了，但是打包出来的镜像很大，需要优化一下</span><br><span class="line">[root@3dcd1060f3ab ~]# <span class="built_in">rm</span> -rf /code/wordpress-5.9.10.tar.gz</span><br><span class="line">[root@3dcd1060f3ab ~]# yum clean all</span><br><span class="line">删除所有yum源，以后用不到的，这个就是wordpress</span><br><span class="line">[root@3dcd1060f3ab ~]# <span class="built_in">rm</span> -rf /etc/yum.repos.d/* </span><br><span class="line">如果有下载wget下载东西，都要卸载掉，以后用不到的</span><br><span class="line"></span><br><span class="line">15、打开新窗口，将容器打包</span><br><span class="line">[root@docker01 ~]# docker commit wp_base wordpress:v1</span><br><span class="line">[root@docker02 ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">wordpress    v1        23e066cac691   2 seconds ago   586MB</span><br><span class="line"></span><br><span class="line">16、删除数据库数据目录，不然第二次启动不能建库，因为第一次的数据已经持久化了</span><br><span class="line">[root@docker02 ~]# <span class="built_in">rm</span> -rf /data</span><br><span class="line"></span><br><span class="line">17、运行带变量的容器</span><br><span class="line"><span class="comment">#运行数据库</span></span><br><span class="line">docker run \</span><br><span class="line">--name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=wp_db \</span><br><span class="line">-e MYSQL_USER=wp_user \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:5.7.44</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行wordpress容器</span></span><br><span class="line">docker run \</span><br><span class="line">--name wp \</span><br><span class="line">--<span class="built_in">link</span> mysql57 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-e WORDPRESS_DB_HOST=mysql57 \</span><br><span class="line">-e WORDPRESS_DB_USER=wp_user \</span><br><span class="line">-e WORDPRESS_DB_PASSWORD=123 \</span><br><span class="line">-e WORDPRESS_DB_NAME=wp_db \</span><br><span class="line">-d wordpress:v3 /bin/sh /start.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看正在运行的镜像</span></span><br><span class="line">[root@docker02 ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED             STATUS             PORTS                                                  NAMES</span><br><span class="line">71439bdb8066   wordpress:v5   <span class="string">&quot;/bin/sh /start.sh&quot;</span>      5 seconds ago       Up 4 seconds       0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp                      wp</span><br><span class="line">c6eefe3b5358   mysql:5.7.44   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   49 minutes ago      Up 49 minutes      0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql57</span><br><span class="line">4f798d07ace2   centos:7       <span class="string">&quot;/bin/bash&quot;</span>              About an hour ago   Up About an hour                                                          wp_base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">18、浏览器访问</span><br><span class="line">10.0.0.102</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240904193619359.png" alt="image-20240904193619359"></p><p>通过填写数据库信息的页面，直接来的主从页面</p><p><img src="../image/study_img/image-20240904194031698.png" alt="image-20240904194031698"></p><p><strong>报错问题</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、docker正常启动，容器里面的服务都正常启动,端口映射也没问题，访问网页找不到页面</span></span><br><span class="line">是因为外面的请求不能到底容器</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决办法：</span></span><br><span class="line">vi /etc/sysctl.conf</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line">systemctl restart network</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、wp破图</span></span><br><span class="line">1、查看错误日志</span><br><span class="line">[root@1a60046efc86 wordpress]# tailf /var/log/nginx/error.log </span><br><span class="line">2024/09/05 12:45:49 [crit] 16#16: *432 open() <span class="string">&quot;/var/lib/nginx/tmp/fastcgi/8/01/0000000018&quot;</span> failed (13: Permission denied) <span class="keyword">while</span> reading upstream, client: 10.0.0.1, server: _, request: <span class="string">&quot;GET /wp-admin/site-editor.php?postType=wp_template&amp;postId=twentytwentytwo%2F%2Fhome HTTP/1.1&quot;</span>, upstream: <span class="string">&quot;fastcgi://127.0.0.1:9000&quot;</span>, host: <span class="string">&quot;10.0.0.102&quot;</span>, referrer: <span class="string">&quot;http://10.0.0.102/&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Nginx 修改了默认配置，不是以 nginx 或 root 用户来运行 Nginx（主要的原因）</span><br><span class="line">这个目录没有权限去访问：/var/lib/nginx/tmp 目录主要是用来存放临时的缓存文件，因为使用的是 Nginx 的反向代理，当我们上传文件的时候会先把文件写入 Nginx 的 /var/lib/nginx/tmp/client_body 目录，然后再通过代理转发到目标系统。</span><br><span class="line"></span><br><span class="line">2、查看 /var/lib/nginx/tmp 的权限，会发现这个目录默认的所有者是 nginx:</span><br><span class="line">[root@1a60046efc86 wordpress]# ll /var/lib</span><br><span class="line">.....</span><br><span class="line">drwxr-xr-x 2 root root   6 Apr 11  2018 misc</span><br><span class="line">drwxrwx--- 3 nginx root  17 Sep  5 11:52 nginx <span class="comment">#权限不对</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、修改权限</span><br><span class="line">[root@1a60046efc86 wordpress]# <span class="built_in">chown</span> -R www.www /var/lib/nginx/</span><br><span class="line">[root@1a60046efc86 wordpress]# ll /var/lib</span><br><span class="line">......</span><br><span class="line">drwxrwx--- 1 www  www   17 Sep  5 11:52 nginx</span><br><span class="line"></span><br><span class="line">4、再次访问，刷新慢一点，加重一下，就不会破图了</span><br></pre></td></tr></table></figure><h3 id="4、Docker自动化构建镜像">4、<strong>Docker自动化构建镜像</strong></h3><p>手动构建镜像的缺陷<br>1.体积太大<br>2.启动不方便<br>3.无法直接修改CMD<br>4.没有声明端口<br>5、没有声明可映射目录</p><h3 id="5、Dockerfile的介绍">5、<strong>Dockerfile的介绍</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Dockerile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。声明式的脚本，将镜像构建内容，写入脚本中即可。</span><br><span class="line"></span><br><span class="line">镜像:中药</span><br><span class="line">dockerfile：配方</span><br><span class="line">dockerfile：常用指令</span><br></pre></td></tr></table></figure><p>dockerfile的指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM：指定一个基础镜像</span><br><span class="line">RUN： 指定系统命令</span><br><span class="line">CMD： 指定运行容器PID为1的进程命令   </span><br><span class="line">ENTRYPOINT：指定运行容器PID为1的进程命令 /bin/sh /start.sh</span><br><span class="line"></span><br><span class="line">ADD： 将宿主机上面的文件docker <span class="built_in">cp</span>到容器中(会自动解压，一般传压缩包,里面不会传压缩包，之后传解压后的包)</span><br><span class="line">COPY：将宿主机上面的文件docker <span class="built_in">cp</span>到容器中(不会自动压，一般传配置文件)</span><br><span class="line">WORKDIR：指定一个工作目录，docker <span class="built_in">exec</span>连接进去时，自动进入该目录下</span><br><span class="line">EXPOSE：声明镜像要暴露的端口</span><br><span class="line">VOLUME： 声明可映射的数据卷</span><br><span class="line">ENV：声明默认环境变量(ssh的密码,数据库的密码)镜像的属性标签</span><br><span class="line"></span><br><span class="line">LABEL：打标签</span><br><span class="line">MAINTAINER：声明管理者标识</span><br></pre></td></tr></table></figure><h3 id="6、自动化构建wordpress">6、<strong>自动化构建wordpress</strong></h3><p>1、准备需要的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1、运行带有配置文件的容器，进入容器，将需要的配置文件拉出去</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">exec</span> -it 40b99669a1 /bin/bash</span><br><span class="line"></span><br><span class="line">2、创建所需文件存放的目录</span><br><span class="line">[root@docker01 ~]# <span class="built_in">mkdir</span> -p /code/wordpress/</span><br><span class="line"></span><br><span class="line">3、拉取容器里面的配置文件</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">cp</span> 40b99669a160:/etc/nginx/nginx.conf /code/wordpress/</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">cp</span> 40b99669a160:/etc/nginx/conf.d/wp.conf /code/wordpress/ </span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">cp</span> 40b99669a160:/etc/php-fpm.d/www.conf /code/wordpress/</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">cp</span> 40b99669a160:/code/wordpress/wp-config-sample.php /code/wordpress/</span><br><span class="line"></span><br><span class="line">4、准备这些文件,检查配置文件都安装所需要求更改ok</span><br><span class="line">[root@docker01 ~]# ll /code/wordpress/</span><br><span class="line">-rw-r--r-- 1 root root  724 Sep  5 23:31 nginx.conf</span><br><span class="line">-rw-r--r-- 1 root root  278 Sep  5 20:12 start.sh</span><br><span class="line">-rw-rw-rw- 1 root root  18M Sep  5 23:24 wordpress-5.9.10.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root  324 Sep  5 19:53 wp.conf</span><br><span class="line">-rw-r--r-- 1 root root 3.0K Sep  5 21:39 wp-config-sample.php</span><br><span class="line">-rw-r--r-- 1 root root  18K Sep  5 23:32 www.conf</span><br></pre></td></tr></table></figure><p>2、编写Dockerfile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">1、编写DockerFile</span><br><span class="line">[root@docker01 ~]# <span class="built_in">cd</span> /code/wordpress/</span><br><span class="line">[root@docker01 wordpress]# vim Dockerfile</span><br><span class="line">FROM centos:7</span><br><span class="line">RUN  curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-7-anon.repo</span><br><span class="line">RUN  curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">RUN  sed -i <span class="string">&quot;s@http://mirrors.aliyun.com@https://mirrors.huaweicloud.com@g&quot;</span> /etc/yum.repos.d/epel.repo</span><br><span class="line">RUN  <span class="built_in">echo</span> -e  <span class="string">&quot;[php-webtatic]\nname = PHP Repository\nbaseurl = http://us-east.repo.webtatic.com/yum/el7/x86_64/\ngpgcheck = 0&quot;</span>&gt; /etc/yum.repos.d/php.repo</span><br><span class="line">RUN  yum -y install php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache php71w-pecl-memcached php71w-pecl-redis php71w-pecl-mongodb nginx  gettext</span><br><span class="line">RUN  groupadd -g 666 www</span><br><span class="line">RUN  useradd -u 666 -g 666 -s /sbin/nologin -M www</span><br><span class="line">RUN  <span class="built_in">mkdir</span> /code</span><br><span class="line">COPY nginx.conf /etc/nginx/nginx.conf</span><br><span class="line">COPY www.conf /etc/php-fpm.d/www.conf</span><br><span class="line">COPY wp.conf /etc/nginx/conf.d/wp.conf</span><br><span class="line">ADD  wordpress-5.9.10.tar.gz  /code</span><br><span class="line">COPY wp-config-sample.php /code/wordpress/wp-config-sample.php</span><br><span class="line">RUN  <span class="built_in">chown</span> -R  www.www /code</span><br><span class="line">RUN  <span class="built_in">chown</span> -R www.www /var/lib/nginx</span><br><span class="line">COPY start.sh /start.sh</span><br><span class="line">RUN  <span class="built_in">rm</span> -rf /code/wordpress-5.9.10.tar.gz</span><br><span class="line">RUN  yum clean all</span><br><span class="line">RUN  <span class="built_in">rm</span> -rf /etc/yum.repos.d/* </span><br><span class="line">CMD  [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;/start.sh&quot;</span>]</span><br><span class="line">EXPOSE 80/tcp 8080/tcp</span><br><span class="line">WORKDIR /code/wordpress</span><br><span class="line">VOLUME  /code/wordpress</span><br><span class="line">ENV  WORDPRESS_DB_NAME=wp_db</span><br><span class="line">ENV  WORDPRESS_DB_USER=wp_user</span><br><span class="line">ENV  WORDPRESS_DB_PASSWORD=123</span><br><span class="line">ENV  WORDPRESS_DB_HOST=localhost</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#构建</span><br><span class="line">[root@docker01 wordpress]# docker build -t wordpress-df:v1 .</span><br><span class="line">[root@docker01 ~]# docker images</span><br><span class="line">REPOSITORY                      TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">wordpress-df                    v1        e389c28d9b3b   14 hours ago    831MB</span><br><span class="line"></span><br><span class="line">3、删除数据库数据目录，不然第二次启动不能建库，因为第一次的数据已经持久化了</span><br><span class="line">[root@docker02 ~]# <span class="built_in">rm</span> -rf /data</span><br><span class="line"></span><br><span class="line">4、运行带变量的容器</span><br><span class="line"><span class="comment">#运行数据库</span></span><br><span class="line">docker run \</span><br><span class="line">--name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=wp_db \</span><br><span class="line">-e MYSQL_USER=wp_user \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:5.7.44</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行wordpress容器</span></span><br><span class="line">docker run \</span><br><span class="line">--name wp \</span><br><span class="line">--<span class="built_in">link</span> mysql57 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-e WORDPRESS_DB_HOST=mysql57 \</span><br><span class="line">-e WORDPRESS_DB_USER=wp_user \</span><br><span class="line">-e WORDPRESS_DB_PASSWORD=123 \</span><br><span class="line">-e WORDPRESS_DB_NAME=wp_db \</span><br><span class="line">-d wordpress-df:v1 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、浏览器访问</span><br><span class="line">10.0.0.101</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240906135218039.png" alt="image-20240906135218039"></p><p>3、优化Dockerfile的原则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 优化原则:构建的镜像尽可能小,构建速度尽可能快</span></span><br><span class="line">a: 使用体积小的linux镜像alpine作为基础镜像</span><br><span class="line">b：尽可能的清理无用的缓存文件（尽可能把多个RUN合并）</span><br><span class="line">c：修改dockerfile的时候，尽可能把修改的内容放在最后</span><br><span class="line">d：使用.dockerignore忽略构建docker镜像时，不需要的文件</span><br><span class="line">f:使用\减少不必要的文件RUN或ADD</span><br><span class="line"></span><br><span class="line">层数多不代表体积大，层数多和镜像里面的服务，命令，安装包有关，层数多是命令多，不会让文件数量，文件大小增加</span><br></pre></td></tr></table></figure><p>4、优化Dockerfile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">1、优化DockerFile</span><br><span class="line">[root@docker01 ~]# <span class="built_in">cd</span> /code/wordpress/</span><br><span class="line">[root@docker01 wordpress]# vim Dockerfile</span><br><span class="line">FROM centos:7</span><br><span class="line">RUN  curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-7-anon.repo &amp;&amp; \</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo &amp;&amp; \</span><br><span class="line">sed -i <span class="string">&quot;s@http://mirrors.aliyun.com@https://mirrors.huaweicloud.com@g&quot;</span> /etc/yum.repos.d/epel.repo &amp;&amp; \</span><br><span class="line"><span class="built_in">echo</span> -e  <span class="string">&quot;[php-webtatic]\nname = PHP Repository\nbaseurl = http://us-east.repo.webtatic.com/yum/el7/x86_64/\ngpgcheck = 0&quot;</span>&gt; /etc/yum.repos.d/php.repo &amp;&amp; \</span><br><span class="line">yum -y install php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache php71w-pecl-memcached php71w-pecl-redis php71w-pecl-mongodb nginx  gettext &amp;&amp; \</span><br><span class="line">groupadd -g 666 www &amp;&amp; \</span><br><span class="line">useradd -u 666 -g 666 -s /sbin/nologin -M www &amp;&amp; \</span><br><span class="line"><span class="built_in">mkdir</span> /code &amp;&amp; \</span><br><span class="line">yum clean all &amp;&amp; \</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/yum.repos.d/*</span><br><span class="line">COPY nginx.conf /etc/nginx/nginx.conf</span><br><span class="line">COPY www.conf /etc/php-fpm.d/www.conf</span><br><span class="line">COPY wp.conf /etc/nginx/conf.d/wp.conf</span><br><span class="line">ADD  wordpress-5.9.10.tar.gz  /code</span><br><span class="line">COPY wp-config-sample.php /code/wordpress/wp-config-sample.php</span><br><span class="line">RUN  <span class="built_in">chown</span> -R  www.www /code &amp;&amp; \</span><br><span class="line"><span class="built_in">chown</span> -R www.www /var/lib/nginx</span><br><span class="line">COPY start.sh /start.sh</span><br><span class="line">CMD  [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;/start.sh&quot;</span>]</span><br><span class="line">EXPOSE 80/tcp 8080/tcp</span><br><span class="line">WORKDIR /code/wordpress</span><br><span class="line">VOLUME  /code/wordpress</span><br><span class="line">ENV  WORDPRESS_DB_NAME=wp_db</span><br><span class="line">ENV  WORDPRESS_DB_USER=wp_user</span><br><span class="line">ENV  WORDPRESS_DB_PASSWORD=123</span><br><span class="line">ENV  WORDPRESS_DB_HOST=localhost</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#构建</span><br><span class="line">[root@docker01 wordpress]# docker build -t wordpress-df:v1 .</span><br><span class="line">[root@docker01 ~]# docker images</span><br><span class="line">REPOSITORY                      TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">wordpress-df                    v2        1a14add5916b   11 seconds ago   530MB</span><br><span class="line"></span><br><span class="line">3、删除数据库数据目录，不然第二次启动不能建库，因为第一次的数据已经持久化了</span><br><span class="line">[root@docker02 ~]# <span class="built_in">rm</span> -rf /data</span><br><span class="line"></span><br><span class="line">4、运行带变量的容器</span><br><span class="line"><span class="comment">#运行数据库</span></span><br><span class="line">docker run \</span><br><span class="line">--name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=wp_db \</span><br><span class="line">-e MYSQL_USER=wp_user \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:5.7.44</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行wordpress容器</span></span><br><span class="line">docker run \</span><br><span class="line">--name wp \</span><br><span class="line">--<span class="built_in">link</span> mysql57 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-e WORDPRESS_DB_HOST=mysql57 \</span><br><span class="line">-e WORDPRESS_DB_USER=wp_user \</span><br><span class="line">-e WORDPRESS_DB_PASSWORD=123 \</span><br><span class="line">-e WORDPRESS_DB_NAME=wp_db \</span><br><span class="line">-d wordpress-df:v2 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、浏览器访问</span><br><span class="line">10.0.0.101</span><br></pre></td></tr></table></figure><h3 id="7、制作zabbix镜像">7、<strong>制作zabbix镜像</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">1、拉取相关镜像</span><br><span class="line">[root@docker01 ~]#  docker pull zabbix/zabbix-server-mysql</span><br><span class="line">[root@docker01 ~]#  docker pull zabbix/zabbix-web-nginx-mysql</span><br><span class="line">[root@docker01 ~]#  docker pull mysql:8.0</span><br><span class="line"></span><br><span class="line">2、#运行数据库</span><br><span class="line">注意：再次启动数据库之前先清空data目录</span><br><span class="line"><span class="built_in">rm</span> -rf /data/mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">--name mysql80 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=zabbix \</span><br><span class="line">-e MYSQL_USER=zabbix \</span><br><span class="line">-e MYSQL_PASSWORD=123 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:8.0 \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--character-set-server=utf8mb4 </span><br><span class="line">--collation-server=utf8mb4_bin </span><br><span class="line">--log_bin_trust_function_creators</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、yunx容器化zabbix-server</span><br><span class="line">docker run \</span><br><span class="line">--<span class="built_in">link</span> mysql80 \</span><br><span class="line">--name zabbix-server \</span><br><span class="line">-p 10051:10051 \</span><br><span class="line">-e DB_SERVER_HOST=<span class="string">&quot;mysql80&quot;</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">&quot;zabbix&quot;</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">&quot;123&quot;</span> \</span><br><span class="line">-d zabbix/zabbix-server-mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、容器化zabbix-web</span><br><span class="line">docker run \</span><br><span class="line">--<span class="built_in">link</span> zabbix-server \</span><br><span class="line">--<span class="built_in">link</span> mysql80 \</span><br><span class="line">--name zabbix-web \</span><br><span class="line">-p 80:8080 \</span><br><span class="line">-p 8443:8443 \</span><br><span class="line">-e DB_SERVER_HOST=<span class="string">&quot;mysql80&quot;</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">&quot;zabbix&quot;</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">&quot;123&quot;</span> \</span><br><span class="line">-e ZBX_SERVER_HOST=<span class="string">&quot;zabbix-server&quot;</span> \</span><br><span class="line">-e PHP_TZ=<span class="string">&quot;Asia/Shanghai&quot;</span> \</span><br><span class="line">-d zabbix/zabbix-web-nginx-mysql</span><br><span class="line"></span><br><span class="line">5、检查3个容器是否起来</span><br><span class="line">[root@docker01 ~]# docker ps </span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240905101309249.png" alt="image-20240905101309249"></p><p><img src="../image/study_img/image-20240905100315171.png" alt="image-20240905100315171"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">出现以上报错就是mysql8.0启动命令加参数</span><br><span class="line">--log_bin_trust_funetion</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240905143325160.png" alt="image-20240905143325160"></p>]]></content>
    
    
    <summary type="html">本文汇总对镜像的多种制作方法，还汇总使用dockerfile构建镜像，对镜像的优化</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>二、🍡Docker对象操作</title>
    <link href="https://www.fomal.cc/posts/8f4c40fd.html"/>
    <id>https://www.fomal.cc/posts/8f4c40fd.html</id>
    <published>2024-09-22T04:55:08.000Z</published>
    <updated>2024-09-22T07:53:34.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker对象操作">Docker对象操作</h2><h3 id="1、Docker镜像的操作"><strong>1、Docker镜像的操作</strong></h3><p>docker官网寻找镜像：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#搜索镜像  (选项image可以省略)</span></span><br><span class="line">[root@docker01 ~]# docker search nginx</span><br><span class="line">或者</span><br><span class="line">[root@docker01 ~]# docker image search nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示镜像的关键过程</span></span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">history</span> alpine</span><br><span class="line">IMAGE          CREATED       CREATED BY                                      SIZE      COMMENT</span><br><span class="line">324bc02ae123   6 weeks ago   /bin/sh -c <span class="comment">#(nop)  CMD [&quot;/bin/sh&quot;]              0B        </span></span><br><span class="line">&lt;missing&gt;      6 weeks ago   /bin/sh -c <span class="comment">#(nop) ADD file:99093095d62d04215…   7.8MB  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#拉取镜像： (选项image可以省略)</span></span><br><span class="line">docker pull 从库名:标签名   (不加标签默认拉取latest版本的)</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# docker pull nginx:alpine </span><br><span class="line">或者</span><br><span class="line">[root@docker01 ~]# docker image pull nginx:alpine</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# docker pull nginx:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看拉取到的镜像</span></span><br><span class="line">[root@docker01 ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx        alpine    0f0eda053dc5   2 weeks ago     43.3MB</span><br><span class="line">nginx        latest    5ef79149e0ec   2 weeks ago     188MB</span><br><span class="line">alpine       latest    324bc02ae123   6 weeks ago     7.8MB</span><br><span class="line">busybox      latest    87ff76f62d36   15 months ago   4.26MB</span><br><span class="line">centos       6         5bf9684f4720   2 years ago     194MB</span><br><span class="line">centos       7         eeb6ee3f44bd   2 years ago     204MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除镜像  rmi     (不加标签，默认删除latest)</span></span><br><span class="line">[root@docker01 ~]# docker rmi centos:6  </span><br><span class="line">或者</span><br><span class="line">[root@docker01 ~]# docker image <span class="built_in">rm</span> centos:6 </span><br><span class="line">或者</span><br><span class="line">[root@docker01 ~]# docker rmi 5bf9684f4720</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#导出镜像(一次只能导出一个)</span></span><br><span class="line">[root@docker01 ~]# docker save centos:7 -o /tmp/c7.tgz</span><br><span class="line">-o：output 输出</span><br><span class="line">或者</span><br><span class="line">[root@docker01 ~]# docker save centos:7 &gt; /tmp/c7_2.tgz</span><br><span class="line">&gt;：重定向</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# ll /tmp/ -h</span><br><span class="line">-rw-r--r-- 1 root root 202M Sep  3 14:22 c7_2.tgz</span><br><span class="line">-rw------- 1 root root 202M Sep  3 14:21 c7.tgz</span><br><span class="line">-rw------- 1 root root 202M Sep  3 14:35 eeb6ee3f44bd.tgz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#导入镜像</span></span><br><span class="line">[root@docker01 ~]# scp /tmp/c7.tgz  172.16.1.102:/tmp</span><br><span class="line"></span><br><span class="line">[root@docker02 ~]# docker image load -i /tmp/c7.tgz</span><br><span class="line">-i：input 输入</span><br><span class="line">或者  &lt;：标注输入</span><br><span class="line">[root@docker02 ~]# docker image load &lt; /tmp/c7.tgz</span><br><span class="line"></span><br><span class="line">镜像层数是分层的，镜像有相同的层数，不会占用磁盘空间，再次把c7_2.tgz导进去不会重复，不会占用磁盘空间，他会自动识别到是同一个层</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或者使用ID来导出(不推荐，因为导入到新环境的时候没有名字)</span><br><span class="line">[root@docker01 ~]# docker save  eeb6ee3f44bd -o /tmp/eeb6ee3f44bd.tgz</span><br><span class="line">[root@docker01 ~]# scp /tmp/eeb6ee3f44bd.tgz 172.16.1.103:/tmp</span><br><span class="line"></span><br><span class="line">[root@docker03 ~]# docker image load -i /tmp/eeb6ee3f44bd.tgz </span><br><span class="line">[root@docker03 ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">&lt;none&gt;       &lt;none&gt;    eeb6ee3f44bd   2 years ago   204MB</span><br><span class="line"></span><br><span class="line"><span class="comment">#给镜像加标签(改名)</span></span><br><span class="line">docker tag ID号 镜像名:标签</span><br><span class="line"></span><br><span class="line">[root@docker03 ~]# docker tag eeb6ee3f44bd centos:7</span><br><span class="line">[root@docker03 ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">centos       7         eeb6ee3f44bd   2 years ago   204MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看镜像的详细信息(常用)</span></span><br><span class="line">[root@docker02 ~]# docker inspect nginx:alpine</span><br></pre></td></tr></table></figure><h3 id="2、Docker容器的操作"><strong>2、Docker容器的操作</strong></h3><p>Docker 容器操作的选项</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>–name</td><td>自定义容器名</td></tr><tr><td>-d</td><td>将容器放后台启动</td></tr><tr><td>-it   (input   TTY)</td><td>分配一个交互式的终端</td></tr><tr><td>-p</td><td>端口映射</td></tr><tr><td>-P</td><td>映射随机端口</td></tr><tr><td>-v</td><td>数据卷映射</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#容器运行的原则：</span></span><br><span class="line">1、一个容器最好只做一件事</span><br><span class="line">(比如说搭wp,最后nginx跑一个容器,mysql跑一个容器,php跑一个容器,最好分开，如果想要一个容器跑多个应用，需要解决横向扩展的问题)</span><br><span class="line">2、容器运行必须保证容器内PID为1的进程一直存在</span><br><span class="line"></span><br><span class="line">PID为1的进程是谁决定的：</span><br><span class="line">1、docker run运行容器后加的命令</span><br><span class="line">2、如果在运行容器时没有加任何命令，则以容器镜像中的CMD中的命令作为PID为1的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、#运行alpine容器</span><br><span class="line">[root@docker03 ~]# docker run alpine /bin/echo <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#查看正在运行的容器</span><br><span class="line">[root@docker02 ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS                     PORTS     NAMES</span><br><span class="line">1ed0569ef98e   alpine    <span class="string">&quot;/bin/echo &#x27;hello wo…&quot;</span>   9 seconds ago    Exited (0) 9 seconds ago             affectionate_curie</span><br><span class="line">a1b13ddd5328   alpine    <span class="string">&quot;echo hello world&quot;</span>       19 seconds ago   Created                              goofy_bartik</span><br><span class="line">-a：查看所有容器</span><br><span class="line">[root@docker02 ~]# docker ps -aq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行一个容器</span></span><br><span class="line">docker run [1个或者多个选项]  镜像 [<span class="built_in">command</span>]</span><br><span class="line">[root@docker02 ~]# docker run centos:7 /bin/bash</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# docker run -it -d  busybox  /bin/sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#让容器在后台运行</span></span><br><span class="line">[root@docker03 ~]# docker run -d centos:7 tailf /etc/passwd</span><br><span class="line"></span><br><span class="line">[root@docker03 ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE      COMMAND               CREATED          STATUS          PORTS     NAMES</span><br><span class="line">29d1fc5f02e3   centos:7   <span class="string">&quot;tailf /etc/passwd&quot;</span>   28 seconds ago   Up 28 seconds             vibrant_ritchie</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行容器时给容器起一个名字</span></span><br><span class="line">[root@docker03 ~]# docker run --name wordpress -d nginx:alpine</span><br><span class="line">[root@docker03 ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">c13fdc5ac70e   nginx:alpine   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   18 seconds ago   Up 17 seconds   80/tcp    wordpress</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行一个镜像并连进去</span></span><br><span class="line">[root@docker03 ~]# docker run -it centos:7 /bin/bash</span><br><span class="line"></span><br><span class="line">3、#连接一个容器</span><br><span class="line">如果/bin/bash不能连接进去，就换成/bin/sh</span><br><span class="line">[root@docker03 ~]# docker <span class="built_in">exec</span> -it 29d1fc5f02e3 /bin/bash</span><br><span class="line">查看PID为1的进程</span><br><span class="line">[root@29d1fc5f02e3 /]# ps -aux</span><br><span class="line">USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root          1  0.0  0.0   4364   584 ?        Ss   07:11   0:00 tailf /etc/passwd</span><br><span class="line"></span><br><span class="line">--------docker run 帮我们做了哪些事-----</span><br><span class="line">[root@docker02 ~]# docker run nginx:alpine</span><br><span class="line"></span><br><span class="line">1、拉镜像</span><br><span class="line">docker pull nginx:alpine</span><br><span class="line">2、创建容器</span><br><span class="line">docker create nginx:alpine</span><br><span class="line">3、启动容器</span><br><span class="line">docker start 29d1fc5f02e3</span><br><span class="line">--------------------------------</span><br><span class="line"></span><br><span class="line">4、#停止容器</span><br><span class="line">[root@docker03 ~]# docker ps</span><br><span class="line">[root@docker03 ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE      COMMAND               CREATED          STATUS          PORTS     NAMES</span><br><span class="line">29d1fc5f02e3   centos:7   <span class="string">&quot;tailf /etc/passwd&quot;</span>   17 minutes ago   Up 17 minutes             vibrant_ritchie</span><br><span class="line"></span><br><span class="line">加名字</span><br><span class="line">[root@docker03 ~]# docker stop vibrant_ritchie</span><br><span class="line">vibrant_ritchie</span><br><span class="line">或者 加ID</span><br><span class="line">[root@docker03 ~]# docker stop 29d1fc5f02e3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、#删除容器</span><br><span class="line">docker <span class="built_in">rm</span> -f [container <span class="built_in">id</span>]    </span><br><span class="line"></span><br><span class="line">[root@docker03 ~]# docker <span class="built_in">rm</span> 29d1fc5f02e3</span><br><span class="line">[root@docker03 ~]# docker <span class="built_in">rm</span> -f 29d1fc5f02e3</span><br><span class="line"><span class="comment">#(强制删除  -f )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#批量删除</span></span><br><span class="line">[root@docker03 ~]# docker <span class="built_in">rm</span> -f $(docker ps -q)</span><br><span class="line">批量删除停止运行的容器 -aq</span><br><span class="line">[root@docker03 ~]# docker <span class="built_in">rm</span> -f $(docker ps -aq)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6、#代码的上传和拉取</span><br><span class="line"><span class="comment">#将代码上传到容器</span></span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">cp</span> 1.txt 74ce711a7128:/root</span><br><span class="line"></span><br><span class="line"><span class="comment">#将容器里面的代码下载到本地</span></span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">cp</span> 74ce711a7128:/etc/passwd ./</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用命令将nginx启动并且卡住，容器就不会结束</span><br><span class="line">[root@docker03 ~]# nginx -g <span class="string">&#x27;daemon off;&#x27;</span></span><br></pre></td></tr></table></figure><p>报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1、查看镜像</span><br><span class="line">[root@docker02 ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">alpine       latest    324bc02ae123   6 weeks ago   7.8MB</span><br><span class="line"></span><br><span class="line">2、删除镜像，报错</span><br><span class="line">[root@docker02 ~]# docker rmi 324bc02ae123</span><br><span class="line">Error response from daemon: conflict: unable to delete 324bc02ae123 (must be forced) - image is being used by stopped container a1b13ddd5328</span><br><span class="line"></span><br><span class="line">3、删除依赖的容器</span><br><span class="line">[root@docker02 ~]# docker ps -a | grep <span class="string">&quot;alpine&quot;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs docker <span class="built_in">rm</span></span><br><span class="line">1ed0569ef98e</span><br><span class="line">a1b13ddd5328</span><br><span class="line"></span><br><span class="line">4、删除镜像</span><br><span class="line">[root@docker02 ~]# docker rmi 324bc02ae123</span><br></pre></td></tr></table></figure><h3 id="3、容器的端口映射">3、<strong>容器的端口映射</strong></h3><p>容器需要做端口映射才能让外界访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">端口映射</span><br><span class="line">   -p 宿主机端口:容器端口</span><br><span class="line">   -P 宿主机IP:宿主机端口:容器端口  (多个容器都想使用80端口)</span><br><span class="line">   -p 宿主机IP::容器端口(随机端口)</span><br><span class="line">   -p 宿主机端口:容器端口/udp (但是一般TCP的比较多)</span><br><span class="line">   -p 宿主机IP::容器端口/udp使用宿主机的10.0.8.183这个ip地址的随机端口的udp协议映射容器的udp53端口</span><br><span class="line">   -p 81:80 -p 443:443 可以指定多个-p</span><br><span class="line">   -p 80-88:80-88 端口范围映射</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">1、#  -p：把容器的80端口映射到宿主机的80端口</span><br><span class="line">[root@docker03 ~]# docker run -p80:80 -d nginx:alpine</span><br><span class="line"></span><br><span class="line">[root@docker03 ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                               NAMES</span><br><span class="line">92e2dbca064e   nginx:alpine   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   9 seconds ago    Up 8 seconds    0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   adoring_hertz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">浏览器访问10.0.0.103，就可以访问nginx页面</span><br><span class="line"></span><br><span class="line">2、</span><br><span class="line">[root@docker03 ~]# docker run -p8080:80 -p90:90 -d nginx:alpine</span><br><span class="line"></span><br><span class="line">查看宿主机上有8080和90端口</span><br></pre></td></tr></table></figure><p>-P 宿主机IP:宿主机端口:容器端口    (针对不同的IP，访问不同的容器，多个容器都想使用80端口)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1、先清楚之前允许的docker</span><br><span class="line">[root@docker03 ~]# docker <span class="built_in">rm</span> -f $(docker ps -q)</span><br><span class="line"></span><br><span class="line">2、端口映射</span><br><span class="line">[root@docker03 ~]# docker run -p10.0.0.103:80:80 -d nginx:alpine</span><br><span class="line">[root@docker03 ~]# docker run -p172.16.1.103:80:80 -d nginx:alpine</span><br><span class="line">[root@docker03 ~]# docker run -p127.0.0.1:80:80 -d nginx:alpine</span><br><span class="line"></span><br><span class="line">[root@docker03 ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                     NAMES</span><br><span class="line">7a87c542db29   nginx:alpine   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   25 seconds ago   Up 24 seconds   127.0.0.1:80-&gt;80/tcp      kind_mahavira</span><br><span class="line">a2d578ffff01   nginx:alpine   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   47 seconds ago   Up 46 seconds   172.16.1.103:80-&gt;80/tcp   interesting_joliot</span><br><span class="line">98e6d6611bd6   nginx:alpine   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   59 seconds ago   Up 58 seconds   10.0.0.103:80-&gt;80/tcp     interesting_jennings</span><br><span class="line"></span><br><span class="line"><span class="comment">#不同的网卡，不同的ip,访问方式不一样</span></span><br><span class="line">查看容器日志</span><br><span class="line">[root@docker03 ~]# docker logs -f 容器ID</span><br><span class="line">[root@docker03 ~]# docker logs -f 容器名</span><br><span class="line"></span><br><span class="line">3、查看10.0.0.103:80-&gt;80/tcp容器的访问日志</span><br><span class="line">[root@docker03 ~]# docker logs -f 98e6d6611bd6</span><br><span class="line">浏览器访问10.0.0.103，可以看到日志变化，请求过来了</span><br><span class="line"></span><br><span class="line">4、查看172.16.1.103:80-&gt;80/tcp容器的访问日志</span><br><span class="line">[root@docker03 ~]# docker logs -f a2d578ffff01</span><br><span class="line"></span><br><span class="line">打开一个新终端，使用curl命令访问，看到日志有请求就访问成功</span><br><span class="line">[root@docker03 ~]# curl 172.16.1.103</span><br><span class="line"></span><br><span class="line">5、查看127.0.0.1:80-&gt;80/tcp容器的访问日志</span><br><span class="line">[root@docker03 ~]# docker logs  -f 7a87c542db29</span><br><span class="line">打开一个新终端，使用curl命令访问，看到日志有请求就访问成功</span><br><span class="line">[root@docker03 ~]# curl 127.0.0.1</span><br></pre></td></tr></table></figure><p>-p 宿主机IP::容器端口(随机端口)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1、在宿主机上起5个随机端口</span><br><span class="line">[root@docker03 ~]# docker run -p10.0.0.103::80 -d nginx:alpine</span><br><span class="line">[root@docker03 ~]# docker run -p10.0.0.103::80 -d nginx:alpine</span><br><span class="line">[root@docker03 ~]# docker run -p10.0.0.103::80 -d nginx:alpine</span><br><span class="line">[root@docker03 ~]# docker run -p10.0.0.103::80 -d nginx:alpine</span><br><span class="line">[root@docker03 ~]# docker run -p10.0.0.103::80 -d nginx:alpine</span><br><span class="line"></span><br><span class="line">2、查看端口</span><br><span class="line">[root@docker03 ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED              STATUS              PORTS                      NAMES</span><br><span class="line">57ae53de8781   nginx:alpine   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   About a minute ago   Up About a minute   10.0.0.103:32776-&gt;80/tcp   distracted_tharp</span><br><span class="line">fe081b7a25ac   nginx:alpine   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   About a minute ago   Up About a minute   10.0.0.103:32775-&gt;80/tcp   kind_knuth</span><br><span class="line">2ed44ac6261f   nginx:alpine   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   About a minute ago   Up About a minute   10.0.0.103:32774-&gt;80/tcp   clever_sinoussi</span><br><span class="line">c009cf3348ff   nginx:alpine   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   About a minute ago   Up About a minute   10.0.0.103:32773-&gt;80/tcp   inspiring_hawking</span><br><span class="line">fe02a74ce3d2   nginx:alpine   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   About a minute ago   Up About a minute   10.0.0.103:32772-&gt;80/tcp   keen_yonath</span><br><span class="line"></span><br><span class="line">3、浏览器访问这些页面，可以看到nginx测试页</span><br><span class="line">10.0.0.103:32776</span><br><span class="line">10.0.0.103:32775</span><br><span class="line">10.0.0.103:32774</span><br><span class="line">10.0.0.103:32773</span><br><span class="line">10.0.0.103:32772</span><br></pre></td></tr></table></figure><p>-p 80-88:80-88 端口范围映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@docker03 ~]# docker run  -p81-85:81-85 -d nginx:alpine</span><br><span class="line"></span><br><span class="line">[root@docker03 ~]# netstat -lntup|grep <span class="string">&#x27;\b8[0-9]\b&#x27;</span></span><br><span class="line">tcp        0      0 0.0.0.0:81              0.0.0.0:*</span><br><span class="line">tcp        0      0 0.0.0.0:82              0.0.0.0:*</span><br><span class="line">tcp        0      0 0.0.0.0:83              0.0.0.0:*</span><br><span class="line">tcp        0      0 0.0.0.0:84              0.0.0.0:*</span><br><span class="line">tcp        0      0 0.0.0.0:85              0.0.0.0:*</span><br><span class="line">tcp6       0      0 :::81                   :::*     </span><br><span class="line">tcp6       0      0 :::82                   :::*     </span><br><span class="line">tcp6       0      0 :::83                   :::*     </span><br><span class="line">tcp6       0      0 :::84                   :::*     </span><br><span class="line">tcp6       0      0 :::85                   :::*     </span><br></pre></td></tr></table></figure><h3 id="4、案例：运行容器，部署游戏代码">4、<strong>案例：运行容器，部署游戏代码</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1、下载代码</span><br><span class="line">[root@docker01 ~]# wget http://test.driverzeng.com/Nginx_Code/h5_games.zip</span><br><span class="line"></span><br><span class="line">2、运行nginx容器</span><br><span class="line">[root@docker01 ~]# docker run -p80:80 -d nginx:alpine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、查看运行的PID</span><br><span class="line">[root@docker01 ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED              STATUS              PORTS                               NAMES</span><br><span class="line">74ce711a7128   nginx:alpine   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   About a minute ago   Up About a minute   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   zealous_shaw</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、查看是否存在工作目录     看到不存在工作目录</span><br><span class="line">[root@docker01 ~]# docker inspect nginx:alpine</span><br><span class="line"></span><br><span class="line">5、连接到容器里面，查看站点目录</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">exec</span> -it 74ce711a7128 /bin/sh</span><br><span class="line">/ <span class="comment"># vi /etc/nginx/conf.d/default.conf </span></span><br><span class="line"> root   /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">6、将代码上传</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">cp</span> h5_games.zip 74ce711a7128:/usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">7、这次连接到容器里面</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">exec</span> -it 74ce711a7128 /bin/sh</span><br><span class="line">/ <span class="comment"># </span></span><br><span class="line">/ <span class="comment"># cd /usr/share/nginx/html/</span></span><br><span class="line">/usr/share/nginx/html <span class="comment"># unzip h5_games.zip </span></span><br><span class="line"></span><br><span class="line">/usr/share/nginx/html <span class="comment"># ls</span></span><br><span class="line">50x.html      __MACOSX      h5_games      h5_games.zip  index.html</span><br><span class="line"></span><br><span class="line">8、浏览器访问</span><br><span class="line">10.0.0.101/h5_games</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240903120700780.png" alt="image-20240903120700780"></p><p>以上操作都比较麻烦，而且如果这个容器坏了，起不来了，需要重复执行什么的操作，</p><p>方法一：把正在运行的容器打成一个镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1、新开一个窗口操作</span><br><span class="line">[root@docker01 ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                               NAMES</span><br><span class="line">76a4b880872b   nginx:alpine   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   22 minutes ago   Up 22 minutes   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   funny_sinoussi</span><br><span class="line"></span><br><span class="line">2、#把正在运行的容器打成一个镜像</span><br><span class="line">[root@docker01 ~]# docker commit 76a4b880872b h5:v1</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">h5           v1        6fcc45b1c065   51 seconds ago   89.9MB</span><br><span class="line"></span><br><span class="line">3、把正在运行的容器删除</span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">rm</span> -f $(docker ps -qa)</span><br><span class="line">76a4b880872b</span><br><span class="line"></span><br><span class="line">4、现在没有任何容器运行，将打的镜像导入</span><br><span class="line">导入在本地运行：docker run -p80:80 -d h5:v1</span><br><span class="line">导出到其他机器运行：</span><br><span class="line">docker save h5:v1 -o /tmp/h5.tgz</span><br><span class="line">scp /tmp/h5.tgz 10.0.0.102:/tmp</span><br><span class="line">docker load &lt; /tmp/h5.tgz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、运行导入的容器</span><br><span class="line">[root@docker02 ~]# docker run -p80:80 -d h5:v1</span><br><span class="line"></span><br><span class="line">6、浏览器访问</span><br><span class="line">10.0.0.102/h5_games</span><br></pre></td></tr></table></figure><p>方法二：可以使用文件映射</p><h3 id="5、Docker容器文件映射">5、<strong>Docker容器文件映射</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-v ：数据卷映射 </span><br><span class="line">-v ：宿主机绝对路径:容器绝对路径  (常用)</span><br><span class="line">-v ：容器目录     <span class="comment">#创建一个随机卷,来持久化容器的目录下的数据，适合保存变化的数据</span></span><br><span class="line">-v ：卷名:容器目录 <span class="comment">#创建一个固定名字的卷,来持久化容器的目录下的数据，适合数据共享</span></span><br><span class="line"></span><br><span class="line">1、#制作一个数据卷映射</span><br><span class="line">[root@docker02 ~]# docker run --name h5 -p 80:80 -v  /code/h5_games:/usr/share/nginx/html -d nginx:alpine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、code目录会自动创建，只需要将代码解压到code目录</span><br><span class="line">[root@docker02 ~]# unzip h5_games.zip -d /code/</span><br><span class="line">[root@docker02 ~]# <span class="built_in">ls</span> /code/h5_games/</span><br><span class="line">ceshi  game  img  index.html  readme.txt</span><br><span class="line"></span><br><span class="line">3、连接进去,并查看站点目录是否存在代码</span><br><span class="line">[root@docker02 ~]# docker <span class="built_in">exec</span> -it h5 /bin/sh</span><br><span class="line">/ <span class="comment"># ls /usr/share/nginx/html</span></span><br><span class="line">ceshi       game        img         index.html  readme.txt</span><br><span class="line"></span><br><span class="line">4、访问网页</span><br><span class="line">10.0.0.102   出现小游戏的页面就映射完成</span><br></pre></td></tr></table></figure><h3 id="6、手动制作h5小游戏的镜像">6、<strong>手动制作h5小游戏的镜像</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">1、运行一个基础镜像并连进去</span><br><span class="line">[root@docker01 ~]# docker run -it centos:7 /bin/bash</span><br><span class="line"></span><br><span class="line">2、因为使用centos镜像，里面没有nginx,需要安装nginx</span><br><span class="line">[root@afc3071510f6 /]#  yum -y install nginx</span><br><span class="line">发现没有源</span><br><span class="line"></span><br><span class="line">3、换源</span><br><span class="line">[root@afc3071510f6 /]#  curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-7-anon.repo</span><br><span class="line">[root@afc3071510f6 /]#  curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"></span><br><span class="line">4、优化源</span><br><span class="line">[root@afc3071510f6 /]# vi /etc/yum.repos.d/CentOS-Base.repo  </span><br><span class="line">[updates]</span><br><span class="line">....</span><br><span class="line">enabled=0</span><br><span class="line"></span><br><span class="line">5、下载nginx</span><br><span class="line">[root@afc3071510f6 /]# yum -y install nginx</span><br><span class="line"></span><br><span class="line">6、清空站点目录</span><br><span class="line">[root@afc3071510f6 /]# <span class="built_in">rm</span> -rf /usr/share/nginx/html/*</span><br><span class="line"></span><br><span class="line">7、新开一个窗口，将解压代码上传到容器的站点目录</span><br><span class="line">root@docker01 ~]# unzip h5_games.zip </span><br><span class="line">[root@docker01 ~]# docker <span class="built_in">cp</span> h5_games afc3071510f6:/usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">8、容器查看代码上传成功，并把代码移动到站点目录</span><br><span class="line">[root@afc3071510f6 /]# <span class="built_in">mv</span> /usr/share/nginx/html/h5_games/* /usr/share/nginx/html/</span><br><span class="line">[root@afc3071510f6 /]# <span class="built_in">ls</span> /usr/share/nginx/html/</span><br><span class="line">ceshi  game  h5_games  img  index.html  readme.txt</span><br><span class="line"></span><br><span class="line">9、启动nginx  curl一下是否成功</span><br><span class="line">[root@afc3071510f6 /]# nginx</span><br><span class="line">[root@afc3071510f6 /]# curl 127.0.0.1</span><br><span class="line"></span><br><span class="line">10、如果现在退出进行，这个容器就会退出，nginx就会结束，这个镜像相当于没起nginx,没有办法让这个容器起来</span><br><span class="line">[root@docker01 ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE      COMMAND       CREATED          STATUS                     PORTS     NAMES</span><br><span class="line">afc3071510f6   centos:7   <span class="string">&quot;/bin/bash&quot;</span>   24 minutes ago   Exited (0) 8 seconds ago             friendly_wozniak</span><br><span class="line"></span><br><span class="line">11、打镜像</span><br><span class="line">[root@docker01 ~]# docker commit afc3071510f6 h5_game:v2</span><br><span class="line"></span><br><span class="line">12、运行这个镜像</span><br><span class="line">[root@docker01 ~]# docker run --name h5 -p 80:80 -d h5_game:v2 /sbin/nginx -g <span class="string">&#x27;daemon off;&#x27;</span></span><br><span class="line"></span><br><span class="line">/sbin/nginx：nginx启动</span><br><span class="line">daemon off;：卡主</span><br><span class="line"></span><br><span class="line">13、浏览器访问网页</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">1.体积太大</span><br><span class="line">2.启动不方便</span><br><span class="line">3.无法直接修改CMD</span><br><span class="line">4.没有声明端口</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240903185831846.png" alt="image-20240903185831846"></p>]]></content>
    
    
    <summary type="html">本文汇总对镜像和容器的一些基本操作，希望小伙伴可以跟着文章练习后，会对镜像和容器有一定的了解</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>一、🍡Docker容器的介绍和部署</title>
    <link href="https://www.fomal.cc/posts/a56cb35d.html"/>
    <id>https://www.fomal.cc/posts/a56cb35d.html</id>
    <published>2024-09-22T04:51:53.000Z</published>
    <updated>2024-09-22T07:53:34.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker容器">docker容器</h2><p>Docker便用G00g1e公司推出WG0语言进行开友实现，基于操作条统内孩中时Cgroup(贷源控制)NameSpace(资源隔离)与0verlayFS(数据存储)等技术，实现基于操作系统层面的(应用)虚拟化技术,<br>最初实现是基于LXC技术，从0.7版本以后开始去除LXC，转而使用自行开发的libcontainer(容器管理技术)。</p><p>容器技术发展架构图：</p><p><img src="../image/study_img/image-20240902083945201.png" alt="image-20240902083945201"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">为什么有云平台：因为方便快捷，还便宜</span><br><span class="line">购买物理机，不仅还要买服务器，还要租机房</span><br><span class="line"></span><br><span class="line">VMware Workstation:虚拟化工具，启动虚拟机的，使用的编排工具是的：Vcenter server</span><br><span class="line">KVM：虚拟化工具，启动虚拟机的    使用的编排工具是的：OpenStack</span><br><span class="line">Docker：容器化工具，容器运行时   使用的编排工具是的：(docker自己写的编排工具)Docker-swarm、mesos、kubernetes(最灵活的,常用的)</span><br><span class="line">K8s,谷歌的产品</span><br><span class="line"></span><br><span class="line">编排工具的作用：使部署虚拟化的产品变成一个集群</span><br><span class="line"></span><br><span class="line">下载一个工具 tightVNC ,就可以连接虚拟机里面创建的虚拟机了</span><br></pre></td></tr></table></figure><p>容器与虚拟机对比<br>传统虚拟化和docker分层对比</p><p><img src="../image/study_img/image-20240902092008550.png" alt="image-20240902092008550"></p><p>容器化产品概念</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#内核的技术  (系统是在内核的基础上封装出来的)</span></span><br><span class="line">Namespace：名称空间，命名空间(作用是：资源隔离)起一个容器就是起一个进程，然后再做资源隔离</span><br><span class="line">Cgroup：资源控制、资源计算</span><br><span class="line"></span><br><span class="line">docker是调用内核接口的工具</span><br></pre></td></tr></table></figure><p>VM虚拟化和Docker特性对比</p><table><thead><tr><th>特性</th><th>Docker</th><th>VM</th></tr></thead><tbody><tr><td>启动速度</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>一般为MB</td><td>一般为GB</td></tr><tr><td>性能</td><td>接近原生单机支持上千个容器</td><td>弱于原生</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr><tr><td>隔离性</td><td>安全隔离</td><td>完全隔离</td></tr></tbody></table><p>容器化产品的概念</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Container Runtime：容器运行时</span></span><br><span class="line">- docker</span><br><span class="line">- CRI-O</span><br><span class="line">- containerd</span><br><span class="line"></span><br><span class="line"><span class="comment">## 内核技术</span></span><br><span class="line">Namespace：名称空间，命名空间（资源隔离）https://man7.org/linux/man-pages/man7/namespaces.7.html</span><br><span class="line"></span><br><span class="line">Cgroup：资源控制、资源计算 https://man7.org/linux/man-pages/man7/cgroups.7.html</span><br><span class="line"></span><br><span class="line">资源限制：例如设定任务指定内存</span><br><span class="line">优先级分配：比如跟任务分配的CPU时间，片数，磁盘IO，带宽大小来控制任务的优先级</span><br><span class="line">资源统计：统计CPU，内存，IO等资源使用时长，该功能比较适合用于计费</span><br><span class="line">任务控制：cgroup可以对任务进行 运行，挂起，恢复等操作</span><br></pre></td></tr></table></figure><h3 id="1、Docker的三个概念">1、<strong>Docker的三个概念</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#images(镜像)</span></span><br><span class="line">Docker镜像可以看做是一个特殊的文件系统，除了提供容器运行时所需要的程序、库、资源、配置文件以外，还包合了一些为运行时，准备的配置参数(匿名卷，环境变量，用户...),镜像是不可更改的</span><br><span class="line">Docker容器的储存方式：通过overlayFS文件系统进行储存</span><br><span class="line">upper</span><br><span class="line">lower</span><br><span class="line">merge</span><br><span class="line"></span><br><span class="line">为了环境的统一，方便统一管理</span><br><span class="line"></span><br><span class="line"><span class="comment">#Container(容器)</span></span><br><span class="line">容器的定义和镜像，几乎是一模一样，唯一区别在于容器的最上面那一层是可读可写的。</span><br><span class="line">(类似于用Docker1起的一台虚拟机)</span><br><span class="line">理解：一个容器就是一台虚拟机</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Repository(仓库)</span></span><br><span class="line">上传镜像，存放镜像</span><br><span class="line"></span><br><span class="line">仓库是Docker用来存放镜像的地方，类似于我们之前常用的代码仓库。</span><br><span class="line">通常一个仓库会包含，同一个软件，不同版本的镜像</span><br><span class="line">我们可以通过&lt;仓库名&gt;:&lt;标签&gt;格式来指定具体使用哪个版本的镜像，如果不给标签，那么默认以Latest作为默认标签</span><br><span class="line"></span><br><span class="line"><span class="comment">#docker的仓库有2种</span></span><br><span class="line">1、Harbor   图形化仓库</span><br><span class="line">2、Registry 命令行仓库</span><br></pre></td></tr></table></figure><h3 id="2、Docker的组成">2、<strong>Docker的组成</strong></h3><p>Docker是C/S结构的服务    <code>docker client</code> 和 <code>docker server</code></p><p>Docker客户端是Docker用户与Docker交互的主要方式<br>当使用Docker命令行运行命令时，Docker客户端将这些命令发送给服务端，服务端执行这些命令Docker命令使用DockerAPI<br>Docker客户端可以与多个服务端进行通讯</p><p><img src="../image/study_img/image-20240902110827668.png" alt="image-20240902110827668"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Docker的客户端：</span><br><span class="line">- 命令行 docker</span><br><span class="line">- 图形化 dashboard(UI界面)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">用户———&gt;使用docker客户端———&gt;调用DOcker的接口———&gt;连接到DOcker server——&gt;调用内核Namespace、cgroup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#稳定的版本</span></span><br><span class="line">docker 19.3</span><br><span class="line">k8 1.19</span><br><span class="line"></span><br><span class="line">为什么</span><br><span class="line">下了一个nginx容器，想让他变成web服务器</span><br></pre></td></tr></table></figure><h3 id="3、部署DOcker">3、<strong>部署DOcker</strong></h3><p>1、安装docker-ce</p><p>环境准备</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th></tr></thead><tbody><tr><td>docker01</td><td>10.0.0.101  /  172.16.1.101</td><td></td></tr><tr><td>docker02</td><td>10.0.0.102  /  172.16.1.102</td><td></td></tr><tr><td>docker03</td><td>10.0.0.103  /  172.16.1.103</td><td></td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1、卸载之前安装的DOcker</span><br><span class="line">yum remove docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-engine</span><br><span class="line"></span><br><span class="line">2、换源</span><br><span class="line">[root@docker01 ~]# vim /etc/yum.repos.d/docker-ce.repo </span><br><span class="line">[docker-ce-stable]</span><br><span class="line">name=Docker CE Stable - <span class="variable">$basearch</span></span><br><span class="line">baseurl=https://download.docker.com/linux/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/stable</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# sed -i <span class="string">&#x27;s+download.docker.com+mirrors.huaweicloud.com/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">3、下载docker</span><br><span class="line">[root@docker01 ~]# yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>如果下载的慢，把base源里面的updat关闭</p><p>[root@docker03 ~]# vim /etc/yum.repos.d/CentOS-Base.repo</p><p><img src="../image/study_img/image-20240902114920501.png" alt="image-20240902114920501"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">4、启动</span><br><span class="line">[root@docker01 ~]# systemctl start docker</span><br><span class="line">[root@docker01 ~]# systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line">5、查看docker信息</span><br><span class="line">[root@docker01 ~]# docker info</span><br><span class="line"></span><br><span class="line">Docker Root Dir: /var/lib/docker  <span class="comment">#Docker的储存目录(工作目录)</span></span><br><span class="line"></span><br><span class="line">6、启动docker就会生成一个socket文件</span><br><span class="line">[root@docker01 ~]# ll /var/run/docker.sock </span><br><span class="line">srw-rw---- 1 root docker 0 Sep  2 12:17 /var/run/docker.sock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7、加速镜像</span><br><span class="line">[root@docker01 ~]# <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">[root@docker01 ~]# <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;dns&quot;</span>: [<span class="string">&quot;8.8.8.8&quot;</span>, <span class="string">&quot;8.8.4.4&quot;</span>],</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://dockerproxy.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.nju.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://mirror.baidubce.com&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">备用加速：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>:[<span class="string">&quot;https://docker.1panel.live&quot;</span>, <span class="string">&quot;https://hub.rat.dev/&quot;</span>, <span class="string">&quot;https://docker.chenby.cn&quot;</span>, <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# systemctl daemon-reload</span><br><span class="line">[root@docker01 ~]# systemctl restart docker</span><br><span class="line"></span><br><span class="line">8、测试拉取nginx镜像</span><br><span class="line">[root@docker02 ~]# docker pull nginx</span><br><span class="line">等待2分钟才拉取的下来</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]# docker pull nginx:alpine     (最小的操作系统alpine)</span><br><span class="line">[root@docker01 ~]# docker pull nginx:latest</span><br><span class="line">[root@docker01 ~]# docker pull busybox</span><br><span class="line"></span><br><span class="line">9、查看拉取的镜像</span><br><span class="line">[root@docker01 ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx        alpine    0f0eda053dc5   2 weeks ago     43.3MB</span><br><span class="line">nginx        latest    5ef79149e0ec   2 weeks ago     188MB</span><br><span class="line">busybox      latest    87ff76f62d36   15 months ago   4.26MB</span><br><span class="line">centos       7         eeb6ee3f44bd   2 years ago     204MB</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">认识docker,部署docker</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>MHA高可用</title>
    <link href="https://www.fomal.cc/posts/74c516b4.html"/>
    <id>https://www.fomal.cc/posts/74c516b4.html</id>
    <published>2024-09-21T09:46:27.000Z</published>
    <updated>2024-09-22T04:28:07.157Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MHA高可用">MHA高可用</h2><h3 id="1、MHA软件介绍"><strong>1、MHA软件介绍</strong></h3><p><font color=red>原理：当Master出现故障时，它可以自动将最新数据的Slave提升为新的Master,然后将所有其他的Slave重新指向新的Master。</font></p><p>MHA能够在较短的时间内实现自动故障检测和故障转移，通常在10-30秒以内;在复制框架中，MHA能够很好地解决复制过程中的数据一致性问题，由于不需要在现有的replication中添加额外的服务器，仅需要一个manager节点，而一个Manager能管理多套复制，所以能大大地节约服务器的数量;另外，安装简单，无性能损耗，以及不需要修改现有的复制部署也是它的优势之处。</p><p><img src="../image/study_img/image-20240827090218613.png" alt="image-20240827090218613"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">从库不更新binlog,只更新relay-log,这个可以解决的，可以配置让他更新binlog,加参数</span><br><span class="line"></span><br><span class="line">Rvs就是阿里云上的数据库，ecs是云主机</span><br><span class="line"></span><br><span class="line">Heartbeat+DRBD  也是做高可用的 心跳检测</span><br><span class="line"></span><br><span class="line">MHA的manager最好不要安装在主库上，就怕断电了，mha不能工作，安装在3台从库上可以，或者重新找一台新机器安装MHA(MHA就是一个监控软件。监控主库心跳的)</span><br></pre></td></tr></table></figure><p><strong>工作流程</strong></p><p>1)把宕机的master二进制日志保存下来。<br>2)找到binlog位置点最新的slave。<br>3)在binlog位置点最新的slave上用relay log（差异日志）修复其它slave。<br>4)将宕机的master上保存下来的二进制日志恢复到含有最新位置点的slave上。<br>5)将含有最新位置点binlog所在的slave提升为master。<br>6)将其它slave重新指向新提升的master，并开启主从复制。</p><p><img src="../image/study_img/image-20240827093920829.png" alt="image-20240827093920829"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">keepalived有局限性，他怎么知道哪台机器的数据最新？</span><br><span class="line"></span><br><span class="line">MHA做完切换，运维无感知，需要有一个通知，MHA自带一个通知工具</span><br><span class="line"></span><br><span class="line">问题：</span><br><span class="line">1、binlog的保存位置在哪       (谁被提升为主库就发缺失数据送给谁)</span><br><span class="line">2、down机的主库修复好之后，如何加入集群？</span><br><span class="line">3、down机的主库修复好之后，加入集群的角色是什么？</span><br></pre></td></tr></table></figure><h3 id="2、MHA架构图"><strong>2、MHA架构图</strong></h3><p><img src="../image/study_img/image-20240827101716633.png" alt="image-20240827101716633"></p><p><strong>MHA的工具</strong></p><p>MHA node的工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@dbe1 bin]# 11</span><br><span class="line">-rwxrwxr-x1 root root 17639 Mar 23 2018 apply_diff relay_logs      <span class="comment">#对比relay log,找到新主库</span></span><br><span class="line">-rwxrwxr-x 1 root root 4807 Mar 23 2018 filter mysqlbinlog         <span class="comment">#截取binlog</span></span><br><span class="line">-rwxrwxr-x 1 root root 8337 Mar 23 2018 purge_relay_logs           <span class="comment">#删除relay log</span></span><br><span class="line">-rwxrwxr-x 1 root root 7525 Mar 23 2018 save binary logs           <span class="comment">#保存binlog</span></span><br></pre></td></tr></table></figure><p>MHA manager</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  manager里面的工具程序会自动调用，也可以手动执行</span></span><br><span class="line"></span><br><span class="line">[root@dbe1 bin]# 11</span><br><span class="line">-rwxrwxr-x 1 root root 1995 Mar 232018 masterha_check_repl          <span class="comment">#检测主从复制</span></span><br><span class="line">-rwxrwxr-x 1 root root 1779 Mar 232018 masterha_check_ssh           <span class="comment">#检测ssh免密</span></span><br><span class="line">-rwxrwxr-x 1 root root 1865 Mar 232018 masterha_check_status        <span class="comment">#检测mha的运行状态(相当于systemctl status mha)</span></span><br><span class="line">-rwxrwxr-x 1 root root 3201 Mar 232018 masterha_conf_host           <span class="comment">#mha虚拟主机配置(MHA做完切换后，会将宕机主库从配置文件中摘除)</span></span><br><span class="line">-rwxrwxr-x 1 root root 2517 Mar 232018 masterha_manager             <span class="comment">#MHA的启动命令(相当于systemctl start mha)</span></span><br><span class="line">-rwxrwxr-x 1 root root 2165 Mar 232018 masterha_master_monitor      <span class="comment">#检测主库心跳</span></span><br><span class="line">-rwxrwxr-x 1 root root 2373 Mar 232018 masterha_master_switch       <span class="comment">#切换工具</span></span><br><span class="line">-rwxrwxr-x 1 root root 5172 Mar 232018 masterha_secondary_check     <span class="comment">#检测ICP/IP连接</span></span><br><span class="line">-rwxrwxr-x 1 root root 1739 Mar 232018 masterha_stop                <span class="comment">#停止MHA的命令(相当于systemctl stop mha)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#/root/mha4mysgl-manager-0.58/samples/scripts</span></span><br><span class="line">-rwxrwxr-x 1 root root  3648 Mar 23 2018 master_ip_failover</span><br><span class="line">-rwxrwxr-x 1 root root  9870 Mar 23 2018 master_ip_online_change</span><br><span class="line">-rwxrwxr-x 1 root root 11867 Mar 23 2018 power_manager</span><br><span class="line">-rwxrwxr-x 1 root root  1360 Mar 23 2818 send_report</span><br></pre></td></tr></table></figure><p>MHA优点总结</p><p>1）Masterfailover and slave promotion can be done very quickly<br>自动故障转移快</p><p>2）Mastercrash does not result in data inconsistency<br>主库崩溃不存在数据一致性问题</p><p>3）Noneed to modify current MySQL settings (MHA works with regular MySQL)<br>不需要对当前mysql环境做重大修改</p><p>4）Noneed to increase lots of servers<br>不需要添加额外的服务器(仅一台manager就可管理上百个replication)</p><p>5）Noperformance penalty<br>性能优秀，可工作在半同步复制和异步复制，当监控mysql状态时，仅需要每隔N秒向master发送ping包(默认3秒)，所以对性能无影响。你可以理解为MHA的性能和简单的主从复制框架性能一样。</p><p>6）Works with any storage engine<br>只要replication支持的存储引擎，MHA都支持，不会局限于innodb</p><h3 id="3、部署MHA"><strong>3、部署MHA</strong></h3><p>环境准备</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th><th>应用</th></tr></thead><tbody><tr><td>db01</td><td>10.0.0.51  /  172.16.1.51</td><td>暂时的主库、MHA客户端</td><td>mysql 5.6、MHA node</td></tr><tr><td>db02</td><td>10.0.0.52  /  172.16.1.52</td><td>暂时的从库、MHA客户端</td><td>mysql 5.6、MHA node</td></tr><tr><td>db03</td><td>10.0.0.53  /  172.16.1.53</td><td>暂时的从库、MHA客户端</td><td>mysql 5.6、MHA node</td></tr><tr><td>db04</td><td>10.0.0.54 /  172.16.1.54</td><td>暂时的从库、MHA客户端</td><td>mysql 5.6、MHA node</td></tr><tr><td>lb01</td><td>10.0.0.5 /  172.16.1.5</td><td>MHA的管理端</td><td>MHA manager、mariadb</td></tr></tbody></table><p>1、MHA先决条件，需要先部署主从</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#传统主从复制</span></span><br><span class="line">1、主库开启binlog,主库不开</span><br><span class="line">2、主库和从库server_id不同，从库之间可以相同</span><br><span class="line">3、主库要创建主从复制用户，从库可以不创建</span><br><span class="line"></span><br><span class="line"><span class="comment">#基于MHA的主从复制</span></span><br><span class="line">1、主库、从库也要开启binlog</span><br><span class="line">2、主库、从库server_id不同，从库之间也不能相同</span><br><span class="line">3、主库、从库必须创建主从复制用户</span><br><span class="line">4、关闭只读</span><br><span class="line"></span><br><span class="line">1、主库配置文件</span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/app/mysql-5.6.50</span><br><span class="line">datadir=/app/mysql-5.6.50/data</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">server_id=1</span><br><span class="line">lower_case_table=1</span><br><span class="line">innodb_data_file_path=ibdata1:76M;ibdata2:50M:autoextend</span><br><span class="line">binlog_format=row</span><br><span class="line"><span class="comment">#指定是否开启慢查询日志</span></span><br><span class="line">slow_query_log=1</span><br><span class="line"><span class="comment">#指定慢日志文件存放位置（默认在data）</span></span><br><span class="line">slow_query_log_file=/app/mysql-5.6.50/data/db01-slow.log</span><br><span class="line"><span class="comment">#设定慢查询的阀值(默认10s)</span></span><br><span class="line">long_query_time=0.05</span><br><span class="line"><span class="comment">#不使用索引的慢查询语句是否记录到日志</span></span><br><span class="line">log_queries_not_using_indexes</span><br><span class="line"><span class="comment">#查询检查返回少于该参数指定行的SQL不被记录到慢查询日志  （鸡肋）</span></span><br><span class="line">min_examined_row_limit=100</span><br><span class="line">skip_name_resolve</span><br><span class="line">relay_log_purge = 0</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">prompt=<span class="string">&quot;\\u@\\h:\\d &gt; &quot;</span></span><br><span class="line"></span><br><span class="line">[root@db01 ~]# /etc/init.d/mysqld restart</span><br><span class="line">创建用户</span><br><span class="line">grant replication slave on *.* to rep@<span class="string">&#x27;172.16.1.5%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、从库配置文件</span><br><span class="line"><span class="comment">#db02</span></span><br><span class="line">[root@db02 data]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/app/mysql-5.6.50</span><br><span class="line">datadir=/app/mysql-5.6.50/data</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">server_id=2</span><br><span class="line">lower_case_table=1</span><br><span class="line"><span class="comment">#innodb_data_file_path=ibdata1:12M;ibdata2:50M:autoextend</span></span><br><span class="line">binlog_format=row</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">skip-name-resolve</span><br><span class="line">relay_log_purge = 0</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">[mysql]</span><br><span class="line">prompt=<span class="string">&quot;\\u@\\h:\\d &gt; &quot;</span></span><br><span class="line"></span><br><span class="line">[root@db02 data]#  /etc/init.d/mysqld restart</span><br><span class="line">创建用户</span><br><span class="line">grant replication slave on *.* to rep@<span class="string">&#x27;172.16.1.5%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#db03</span></span><br><span class="line">[root@db03 data]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/app/mysql-5.6.50</span><br><span class="line">datadir=/app/mysql-5.6.50/data</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">server_id=3</span><br><span class="line">lower_case_table=1</span><br><span class="line"><span class="comment">#innodb_data_file_path=ibdata1:12M;ibdata2:50M:autoextend</span></span><br><span class="line">binlog_format=row</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">skip-name-resolve</span><br><span class="line">relay_log_purge = 0</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">[mysql]</span><br><span class="line">prompt=<span class="string">&quot;\\u@\\h:\\d &gt; &quot;</span></span><br><span class="line"></span><br><span class="line">[root@db03 data]#  /etc/init.d/mysqld restart</span><br><span class="line">创建用户</span><br><span class="line">grant replication slave on *.* to rep@<span class="string">&#x27;172.16.1.5%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#db04</span></span><br><span class="line">[root@db04 data]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/app/mysql-5.6.50</span><br><span class="line">datadir=/app/mysql-5.6.50/data</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">server_id=4</span><br><span class="line">lower_case_table=1</span><br><span class="line"><span class="comment">#innodb_data_file_path=ibdata1:12M;ibdata2:50M:autoextend</span></span><br><span class="line">binlog_format=row</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">skip-name-resolve</span><br><span class="line">relay_log_purge = 0</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">[mysql]</span><br><span class="line">prompt=<span class="string">&quot;\\u@\\h:\\d &gt; &quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@db04 data]#  /etc/init.d/mysqld restart</span><br><span class="line">创建用户</span><br><span class="line">grant replication slave on *.* to rep@<span class="string">&#x27;172.16.1.5%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、#3台从库设置只读，(在命令行临时设置)，不能在配置文件设置，(mha切换的时候会重启mysql,让只读重启失效，临时设置重启会失效)</span><br><span class="line">root@localhost:(none) &gt; <span class="built_in">set</span> global read_only=1;</span><br><span class="line"></span><br><span class="line">4、#4台数据库关闭relay-log自动删除功能(临时生效)</span><br><span class="line">root@localhost:(none) &gt; <span class="built_in">set</span> global relay_log_purge = 0;</span><br><span class="line"></span><br><span class="line"><span class="comment">#临时+永久，不用重启    (永久生效)</span></span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">relay_log_purge=0</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">relay_log_purge=0</span><br><span class="line"></span><br><span class="line">[root@db03 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">relay_log_purge=0</span><br><span class="line"></span><br><span class="line">[root@db04 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">relay_log_purge=0</span><br></pre></td></tr></table></figure><p>2、安装node、manager、ssh免密</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysql5.6版本使用 0.56版本的mha</span></span><br><span class="line">wget http://test.driverzeng.com/MySQL_plugins/mha4mysql-manager-0.56-0.el6.noarch.rpm</span><br><span class="line"></span><br><span class="line">wget http://test.driverzeng.com/MySQL_plugins/mha4mysql-node-0.56-0.el6.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql5.7版本使用 0.58版本的mha</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、推送node包在各台机器</span><br><span class="line">[root@db01 ~]# <span class="keyword">for</span> i <span class="keyword">in</span> 5 52 53 54;<span class="keyword">do</span> scp mha4mysql-node-0.56-0.el7.centos.noarch.rpm 172.16.1.<span class="variable">$i</span>:/root;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">2、5台机器安装node</span><br><span class="line">[root@db03 ~]# yum -y localinstall mha4mysql-node-0.56-0.el6.noarch.rpm </span><br><span class="line"></span><br><span class="line">3、(lb01) mha管理机安装manager</span><br><span class="line">[root@lb01 ~]# yum -y localinstall mha4mysql-manager-0.56-0.el6.noarch.rpm</span><br><span class="line"></span><br><span class="line">[root@lb01 ~]# rpm -qa |grep mha</span><br><span class="line">mha4mysql-manager-0.56-0.el6.noarch</span><br><span class="line">mha4mysql-node-0.56-0.el6.noarch</span><br><span class="line"></span><br><span class="line">4、4台机器做软连接</span><br><span class="line">[root@db01 ~]# <span class="built_in">ln</span> -s /app/mysql-5.6.50/bin/mysqlbinlog  /usr/bin/mysqlbin;<span class="built_in">ln</span> -s /app/mysql-5.6.50/bin/mysql  /usr/bin/mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、5台机器做免密，自己也要给自己做免密</span><br><span class="line"><span class="comment">#生成密钥对</span></span><br><span class="line">ssh-keygen -t dsa -P <span class="string">&#x27;&#x27;</span> -f ~/.ssh/id_dsa &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment">#推送公钥</span></span><br><span class="line">[root@db01 ~]# ssh-copy-id -i ~/.ssh/id_dsa.pub root@172.16.1.5</span><br><span class="line">[root@db01 ~]# ssh-copy-id -i ~/.ssh/id_dsa.pub root@172.16.1.51</span><br><span class="line">[root@db01 ~]# ssh-copy-id -i ~/.ssh/id_dsa.pub root@172.16.1.52</span><br><span class="line">[root@db01 ~]# ssh-copy-id -i ~/.ssh/id_dsa.pub root@172.16.1.53</span><br><span class="line">[root@db01 ~]# ssh-copy-id -i ~/.ssh/id_dsa.pub root@172.16.1.54</span><br><span class="line"></span><br><span class="line"><span class="comment">#检测是否免密成功</span></span><br><span class="line">[root@db01 ~]# <span class="keyword">for</span> i <span class="keyword">in</span> 5 51 52 53 54;<span class="keyword">do</span> ssh root@172.16.1.<span class="variable">$i</span> <span class="string">&quot;ifconfig|awk &#x27;NR==2&#123;print <span class="variable">$2</span>&#125;&#x27;&quot;</span>;<span class="keyword">done</span></span><br><span class="line">输出信息就免密成功</span><br><span class="line">        inet 10.0.0.5  netmask 255.255.255.0  broadcast 10.0.0.255</span><br><span class="line">        inet 10.0.0.51  netmask 255.255.255.0  broadcast 10.0.0.255</span><br><span class="line">        inet 10.0.0.52  netmask 255.255.255.0  broadcast 10.0.0.255</span><br><span class="line">        inet 10.0.0.53  netmask 255.255.255.0  broadcast 10.0.0.255</span><br><span class="line">        inet 10.0.0.54  netmask 255.255.255.0  broadcast 10.0.0.255</span><br></pre></td></tr></table></figure><p>3、配置MHA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">1、创建MHA配置文件存放目录</span><br><span class="line">[root@lb01 ~]# <span class="built_in">mkdir</span> /etc/mha</span><br><span class="line"></span><br><span class="line">2、编写配置文件      <span class="comment">#app1是项目名</span></span><br><span class="line">[root@lb01 ~]# vim /etc/mha/app1.cnf    </span><br><span class="line">[server default]</span><br><span class="line">manager_log=/etc/mha/logs/manager.log</span><br><span class="line">manager_workdir=/etc/mha/app1</span><br><span class="line">master_binlog_dir=/app/mysql-5.6.50/data</span><br><span class="line">user=mha</span><br><span class="line">password=mha</span><br><span class="line"><span class="comment">#心跳检测间隔时间2s检测一次</span></span><br><span class="line">ping_interval=2</span><br><span class="line">repl_password=123</span><br><span class="line">repl_user=rep</span><br><span class="line">ssh_user=root</span><br><span class="line">ssh_port=22</span><br><span class="line"></span><br><span class="line">[server1]</span><br><span class="line">hostname=172.16.1.51</span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">[server2]</span><br><span class="line"><span class="comment">#candidate_master=1</span></span><br><span class="line"><span class="comment">#check_repl_delay=0</span></span><br><span class="line">hostname=172.16.1.52</span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">[server3]</span><br><span class="line">hostname=172.16.1.53</span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">[server4]</span><br><span class="line">hostname=172.16.1.54</span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">3、db01主库创建mha的管理用户,其他从库做了主从复制，会把这个用户复制过去</span><br><span class="line">grant all on *.* to mha@<span class="string">&#x27;172.16.1.%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">4、创建工作目录、日志目录</span><br><span class="line">[root@lb01 ~]# <span class="built_in">mkdir</span> /etc/mha/&#123;logs,app1&#125;</span><br><span class="line">[root@lb01 ~]# ll /etc/mha/</span><br><span class="line">drwxr-xr-x 2 root root   6 Aug 27 20:20 app1</span><br><span class="line">-rw-r--r-- 1 root root 449 Aug 27 20:17 app1.cnf</span><br><span class="line">drwxr-xr-x 2 root root   6 Aug 27 20:20 logs</span><br><span class="line"></span><br><span class="line">4、检测MHA的SSH免密</span><br><span class="line">[root@lb01 ~]#  masterha_check_ssh --conf=/etc/mha/app1.cnf</span><br><span class="line"></span><br><span class="line">5、每次启动前先检测mha的主从复制</span><br><span class="line">[root@lb01 ~]#  masterha_check_repl --conf=/etc/mha/app1.cnf</span><br></pre></td></tr></table></figure><p>检测免密结果显示成功</p><p><img src="../image/study_img/image-20240827150707399.png" alt="image-20240827150707399"></p><p>检测mha的主从复制OK</p><p><img src="../image/study_img/image-20240827150324053.png" alt="image-20240827150324053"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">7、启动MHA</span><br><span class="line">[root@lb01 ~]# <span class="built_in">nohup</span> masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /etc/mha/logs/manager.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">masterha_manager：         启动命令</span><br><span class="line">--conf=/etc/mha/app1.cnf： 指定配置文件</span><br><span class="line">--remove_dead_master_conf：做完切换后，从配置文件中摘除宕机的主库</span><br><span class="line">--ignore_last_failover：   忽略上一次切换(切换完了，不生产锁文件)</span><br><span class="line"></span><br><span class="line"><span class="comment">#MHA切换机制：</span></span><br><span class="line">1).MHA在做一次切换后，会生成一个锁文件（app1.failover.complete）在工作目录，8个小时之内，无法做第二次切换    生成锁文件的目的(下一次切换的时候会看一下这个锁文件是否存在，锁文件存在不切换，这个锁文件会存在8小时)</span><br><span class="line">2).MHA切换完成后，会自动结束MHA的进程</span><br><span class="line">[root@lb01 ~]# ll /etc/mha/app1</span><br><span class="line">-rw-r--r-- 1 root root    0 Aug 28 11:25 app1.failover.complete</span><br><span class="line"><span class="comment">#选主机制</span></span><br><span class="line">1).在所有从库相同时，MHA会选择配置文件中server标签<span class="built_in">id</span>最小的作为主库</span><br><span class="line"></span><br><span class="line">8、启动后检查</span><br><span class="line">[root@lb01 ~]# masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line">显示结果就OK：</span><br><span class="line">app1 (pid:18582) is running(0:PING_OK), master:172.16.1.51</span><br><span class="line"><span class="comment">#项目(配置文件名)                         主库IP</span></span><br></pre></td></tr></table></figure><p>4、使用systemd管理MHA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1、停止mha</span><br><span class="line">[root@lb01 ~]# masterha_stop --conf=/etc/mha/app1.cnf</span><br><span class="line"></span><br><span class="line">2、使用systemctl管理</span><br><span class="line">[root@lb01 ~]# vim /usr/lib/systemd/system/mha.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=MHA</span><br><span class="line">After=network.target sshd-keygen.service</span><br><span class="line">Wants=sshd-keygen.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=sample</span><br><span class="line">ExecStart=/usr/bin/masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover &gt; /etc/mha/logs/manager.log</span><br><span class="line">ExecStop=/usr/bin/masterha_stop --conf=/etc/mha/app1.cnf</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">[root@lb01 ~]# systemctl daemon-reload</span><br><span class="line">[root@lb01 ~]# systemctl start mha</span><br><span class="line">[root@lb01 ~]# systemctl <span class="built_in">enable</span> mha</span><br><span class="line"></span><br><span class="line">3、启动后检查</span><br><span class="line">[root@lb01 ~]# masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line">app1 (pid:19243) is running(0:PING_OK), master:172.16.1.51</span><br></pre></td></tr></table></figure><h3 id="4、MHA日志分析"><strong>4、MHA日志分析</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@lb01 ~]# tailf -100 /etc/mha/logs/manager.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#GITD主从没有开启</span></span><br><span class="line">GTID failover mode = 0</span><br><span class="line">Starting Non-GTID based failover.</span><br><span class="line"></span><br><span class="line"><span class="comment"># VIP漂移的脚本没有设置</span></span><br><span class="line">master_ip_failover_script is not <span class="built_in">set</span>. Skipping invalidating dead master IP address.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有配置 Candidate masters</span></span><br><span class="line">Candidate masters from the configuration file:</span><br><span class="line">Non-candidate masters:</span><br><span class="line"></span><br><span class="line">candidate_master=1 // 设立太子，但是如果太子落后其他机器数据超过100M，就废储</span><br><span class="line">check_repl_delay=0 // 关闭对太子落后的检测</span><br><span class="line"></span><br><span class="line"><span class="comment"># change master语句</span></span><br><span class="line">All other slaves should start replication from here. Statement should be:</span><br><span class="line">CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;172.16.1.54&#x27;</span>, MASTER_PORT=3306,</span><br><span class="line">MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000003&#x27;</span>, MASTER_LOG_POS=878597, MASTER_USER=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">MASTER_PASSWORD=<span class="string">&#x27;xxx&#x27;</span>;</span><br></pre></td></tr></table></figure><p>MHA日志文件里面的相关工具命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">save_binary_logs</span><br><span class="line">--<span class="built_in">command</span>=save</span><br><span class="line">--start_file=mysql-bin.000001</span><br><span class="line">--start_pos=878597</span><br><span class="line">--binlog_dir=/app/mysql/data</span><br><span class="line">--output_file=/var/tmp/saved_master_binlog_from_172.16.1.52_3306_20240827154042.binlog</span><br><span class="line">--handle_raw_binlog=1</span><br><span class="line">--disable_log_bin=0</span><br><span class="line">--manager_version=0.58</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pply_diff_relay_logs</span><br><span class="line">--<span class="built_in">command</span>=apply</span><br><span class="line">--slave_user=<span class="string">&#x27;mha&#x27;</span></span><br><span class="line">--slave_host=172.16.1.54</span><br><span class="line">--slave_ip=172.16.1.54</span><br><span class="line">--slave_port=3306</span><br><span class="line">--</span><br><span class="line">apply_files=/var/tmp/saved_master_binlog_from_172.16.1.52_3306_20240827154042.binlog</span><br><span class="line">--workdir=/var/tmp</span><br><span class="line">--target_version=5.7.42-<span class="built_in">log</span></span><br><span class="line">--timestamp=20240827154042</span><br><span class="line">--handle_raw_binlog=1</span><br><span class="line">--disable_log_bin=0</span><br><span class="line">--manager_version=0.58</span><br><span class="line">--slave_pass=xxx</span><br></pre></td></tr></table></figure><p>MHA日志文件里面的binlog的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.先将binlog保存在宕机主库的 /var/tmp/</span></span><br><span class="line">[root@db02 ~]# ll /var/tmp/saved_master_binlog_from_172.16.1.52_3306_20240827154042.binlog</span><br><span class="line">-rw-r--r-- 1 root root 177 Aug 27 15:40</span><br><span class="line">/var/tmp/saved_master_binlog_from_172.16.1.52_3306_20240827154042.binlog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.将binlog从宕机主库保存到manager所在的机器</span></span><br><span class="line">[root@mha-manager ~]# ll /etc/mha/app1/saved_master_binlog_from_172.16.1.52_3306_20240827154042.binlog</span><br><span class="line">-rw-r--r-- 1 root root 177 Aug 27 15:40 /etc/mha/app1/saved_master_binlog_from_172.16.1.52_3306_20240827154042.binlog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.将binlog从manager所在的机器发送给新主库</span></span><br><span class="line">[root@db04 ~]# ll /var/tmp/saved_master_binlog_from_172.16.1.52_3306_20240827154042.binlog</span><br><span class="line">-rw-r--r-- 1 root root 177 Aug 27 15:40</span><br><span class="line">/var/tmp/saved_master_binlog_from_172.16.1.52_3306_20240827154042.binlog</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240828202522903.png" alt="image-20240828202522903"></p><p><img src="../image/study_img/image-20240827195935226.png" alt="image-20240827195935226"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mha配置文件以覆盖的形式摘除</span><br></pre></td></tr></table></figure><h3 id="5、MHA集群的恢复"><strong>5、MHA集群的恢复</strong></h3><p>1、宕掉db01主库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">1、停止mysql</span><br><span class="line">[root@db01 ~]# /etc/init.d/mysqld stop</span><br><span class="line"></span><br><span class="line">2、db02</span><br><span class="line">root@localhost:(none) &gt; show slave status\G</span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">3、db03  <span class="comment">#看到主库已变成db02了</span></span><br><span class="line">root@localhost:(none) &gt;  show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 172.16.1.52</span><br><span class="line">                  Master_User: rep</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000008</span><br><span class="line">          Read_Master_Log_Pos: 120</span><br><span class="line">               Relay_Log_File: db03-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 283</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000008</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">            </span><br><span class="line">4、db04  <span class="comment">#看到主库已变成db02了</span></span><br><span class="line">root@localhost:(none) &gt;  show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 172.16.1.52</span><br><span class="line">                  Master_User: rep</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000008</span><br><span class="line">          Read_Master_Log_Pos: 120</span><br><span class="line">               Relay_Log_File: db04-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 283</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000008</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">            </span><br><span class="line">5、查看lb01MHA管理机器的配置文件，已摘除db01的server标签</span><br></pre></td></tr></table></figure><p>2、修复宕机的主库，并加入集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">1、#修复宕机的主库(db01)</span><br><span class="line">[root@db01 ~]# /etc/init.d/mysqld start</span><br><span class="line"></span><br><span class="line">2、#找到最后一个change master语句，到宕机的主库执行</span><br><span class="line">[root@lb01 ~]# grep -i <span class="string">&#x27;change master to&#x27;</span> /etc/mha/logs/manager.log|<span class="built_in">tail</span> -1</span><br><span class="line">CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;172.16.1.52&#x27;</span>, MASTER_PORT=3306, MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000008&#x27;</span>, MASTER_LOG_POS=120, MASTER_USER=<span class="string">&#x27;rep&#x27;</span>, MASTER_PASSWORD=<span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">3、#db01执行change msater 语句,启动主从复制</span><br><span class="line">root@localhost:(none) &gt; CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;172.16.1.52&#x27;</span>, MASTER_PORT=3306, MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000008&#x27;</span>, MASTER_LOG_POS=120, MASTER_USER=<span class="string">&#x27;rep&#x27;</span>, MASTER_PASSWORD=<span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">root@localhost:(none) &gt; start slave;</span><br><span class="line">root@localhost:(none) &gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 172.16.1.52</span><br><span class="line">                  Master_User: rep</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000008</span><br><span class="line">          Read_Master_Log_Pos: 120</span><br><span class="line">               Relay_Log_File: db01-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 283</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000008</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">4、#MHA修改配置文件，将db01的信息加入mha配置文件</span><br><span class="line">[root@lb01 ~]# vim /etc/mha/app1.cnf </span><br><span class="line">.....</span><br><span class="line">[server1]</span><br><span class="line">hostname=172.16.1.51</span><br><span class="line">port=3306</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、#启动mha</span><br><span class="line">[root@lb01 ~]# systemctl start mha</span><br><span class="line"></span><br><span class="line">6、检查谁是主库，会报错，需要安装mysql命令</span><br><span class="line">[root@lb01 ~]# masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line"></span><br><span class="line">7、安装mysql命令</span><br><span class="line">安装mysql源</span><br><span class="line">[root@lb01 ~]# rpm -ivh https://dev.mysql.com/get/mysql84-community-release-el7-1.noarch.rpm</span><br><span class="line"></span><br><span class="line">[root@lb01 ~]# vim /etc/yum.repos.d/mysql-community.repo </span><br><span class="line"><span class="comment">#就修改这个标签,其他的删除，文件里面就保留这几行</span></span><br><span class="line">[mysql56-community]</span><br><span class="line">name=MySQL 5.6 Community Server</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/<span class="variable">$basearch</span></span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">[root@lb01 ~]# yum -y install mysql</span><br><span class="line"></span><br><span class="line">8、再次执行</span><br><span class="line">[root@lb01 ~]# masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line">app1 (pid:27835) is running(0:PING_OK), master:172.16.1.51</span><br></pre></td></tr></table></figure><h3 id="6、写脚本恢复集群，放到mha机器">6、<strong>写脚本恢复集群，放到mha机器</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">[root@lb01 ~]# masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line">app1 (pid:27835) is running(0:PING_OK), master:172.16.1.51</span><br><span class="line"></span><br><span class="line">2、写脚本恢复，放到mha机器</span><br><span class="line">[root@lb01 ~]# vim recover.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#脚本功能：集群恢复脚本</span></span><br><span class="line">. /etc/init.d/functions</span><br><span class="line">log_file=<span class="string">&#x27;/etc/mha/logs/manager.log&#x27;</span></span><br><span class="line">mha_conf=<span class="string">&#x27;/etc/mha/app1.cnf&#x27;</span></span><br><span class="line">repl_pass=<span class="string">&#x27;123&#x27;</span></span><br><span class="line">mha_user=$(awk -F= <span class="string">&#x27;/^user/&#123;print $2&#125;&#x27;</span> <span class="variable">$&#123;mha_conf&#125;</span>)</span><br><span class="line">mha_password=$(awk -F= <span class="string">&#x27;/^password/&#123;print $2&#125;&#x27;</span> <span class="variable">$&#123;mha_conf&#125;</span>)</span><br><span class="line"><span class="comment">#宕机的主库是哪一台</span></span><br><span class="line">dowm_master=$(sed -nr <span class="string">&#x27;s#^Master (.*)\(.*\).*!$#\1#gp&#x27;</span> <span class="variable">$&#123;log_file&#125;</span>|<span class="built_in">tail</span> -1)</span><br><span class="line"><span class="comment">#查找change master 语句</span></span><br><span class="line">change_master=$(grep -i <span class="string">&#x27;change master to&#x27;</span> <span class="variable">$&#123;log_file&#125;</span>|<span class="built_in">tail</span> -1|awk -F: <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>|sed <span class="string">&quot;s#xxx#<span class="variable">$&#123;repl_pass&#125;</span>#g&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动  需要写脚本检查是否启动成功</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在修复主库.....&quot;</span></span><br><span class="line">ssh <span class="variable">$&#123;dowm_master&#125;</span> <span class="string">&#x27;/etc/init.d/mysqld start&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></span><br><span class="line">      mysqladmin -u<span class="variable">$&#123;mha_user&#125;</span> -p<span class="variable">$&#123;mha_password&#125;</span> -h<span class="variable">$&#123;dowm_master&#125;</span> ping &amp;&gt;/dev/null</span><br><span class="line">      <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">           <span class="comment">#执行change master语句</span></span><br><span class="line">           mysql -u<span class="variable">$&#123;mha_user&#125;</span> -p<span class="variable">$&#123;mha_password&#125;</span> -h<span class="variable">$&#123;dowm_master&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;change_master&#125;</span>;start slave&quot;</span></span><br><span class="line">           <span class="built_in">echo</span> <span class="string">&quot;主库修复完成.....&quot;</span></span><br><span class="line">           <span class="built_in">break</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在补全MHA配置文件...&quot;</span></span><br><span class="line"><span class="comment">#覆盖配置文件</span></span><br><span class="line"><span class="comment">#cat &gt; $&#123;mha_conf&#125; &lt;&lt;-EOF  这样子写，cat里面的内容就不用顶格写</span></span><br><span class="line"><span class="built_in">cat</span> &gt; <span class="variable">$&#123;mha_conf&#125;</span> &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[server default]</span></span><br><span class="line"><span class="string">manager_log=/etc/mha/logs/manager.log</span></span><br><span class="line"><span class="string">manager_workdir=/etc/mha/app1</span></span><br><span class="line"><span class="string">master_binlog_dir=/app/mysql-5.6.50/data</span></span><br><span class="line"><span class="string">master_ip_failover_script=/etc/mha/app1/master_ip_failover</span></span><br><span class="line"><span class="string">password=$&#123;mha_password&#125;</span></span><br><span class="line"><span class="string">ping_interval=2</span></span><br><span class="line"><span class="string">repl_password=123</span></span><br><span class="line"><span class="string">repl_user=rep</span></span><br><span class="line"><span class="string">ssh_port=22</span></span><br><span class="line"><span class="string">ssh_user=root</span></span><br><span class="line"><span class="string">user=$&#123;mha_user&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[server1]</span></span><br><span class="line"><span class="string">hostname=172.16.1.51</span></span><br><span class="line"><span class="string">port=3306</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[server2]</span></span><br><span class="line"><span class="string">hostname=172.16.1.52</span></span><br><span class="line"><span class="string">port=3306</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[server3]</span></span><br><span class="line"><span class="string">hostname=172.16.1.53</span></span><br><span class="line"><span class="string">port=3306</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[server4]</span></span><br><span class="line"><span class="string">hostname=172.16.1.54</span></span><br><span class="line"><span class="string">port=3306</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#[binlog1]</span></span><br><span class="line"><span class="string">#(这个配置了，就永远不会提升为主库)</span></span><br><span class="line"><span class="string">#no_master=1 </span></span><br><span class="line"><span class="string">#hostname=172.16.1.5</span></span><br><span class="line"><span class="string">#master_binlog_dir=/data/mysql/binlog</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动mha</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在启动MHA.....&quot;</span></span><br><span class="line">systemctl start mha</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></span><br><span class="line">        masterha_check_status --conf=<span class="variable">$&#123;mha_conf&#125;</span> &amp;&gt;/dev/null</span><br><span class="line">        <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">              action <span class="string">&quot;MHA manager启动&quot;</span> /bin/true</span><br><span class="line">              <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、#执行脚本</span><br><span class="line">sh -x recover.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、vip的漂移</span><br><span class="line">2、配合zabbix的自愈模式，要等切换完才可以执行脚本  </span><br><span class="line">上一次宕机的主库，和这一次的新主库，都要记录一下，再判断这个日志里面，这一次宕机的主库，是不是上一次宕机的主库  要在脚本前面判断上一次切换是否完成，就是看报告是否出来</span><br></pre></td></tr></table></figure><p><strong>测试：根据数据最新的提升为主库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#目前环境： </span></span><br><span class="line">主库：db01</span><br><span class="line">从库：db02、db03、db04</span><br><span class="line"></span><br><span class="line"><span class="comment">#需求：想让db03的数据最新，其他2个的数据落后，db03的数据最新，就会切为主库</span></span><br><span class="line"></span><br><span class="line">1、#当不知道谁是主库时，执行这条命令</span><br><span class="line">[root@lb01 ~]# masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line">app1 (pid:27835) is running(0:PING_OK), master:172.16.1.51</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#db01执行脚本</span><br><span class="line">[root@db01 ~]# sh insert.sh </span><br><span class="line"></span><br><span class="line">3、#想让db03数据最新，得让其他2个库的relaylog落后</span><br><span class="line">(db02)</span><br><span class="line">root@localhost:(none) &gt; stop slave io_thread;</span><br><span class="line">(db04)</span><br><span class="line">root@localhost:(none) &gt; stop slave io_thread;</span><br><span class="line"></span><br><span class="line">检查数据是否落后</span><br><span class="line"><span class="keyword">select</span> * from prod.prod</span><br><span class="line"></span><br><span class="line">4、#停止主库db01,停止脚本</span><br><span class="line">[root@db01 ~]# /etc/init.d/mysqld stop</span><br><span class="line">[root@db01 ~]# sh insert.sh ^C</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、#db02、db04检查主从状态,已经变成主库</span><br><span class="line">root@localhost:(none) &gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 172.16.1.53</span><br><span class="line">                  </span><br><span class="line">6、#执行脚本，将宕掉的db01加入集群，查看集群状态，集群的主库变成db03</span><br><span class="line">[root@lb01 ~]#  sh recover.sh </span><br><span class="line">[root@lb01 ~]# masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line">app1 (pid:31397) is running(0:PING_OK), master:172.16.1.53</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">脚本里面的：start slave 会把sql、io线程起来</span><br></pre></td></tr></table></figure><p><strong>测试：设置储君参数(将某台数据库的数据一直落后)，选主时，该数据库被选为主库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设立太子，但是如果太子落后其他机器数据超过100M，就废储</span></span><br><span class="line">candidate_master=1 </span><br><span class="line"><span class="comment">#关闭对太子落后的检测</span></span><br><span class="line">check_repl_delay=0 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#让db02数据落后，选主时，强行被选为主库</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、修改mha配置文件</span><br><span class="line">[root@lb01 ~]# vim /etc/mha/app1.cnf </span><br><span class="line">.....</span><br><span class="line">[server2]</span><br><span class="line"><span class="comment">#设立太子，但是如果太子落后其他机器数据超过100M，就废储</span></span><br><span class="line">candidate_master=1</span><br><span class="line"><span class="comment">#关闭对太子落后的检测</span></span><br><span class="line">check_repl_delay=0 </span><br><span class="line">hostname=172.16.1.52</span><br><span class="line">port=3306</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">2、重启mha</span><br><span class="line">[root@lb01 ~]# systemctl restart mha</span><br><span class="line"></span><br><span class="line">[root@lb01 ~]# masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line">app1 (pid:31957) is running(0:PING_OK), master:172.16.1.53</span><br><span class="line"></span><br><span class="line">3、主库db03执行写入数据脚本</span><br><span class="line">[root@db03 ~]# sh insert.sh </span><br><span class="line"></span><br><span class="line">4、设置db02数据落后 </span><br><span class="line">root@localhost:(none) &gt; stop slave io_thread;</span><br><span class="line">此时，db02的数据肯定落后</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、停止db03数据库，停止脚本</span><br><span class="line">[root@db03 ~]# /etc/init.d/mysqld stop</span><br><span class="line"></span><br><span class="line">[root@db03 ~]# sh insert.sh ^C</span><br><span class="line"></span><br><span class="line">6、查看db01、db04主从状态，主库强制变成了db02</span><br><span class="line">root@localhost:(none) &gt;  show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 172.16.1.52</span><br></pre></td></tr></table></figure><h3 id="7、-MHA的vip漂移">7、 MHA的vip漂移</h3><p>VIP漂移的两种方式<br>1）通过keepalived的方式，管理虚拟IP的漂移<br>2）通过MHA自带脚本方式，管理虚拟IP的漂移</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#MHA + keepalived方案</span></span><br><span class="line"></span><br><span class="line">1、keepalived如何可以找到最新的从库</span><br><span class="line">2、要写4个脚本，每台机器放一个，切换的时候容易出现脑裂</span><br><span class="line">3、需要等待MHA切换完成再漂移VIP</span><br><span class="line">4、多个脚本同时执行，需要去检测不同机器上slave的复制情况</span><br><span class="line">5、网上的文档就2台之间漂移，不会做4台，如果2台切换，如何保证切到的数据最新呢(做半同步可以解决)</span><br><span class="line">6、半同步阻塞数据写入，影响主库性能(这个机器不提供服务就可以解决)</span><br><span class="line">7、互相切换的2台主库升配置，(51 51升配，53 54不升配置)</span><br><span class="line"></span><br><span class="line">6、7 这2点就是在砸钱</span><br><span class="line"></span><br><span class="line">mha可以找到最新的从库替换为主库</span><br></pre></td></tr></table></figure><p><strong>配置MHA + master_ip_failover  (MHA自带脚本方式的VIP漂移)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">1、更改MHA的配置文件</span><br><span class="line">[root@lb01 ~]# vim /etc/mha/app1/master_ip_failover </span><br><span class="line">master_ip_failover_script=/etc/mha/app1/master_ip_failover</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、下载写好的将脚本放到工作目录</span><br><span class="line">[root@lb01 ~]# wget http://test.driverzeng.com/MySQL_File/master_ip_failover</span><br><span class="line"><span class="comment">#ifconfig eth1:1 172.16.1.55/24</span></span><br><span class="line"><span class="comment">#就是在脚本中添加VIP的定义</span></span><br><span class="line">my <span class="variable">$vip</span> = <span class="string">&#x27;172.16.1.55/24&#x27;</span>;</span><br><span class="line">my <span class="variable">$key</span> = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">my <span class="variable">$ssh_start_vip</span> = <span class="string">&quot;/sbin/ifconfig eth1:<span class="variable">$key</span> <span class="variable">$vip</span>&quot;</span>;</span><br><span class="line">my <span class="variable">$ssh_stop_vip</span> = <span class="string">&quot;/sbin/ifconfig eth1:<span class="variable">$key</span> down&quot;</span>;</span><br><span class="line"></span><br><span class="line">[root@lb01 ~]# <span class="built_in">mv</span> master_ip_failover  /etc/mha/app1</span><br><span class="line"></span><br><span class="line">3、检测MHA状态</span><br><span class="line">[root@lb01 ~]#  masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line">app1 (pid:32555) is running(0:PING_OK), master:172.16.1.52</span><br><span class="line"></span><br><span class="line">3、手动在主库上绑定VIP</span><br><span class="line">[root@db02 ~]# ifconfig eth1:1 172.16.1.55/24</span><br><span class="line"></span><br><span class="line">4、给脚本执行权限</span><br><span class="line">[root@lb01 ~]# <span class="built_in">chmod</span> +x /etc/mha/app1/master_ip_failover</span><br><span class="line"></span><br><span class="line">5、重启mha</span><br><span class="line">[root@lb01 ~]# systemctl stop mha</span><br><span class="line">[root@lb01 ~]# systemctl start mha</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加脚本配置文件，服务启不来</span></span><br><span class="line">1.权限问题</span><br><span class="line">2、语法问题</span><br><span class="line">3、格式问题   dos2nuix /etc/mha/app1/master_ip_failover</span><br><span class="line">[root@lb01 ~]#  dos2unix /etc/mha/app1/master_ip_failover</span><br><span class="line">dos2unix: converting file /etc/mha/app1/master_ip_failover to Unix format ...</span><br><span class="line"></span><br><span class="line">5、重启mha</span><br><span class="line">[root@lb01 ~]# systemctl stop mha</span><br><span class="line">[root@lb01 ~]# systemctl start mha</span><br><span class="line"></span><br><span class="line">6、把添加的配置写到脚本里面，以后脚本有什么改动，就要写在脚本里</span><br><span class="line">MHA能够找到最新数据的从库</span><br></pre></td></tr></table></figure><p>VIP漂移切换测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">既然有了VIP,那么以后程序就往VIP里面写数据，现在要更改写数据的脚本</span><br><span class="line"></span><br><span class="line">1、检测目前谁是主库</span><br><span class="line">[root@lb01 ~]#  masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line">app1 (pid:51306) is running(0:PING_OK), master:172.16.1.51</span><br><span class="line"></span><br><span class="line">2、先实时追踪日志</span><br><span class="line">[root@lb01 ~]# tailf  /etc/mha/logs/manager.log</span><br><span class="line"></span><br><span class="line">3、每个机器上都修改写入数据的脚本</span><br><span class="line">[root@db01 ~]# vim insert.sh </span><br><span class="line"><span class="comment">#修改为VIP</span></span><br><span class="line">master_ip=172.16.1.55</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、执行脚本</span><br><span class="line">[root@db02 ~]# sh insert.sh </span><br><span class="line"></span><br><span class="line">5、停止当前的主库</span><br><span class="line">[root@db01 ~]# /etc/init.d/mysqld stop</span><br><span class="line"></span><br><span class="line">6、可看到写入数据的程序开始报错</span><br><span class="line">ERROR 2003 (HY000): Can<span class="string">&#x27;t connect to MySQL server on &#x27;</span>172.16.1.55<span class="string">&#x27; (111)</span></span><br><span class="line"><span class="string">Warning: Using a password on the command line interface can be insecure.</span></span><br><span class="line"><span class="string">ERROR 2003 (HY000): Can&#x27;</span>t connect to MySQL server on <span class="string">&#x27;172.16.1.55&#x27;</span> (111)</span><br><span class="line">Warning: Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">ERROR 2003 (HY000): Can<span class="string">&#x27;t connect to MySQL server on &#x27;</span>172.16.1.55<span class="string">&#x27; (111)</span></span><br><span class="line"><span class="string">Warning: Using a password on the command line interface can be insecure.</span></span><br><span class="line"><span class="string">ERROR 2003 (HY000): Can&#x27;</span>t connect to MySQL server on <span class="string">&#x27;172.16.1.55&#x27;</span> (111)</span><br><span class="line"></span><br><span class="line">7、看到日志开始有数据输出，开始将VIP漂移到新主库</span><br><span class="line"></span><br><span class="line">8、查看db01的写入数据脚本开始恢复数据写入，说明数据写入到新主库db02</span><br><span class="line">[root@lb01 ~]# systemctl start mha</span><br><span class="line">[root@lb01 ~]#  masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line">app1 (pid:55464) is running(0:PING_OK), master:172.16.1.52</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# ifconfig</span><br><span class="line">......</span><br><span class="line">eth1:1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.16.1.55  netmask 255.255.255.0  broadcast </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">#9、想要把宕机的db01恢复到集群作为从库，就执行恢复脚本</span></span><br></pre></td></tr></table></figure><h3 id="8、MYSQL-binlog实时同步">8、MYSQL binlog实时同步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sersync + rsync</span></span><br><span class="line">1、同步到rsync服务端的哪个目录</span><br><span class="line">2、MHA凭什么去rsync服务端的backup目录下找   (在mha的配置文件里面配置)</span><br><span class="line">3、主库变成从库了，怎么办(每台从库都安装sersync,但不能全部起)</span><br><span class="line">这个方案可以实施，但是非常麻烦，就怕mysql很吃内存，就怕给rsync杀了，但是rsync很轻量级</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意，如果使用sersync,脚本里面的systemd写绝对路径</span></span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240828105224674.png" alt="image-20240828105224674"></p><p><strong>使用mysqlbinlog同步binlog</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">1、MHA 配置binlog server,需要修改配置文件,同步是往MHA管理机同步</span><br><span class="line">[root@lb01 ~]# vim /etc/mha/app1.cnf</span><br><span class="line">....</span><br><span class="line">[binlog1]</span><br><span class="line"><span class="comment">#(当mysq和mha安装在同一个机器里面,这个配置了,就永远不会提升为主库)</span></span><br><span class="line"><span class="comment">#no_master=1 </span></span><br><span class="line">hostname=172.16.1.5</span><br><span class="line">master_binlog_dir=/data/mysql/binlog</span><br><span class="line"></span><br><span class="line">2、在脚本里面更新上这个配置</span><br><span class="line"></span><br><span class="line">2、创建binlog目录</span><br><span class="line">[root@lb01 ~]# <span class="built_in">mkdir</span> -p /data/mysql/binlog</span><br><span class="line"></span><br><span class="line">3、查看主库是谁</span><br><span class="line">[root@lb01 ~]# masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line">app1 (pid:36583) is running(0:PING_OK), master:172.16.1.51</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、一定要先进入目录再，实时同步binlog</span><br><span class="line">[root@lb01 ~]# <span class="built_in">cd</span> /data/mysql/binlog/</span><br><span class="line">[root@lb01 binlog]# mysqlbinlog -R --host=172.16.1.51 --user=mha --password=123 --raw --stop-never mysql-bin.000001 &amp;</span><br><span class="line">输入回车</span><br><span class="line">[1] 60923</span><br><span class="line"><span class="comment">#--host=主库IP</span></span><br><span class="line"></span><br><span class="line">5、查看172.16.1.51的binlog是否同步过来</span><br><span class="line">[root@lb01 binlog]# <span class="built_in">pwd</span></span><br><span class="line">/data/mysql/binlog</span><br><span class="line">[root@lb01 binlog]# ll</span><br><span class="line">total 12016</span><br><span class="line">-rw-rw---- 1 root root     440 Aug 29 18:20 mysql-bin.000001</span><br><span class="line">-rw-rw---- 1 root root     143 Aug 29 18:20 mysql-bin.000002</span><br><span class="line"></span><br><span class="line">6、验证是否实时同步</span><br><span class="line">172.16.1.51 db01执行脚本</span><br><span class="line">[root@db01 ~]# sh insert.sh </span><br><span class="line">[root@lb01 binlog]# ll /data/mysql/binlog/</span><br><span class="line">total 12016</span><br><span class="line">-rw-rw---- 1 root root     440 Aug 29 18:20 mysql-bin.000001</span><br><span class="line">-rw-rw---- 1 root root     143 Aug 29 18:20 mysql-bin.000002</span><br><span class="line"><span class="comment">#查看最后一个binlog的·大小是否变化，变化则实时同步binlog,再和db01主库的binlog对比，查看大小是否一样，一样则同步成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新binlog  再到mha管理机上查看是否有新的binlog</span></span><br><span class="line">[root@db01 ~]# mysqladmin -uroot -p123 flush-log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7、当db02变成从库时，就不能用上条命令去拉取binlog,所以host要改成vip，就比较方便</span><br><span class="line">[root@lb01 binlog]# <span class="built_in">kill</span> %1     </span><br><span class="line">或者killall  mysqlbinlog</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用VIP拉取binlog</span></span><br><span class="line">[root@lb01 ~]# <span class="built_in">cd</span> /data/mysql/binlog/</span><br><span class="line">[root@lb01 binlog]# mysqlbinlog -R --host=172.16.1.55 --user=mha --password=123 --raw --stop-never mysql-bin.000001 &amp;</span><br><span class="line">输入回车</span><br><span class="line">[1] 60923</span><br><span class="line"><span class="comment">#--host=VIP</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">[root@lb01 ~]# vim /root/failover_status</span><br><span class="line">new_master=$(sed -nr <span class="string">&#x27;s#^app1.*failover (.*)\(.*\) to (.*)\(.*\) succeeded$#\2#gp&#x27;</span> /etc/mha/logs/manager.log|<span class="built_in">tail</span> -1)</span><br><span class="line">old_master=$(sed -nr <span class="string">&#x27;s#^app1.*failover (.*)\(.*\) to (.*)\(.*\) succeeded$#\1#gp&#x27;</span> /etc/mha/logs/manager.log|<span class="built_in">tail</span> -1)</span><br><span class="line"><span class="comment">#app1: MySQL Master failover 172.16.1.51(172.16.1.51:3306) to 172.16.1.52(172.16.1.52:3306) succeeded</span></span><br><span class="line"></span><br><span class="line">[root@lb01 ~]# vim vip-recover.sh </span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">. /etc/init.d/functions</span><br><span class="line">. /root/failover_status</span><br><span class="line">log_file=<span class="string">&#x27;/etc/mha/logs/manager.log&#x27;</span></span><br><span class="line">mha_conf=<span class="string">&#x27;/etc/mha/app1.cnf&#x27;</span></span><br><span class="line">repl_pass=<span class="string">&#x27;123&#x27;</span></span><br><span class="line">mha_user=$(awk -F= <span class="string">&#x27;/^user/&#123;print $2&#125;&#x27;</span> <span class="variable">$&#123;mha_conf&#125;</span>)</span><br><span class="line">mha_password=$(awk -F= <span class="string">&#x27;/^password/&#123;print $2&#125;&#x27;</span> <span class="variable">$&#123;mha_conf&#125;</span>)</span><br><span class="line"><span class="comment">#宕机的主库是哪一台</span></span><br><span class="line">dowm_master=$(sed -nr <span class="string">&#x27;s#^Master (.*)\(.*\).*!$#\1#gp&#x27;</span> <span class="variable">$&#123;log_file&#125;</span>|<span class="built_in">tail</span> -1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></span><br><span class="line"><span class="comment">#看看down_master和文件里面旧主库是否一致</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;dowm_master&#125;</span> == <span class="variable">$&#123;old_master&#125;</span> ];<span class="keyword">then</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找change master 语句</span></span><br><span class="line">change_master=$(grep -i <span class="string">&#x27;change master to&#x27;</span> <span class="variable">$&#123;log_file&#125;</span>|<span class="built_in">tail</span> -1|awk -F: <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>|sed <span class="string">&quot;s#xxx#<span class="variable">$&#123;repl_pass&#125;</span>#g&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动  需要写脚本检查是否启动成功</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在修复主库.....&quot;</span></span><br><span class="line">ssh <span class="variable">$&#123;dowm_master&#125;</span> <span class="string">&#x27;/etc/init.d/mysqld start&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></span><br><span class="line">      mysqladmin -u<span class="variable">$&#123;mha_user&#125;</span> -p<span class="variable">$&#123;mha_password&#125;</span> -h<span class="variable">$&#123;dowm_master&#125;</span> ping &amp;&gt;/dev/null</span><br><span class="line">      <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">           <span class="comment">#执行change master语句</span></span><br><span class="line">           mysql -u<span class="variable">$&#123;mha_user&#125;</span> -p<span class="variable">$&#123;mha_password&#125;</span> -h<span class="variable">$&#123;dowm_master&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;change_master&#125;</span>;start slave&quot;</span></span><br><span class="line">           <span class="built_in">echo</span> <span class="string">&quot;主库修复完成.....&quot;</span></span><br><span class="line">           <span class="built_in">break</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在补全MHA配置文件...&quot;</span></span><br><span class="line"><span class="comment">#覆盖配置文件</span></span><br><span class="line"><span class="comment">#cat &gt; $&#123;mha_conf&#125; &lt;&lt;-EOF  这样子写，cat里面的内容就不用顶格写</span></span><br><span class="line"><span class="built_in">cat</span> &gt; <span class="variable">$&#123;mha_conf&#125;</span> &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[server default]</span></span><br><span class="line"><span class="string">manager_log=/etc/mha/logs/manager.log</span></span><br><span class="line"><span class="string">manager_workdir=/etc/mha/app1</span></span><br><span class="line"><span class="string">master_binlog_dir=/app/mysql-5.6.50/data</span></span><br><span class="line"><span class="string">master_ip_failover_script=/etc/mha/app1/master_ip_failover</span></span><br><span class="line"><span class="string">password=$&#123;mha_password&#125;</span></span><br><span class="line"><span class="string">ping_interval=2</span></span><br><span class="line"><span class="string">repl_password=123</span></span><br><span class="line"><span class="string">repl_user=rep</span></span><br><span class="line"><span class="string">ssh_port=22</span></span><br><span class="line"><span class="string">ssh_user=root</span></span><br><span class="line"><span class="string">user=$&#123;mha_user&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[server1]</span></span><br><span class="line"><span class="string">hostname=172.16.1.51</span></span><br><span class="line"><span class="string">port=3306</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[server2]</span></span><br><span class="line"><span class="string">hostname=172.16.1.52</span></span><br><span class="line"><span class="string">port=3306</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[server3]</span></span><br><span class="line"><span class="string">hostname=172.16.1.53</span></span><br><span class="line"><span class="string">port=3306</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[server4]</span></span><br><span class="line"><span class="string">hostname=172.16.1.54</span></span><br><span class="line"><span class="string">port=3306</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[binlog1]</span></span><br><span class="line"><span class="string">#(这个配置了，就永远不会提升为主库)</span></span><br><span class="line"><span class="string">#no_master=1 </span></span><br><span class="line"><span class="string">hostname=172.16.1.5</span></span><br><span class="line"><span class="string">master_binlog_dir=/data/mysql/binlog</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动mha</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在启动MHA.....&quot;</span></span><br><span class="line">systemctl start mha</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></span><br><span class="line">        masterha_check_status --conf=<span class="variable">$&#123;mha_conf&#125;</span> &amp;&gt;/dev/null</span><br><span class="line">        <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">              action <span class="string">&quot;MHA manager启动&quot;</span> /bin/true</span><br><span class="line">              <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"> <span class="keyword">else</span> </span><br><span class="line">     <span class="built_in">continue</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="9、基于GTID的主从复制"><strong>9、基于GTID的主从复制</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#停止mha</span></span><br><span class="line">[root@lb01 ~]# systemctl stop mha</span><br><span class="line">因为停主库的时候防止MHA切换</span><br><span class="line"></span><br><span class="line">因为MHA啥样的主从复制都可以结合，不需要对当前的主从复制做任何改动，现在搭建GTID的主从复制，看看MHA是否结合兼容所有的主从复制</span><br></pre></td></tr></table></figure><p><strong>什么是GTID</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GTID：事务提交做的主从复制(全局事务标识符)</span><br><span class="line">标识符是由UUID + TID组成</span><br><span class="line">UUID：主库的身份证号</span><br><span class="line">TID：事务提交号</span><br></pre></td></tr></table></figure><p>GTID特性<br>(1).支持多线程复制：事实上是针对每个database开启相应的独立线程,即每个库有一个单独的(sqlthread).<br>(2).支持启用GTID,在配置主从复制,传统的方式里,你需要找到binlog和POS点,然后change master to指向.<br>在mysql5.6里,无须再知道binlog和POS点,只需要知道master的IP/端口/账号密码即可,因为同步复制是自动的,MySQL通过内部机制GTID自动找点同步.<br>(3).基于Row复制只保存改变的列,大大节省Disk Space/Network resources和Memory usage.<br>(4).支持把Master 和Slave的相关信息记录在Table中原来是记录在文件里,记录在表里,增强可用性<br>(5).支持延迟复制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">1、连接进去关闭之前的主从复制</span><br><span class="line">stop slave;reset slave all;show slave status\G</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">################# 传统主从复制步骤</span></span><br><span class="line"><span class="comment"># 1.修改主库配置文件</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">server_id=1</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.修改从库配置文件</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">server_id=2</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">server_id=3</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">server_id=4</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.在主库上创建主从复制用户</span></span><br><span class="line">grant replication slave on *.* to rep@<span class="string">&#x27;172.16.1.5%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.主库查看binlog和位置点</span></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+</span><br><span class="line">| File             | Position |</span><br><span class="line">+------------------+----------+</span><br><span class="line">| mysql-bin.000012 | 154      |</span><br><span class="line">+------------------+----------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.从库change master</span></span><br><span class="line">change master to</span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_log_file=<span class="string">&#x27;mysql-bin.000012&#x27;</span>,</span><br><span class="line">master_log_pos=154;</span><br><span class="line"><span class="comment"># 6.开启主从复制</span></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><p>基于GTID的主从复制</p><p><em>先决条件</em><br>1）主库和从库都要开启binlog<br>2）主库和从库server-id不同<br>3）要有主从复制用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">1、连接进去关闭之前的主从复制</span><br><span class="line">stop slave;reset slave all;show slave status\G</span><br><span class="line"></span><br><span class="line">2、修改主库配置文件</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">server_id=1</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line">3、修改从库配置文件</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">server_id=2</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">server_id=3</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">server_id=4</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line">4、在主库上创建主从复制用户</span><br><span class="line">grant replication slave on *.* to rep@<span class="string">&#x27;172.16.1.%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">基于GTID的主从复制不用去记位置点，他会根据事务去找位置点</span><br><span class="line"></span><br><span class="line">5、从库执行change master语句</span><br><span class="line">change master to</span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_auto_position=1;</span><br><span class="line"></span><br><span class="line"><span class="comment">## ##报错：</span></span><br><span class="line">mysql&gt; change master to</span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_auto_position=1;</span><br><span class="line">ERROR 1777 (HY000): CHANGE MASTER TO MASTER_AUTO_POSITION = 1 cannot be executed because @@GLOBAL.GTID_MODE = OFF.</span><br><span class="line">(#GLOBAL.GTID_MODE = OFF GTID的模式没有开)</span><br><span class="line"></span><br><span class="line">root@localhost:(none) &gt; show variables like <span class="string">&#x27;%gtid%&#x27;</span>;</span><br><span class="line">+---------------------------------+-----------+</span><br><span class="line">| Variable_name                   | Value     |</span><br><span class="line">+---------------------------------+-----------+</span><br><span class="line">| binlog_gtid_simple_recovery     | ON        |</span><br><span class="line">| enforce_gtid_consistency        | OFF       |</span><br><span class="line">| gtid_executed                   | 1000      |</span><br><span class="line">| gtid_mode                       | OFF       |#GTID的模式没有开</span><br><span class="line">| gtid_next                       | AUTOMATIC |</span><br><span class="line">| gtid_owned                      |           |</span><br><span class="line">| gtid_purged                     |           |</span><br><span class="line">| simplified_binlog_gtid_recovery | OFF       |</span><br><span class="line">+---------------------------------+-----------+</span><br><span class="line"></span><br><span class="line"><span class="comment">#########    MySQL5.6开启GTID  ######</span></span><br><span class="line">6、4台MYSQL机器 [mysqld]标签 配置文件加入这几个配置</span><br><span class="line"><span class="comment">#这个配置就在配置文件里面，不用删除，即使使用传统的也不影响</span></span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">[root@db02 ~]# vim /etc/my.cnf</span><br><span class="line">[root@db03 ~]# vim /etc/my.cnf</span><br><span class="line">[root@db04 ~]# vim /etc/my.cnf</span><br><span class="line">.....</span><br><span class="line"><span class="comment">#开GTID模块</span></span><br><span class="line">gtid_mode=ON</span><br><span class="line"><span class="comment">#保证GTID数据强一致性</span></span><br><span class="line">enforce_gtid_consistency</span><br><span class="line"><span class="comment">#从库日志的更新（1.基于GTID的主从复制 2.双主+keepalived 3.级联复制）</span></span><br><span class="line">log-slave-updates</span><br><span class="line"><span class="comment">#开启binlog</span></span><br><span class="line">log_bin=mysql-bin</span><br><span class="line"></span><br><span class="line"><span class="comment">#########    MySQL5.7开启GTID  ######</span></span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">gtid_mode=ON</span><br><span class="line">enforce_gtid_consistency</span><br></pre></td></tr></table></figure><p>[root@db02 ~]# tailf -100 /app/mysql-5.6.50/data/db02.err</p><p><img src="../image/study_img/image-20240828121147681.png" alt="image-20240828121147681"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">7、重启</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld restart</span><br><span class="line"></span><br><span class="line">8、连接进去从库，从库执行change master语句</span><br><span class="line">change master to</span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_auto_position=1;</span><br><span class="line"></span><br><span class="line">9、开启主从复制，并查看状态</span><br><span class="line">start slave;show slave status\G</span><br><span class="line"></span><br><span class="line"> Auto_Position: 1</span><br><span class="line"> </span><br><span class="line"> 10、MHA切换主从的时候脚本里面会执行change master语句，那个脚本里面的也是执行master_auto_position=1;</span><br><span class="line"> </span><br><span class="line"> 11、主库创建一个库</span><br><span class="line"> root@localhost:(none) &gt; create database gtid;</span><br><span class="line"> root@localhost:(none) &gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-----------------------------------------------------------------------------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                                                                       |</span><br><span class="line">+------------------+----------+--------------+------------------+-----------------------------------------------------------------------------------------+</span><br><span class="line">| mysql-bin.000048 |   221998 |              |                  | a45796f8-61ca-11ef-808a-000c29688028:1-1058,</span><br><span class="line">df4b2d8a-54d3-11ef-ac00-000c29d088a4:1-564 |</span><br><span class="line">+------------------+----------+--------------+------------------+-----------------------------------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> 12、从库查看状态</span><br><span class="line"> *************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 172.16.1.51</span><br><span class="line">                  Master_User: rep</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                  .......</span><br><span class="line">Retrieved_Gtid_Set: df4b2d8a-54d3-11ef-ac00-000c29d088a4:563-564 Executed_Gtid_Set: a45796f8-61ca-11ef-808a-000c29688028:1-1058</span><br></pre></td></tr></table></figure><p>给基于GTID的主从复制绑定VIP,实现VIP漂移</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1、查看之前绑定的VIP在哪，发现在db02上面，需要解绑vip</span><br><span class="line">[root@db02 ~]# ifconfig eth1:1 down</span><br><span class="line"></span><br><span class="line">2、我想让db01作为主库，需要在主库上面绑定VIP</span><br><span class="line">[root@db01 ~]# ifconfig eth1:1 172.16.1.55/24</span><br><span class="line"></span><br><span class="line">3、先检查拉取binlog的命令是否存在，如果没有启动，就启动</span><br><span class="line">[root@lb01 binlog]# <span class="built_in">jobs</span></span><br><span class="line">[2]+  Running                 mysqlbinlog -R --host=172.16.1.55 --user=mha --password=123 --raw --stop-never mysql-bin.000001 &amp;</span><br><span class="line"></span><br><span class="line">4、MHA管理机检测repl</span><br><span class="line">[root@lb01 ~]# masterha_check_repl --conf=/etc/mha/app1.cnf</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">5、启动mha,检测当前的主库</span><br><span class="line">[root@lb01 ~]# systemctl start mha</span><br><span class="line">[root@lb01 ~]# masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line">app1 (pid:76089) is running(0:PING_OK), master:172.16.1.51</span><br><span class="line"></span><br><span class="line">6、测试，db01执行脚本</span><br><span class="line">[root@db01 ~]# sh insert.sh</span><br><span class="line"></span><br><span class="line">7、实时追踪mha日志文件</span><br><span class="line">[root@lb01 ~]# tailf /etc/mha/logs/manager.log</span><br><span class="line"></span><br><span class="line">8、等待一会，停止db01数据库</span><br><span class="line">[root@db01 ~]# /etc/init.d/mysqld stop</span><br><span class="line"></span><br><span class="line">9、写入数据的脚本开始执行错误，等待一会，脚本恢复正常写入，说明vip漂移到db02机器</span><br></pre></td></tr></table></figure><p><strong>报错解决</strong></p><p>报错1、down掉主库，vip切换了，想要将宕掉的主库加入集群，检测repl是否健康，出现报错</p><p><img src="../image/study_img/image-20240830001104977.png" alt="image-20240830001104977"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1、先检查mysqlbinlog是否运行，如果没有运行就先运行</span><br><span class="line">[root@db02 ~]# <span class="built_in">jobs</span></span><br><span class="line">[1]+  Running                 mysqlbinlog -R --host=172.16.1.55 --user=mha --password=123 --raw --stop-never mysql-bin.000001 &amp;</span><br><span class="line"></span><br><span class="line">2、检查vip是否存在在某个数据库上面，如果在，那么有vip的将作为主库，如果不存在，则给主库绑定vip</span><br><span class="line"></span><br><span class="line">3、检查主从复制是否正常，如果每个机器的主从复制都不正常，从库需要重新执行change master 语句</span><br><span class="line">stop slave;</span><br><span class="line"></span><br><span class="line">change master to</span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_auto_position=1;</span><br><span class="line">    </span><br><span class="line">stop slave; start slave;show slave status\G </span><br><span class="line"></span><br><span class="line">4、查看主从复制恢复正常之后，检查健康状态，如果检查状态没问题，就启动mha</span><br></pre></td></tr></table></figure><p>报错2：基于传统复制的基础上做了GTID主从复制之后，当主从出现数据不一致的现象，需要对主库进行全备，但是全备的binlog里面包含传统的主从复制binlog,导入数据时报错，SQL线程报错</p><p><img src="../image/study_img/image-20240902214618651.png" alt="image-20240902214618651"></p><p><img src="../image/study_img/image-20240902214644529.png" alt="image-20240902214644529"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解决办法：</span></span><br><span class="line"></span><br><span class="line">1、从库关闭主从复制，关闭自动查找位置点</span><br><span class="line">root@localhost:(none) &gt; STOP SLAVE;</span><br><span class="line">root@localhost:(none) &gt; change master to master_auto_position=0;</span><br><span class="line"></span><br><span class="line">2、主库打点全备，在恢复时关闭GTID参数</span><br><span class="line">[root@db02 ~]# mysqldump -uroot -p123 -A -R --triggers --master-data=1 --single-transaction --set-gtid-purged=off|gzip &gt; /tmp/full.sql.gz</span><br><span class="line"></span><br><span class="line">3、主库将全备的数据发给其他从库</span><br><span class="line">[root@db02 ~]# <span class="keyword">for</span> i <span class="keyword">in</span> 51 53 54 ;<span class="keyword">do</span> scp /tmp/full.sql.gz 172.16.1.<span class="variable">$i</span>:/tmp;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">4、从库导入全备数据</span><br><span class="line">[root@db01 ~]# zcat /tmp/full.sql.gz |mysql -uroot -p123</span><br><span class="line">[root@db03 ~]# zcat /tmp/full.sql.gz |mysql -uroot -p123</span><br><span class="line">[root@db04 ~]# zcat /tmp/full.sql.gz |mysql -uroot -p123</span><br><span class="line"></span><br><span class="line">5、查看打点的位置点</span><br><span class="line">[root@db01 ~]# zcat /tmp/full.sql.gz |<span class="built_in">head</span>  -25</span><br><span class="line">CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000001&#x27;</span>, MASTER_LOG_POS=151;</span><br><span class="line"></span><br><span class="line">6、所有从库执行change master语句，重启主从复制</span><br><span class="line">change master to</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.52&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_log_file=<span class="string">&#x27;mysql-bin.000001&#x27;</span>,</span><br><span class="line">master_log_pos=151,</span><br><span class="line">master_port=3306;</span><br><span class="line"></span><br><span class="line">start slave;show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 172.16.1.52</span><br><span class="line">                  Master_User: rep</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 151</span><br><span class="line">               Relay_Log_File: db01-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 314</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">            </span><br><span class="line"><span class="comment">#此时虽然看到变成传统的主从复制，但是只要配置文件里面写了开启GTID的·1配置，往数据库里面写数据，就会变成CTID主从复制。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">change master to</span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.52&#x27;</span>,</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_auto_position=1;</span><br><span class="line">    </span><br><span class="line">stop slave; start slave;show slave status\G </span><br></pre></td></tr></table></figure><h3 id="10、Mysql的读写分离">10、<strong>Mysql的读写分离</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">读写分离软件</span><br><span class="line">1.mysql-proxy</span><br><span class="line">2.Atlas  360写的</span><br><span class="line">3.MyCat (重量级，比较占资源)</span><br></pre></td></tr></table></figure><p>Atlas简介<br>Atlas是由 Qihoo 360公司Web平台部基础架构团队开发维护的一个基于MySQL协议的数据中间层项目。它在MySQL官方推出的MySQL-Proxy 0.8.2版本的基础上，修改了大量bug，添加了很多功能特性。它在MySQL官方推出的MySQL-Proxy 0.8.2版本的基础上，修改了大量bug，添加了很多功能特性。</p><p>Atlas主要功能<br>1.读写分离<br>2.从库负载均衡<br>3.IP过滤<br>4.自动分表(公司数据量比较大，表是会被逻辑拆分的，水平拆分还在垂直拆分)<br>5.DBA可平滑上下线DB<br>6.自动摘除宕机的DB</p><p>Atlas相对于官方MySQL-Proxy的优势</p><p>1.将主流程中所有Lua代码用C重写，Lua仅用于管理接口<br>2.重写网络模型、线程模型<br>3.实现了真正意义上的连接池<br>4.优化了锁机制，性能提高数十倍</p><p><img src="../image/study_img/image-20240828155022313.png" alt="image-20240828155022313"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">阿里云不能绑定VIP，但是有一个弹性公网IP</span><br><span class="line"></span><br><span class="line">vim 1.per</span><br><span class="line"><span class="comment">#!/user/bin/env prel</span></span><br><span class="line">system (<span class="string">&#x27;echo 123&#x27;</span>);</span><br><span class="line">system (<span class="string">&#x27;ifconfig&#x27;</span>);</span><br><span class="line"></span><br><span class="line">chmode +x 1.prel</span><br></pre></td></tr></table></figure><h3 id="11、安装配置Atlas（独立的机器）">11、<strong>安装配置Atlas（独立的机器）</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">1、查看当前主从信息</span><br><span class="line">[root@lb01 binlog]# masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line">app1 (pid:125895) is running(0:PING_OK), master:172.16.1.51</span><br><span class="line"></span><br><span class="line">2、下载atlas</span><br><span class="line">[root@lb01 ~]# wget http://test.driverzeng.com/MySQL_plugins/Atlas-2.2.1.el6.x86_64.rpm</span><br><span class="line"></span><br><span class="line">3、安装atlas</span><br><span class="line">[root@lb01 ~]# rpm -ivh Atlas-2.2.1.el6.x86_64.rpm </span><br><span class="line"></span><br><span class="line">4、查看安装完的程序相关文件</span><br><span class="line">[root@lb01 ~]# ll /usr/local/mysql-proxy/</span><br><span class="line">drwxr-xr-x 2 root root  75 Aug 28 15:57 bin       <span class="comment">#程序相关命令</span></span><br><span class="line">drwxr-xr-x 2 root root  22 Aug 28 15:57 conf      <span class="comment">#程序相关配置</span></span><br><span class="line">drwxr-xr-x 3 root root 331 Aug 28 15:57 lib       <span class="comment">#程序相关创建</span></span><br><span class="line">drwxr-xr-x 2 root root   6 Dec 17  2014 <span class="built_in">log</span>       <span class="comment">#程序相关日志</span></span><br><span class="line"></span><br><span class="line">5、加密密码</span><br><span class="line">[root@lb01 ~]# <span class="built_in">cd</span> /usr/local/mysql-proxy/bin</span><br><span class="line">[root@lb01 bin]# ./encrypt 123</span><br><span class="line">3yb5jEku5h4=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6、修改配置文件</span><br><span class="line">[root@lb01 ~]# vim /usr/local/mysql-proxy/conf/test.cnf </span><br><span class="line">[mysql-proxy]</span><br><span class="line"><span class="comment">#带#号的为非必需的配置项目</span></span><br><span class="line"><span class="comment">#管理接口的用户名</span></span><br><span class="line">admin-username = user</span><br><span class="line"><span class="comment">#管理接口的密码</span></span><br><span class="line">admin-password = <span class="built_in">pwd</span></span><br><span class="line"><span class="comment">#Atlas后端连接的MySQL主库的IP和端口，可设置多项，用逗号分隔(可以写VIP,也可以写主库IP)</span></span><br><span class="line">proxy-backend-addresses = 172.16.1.55:3306</span><br><span class="line"><span class="comment">#Atlas后端连接的MySQL从库的IP和端口，@后面的数字代表权重，用来作负载均衡，若省略则默认为1，可设置多项，用逗号分隔</span></span><br><span class="line">proxy-read-only-backend-addresses = 172.16.1.52:3306,172.16.1.53:3306,172.16.1.54:3306</span><br><span class="line"><span class="comment">#用户名与其对应的加密过的MySQL密码，密码使用PREFIX/bin目录下的加密程序encrypt加密，下行的user1和user2为示例，将其替换为你的MySQL的用户名和加密密码！(此处最后不要用root,rott的权限非常大,读写分离对他不起作用)</span></span><br><span class="line">pwds = mha:3yb5jEku5h4=,root:3yb5jEku5h4=</span><br><span class="line"><span class="comment">#设置Atlas的运行方式，设为true时为守护进程方式，设为false时为前台方式，一般开发调试时设为false，线上运行时设为true,true后面不能有空格。</span></span><br><span class="line">daemon = <span class="literal">true</span></span><br><span class="line"><span class="comment">#设置Atlas的运行方式，设为true时Atlas会启动两个进程，一个为monitor，一个为worker，monitor在worker意外退出后会自动将其重启，设为false时只有worker，没有monitor，一般开发调试时设为false，线上运行时设为true,true后面不能有空格。</span></span><br><span class="line">keepalive = <span class="literal">true</span></span><br><span class="line"><span class="comment">#工作线程数，对Atlas的性能有很大影响，可根据情况适当设置</span></span><br><span class="line">event-threads = 8</span><br><span class="line"><span class="comment">#日志级别，分为message、warning、critical、error、debug五个级别</span></span><br><span class="line">log-level = error</span><br><span class="line"><span class="comment">#日志存放的路径</span></span><br><span class="line">log-path = /usr/local/mysql-proxy/log</span><br><span class="line"><span class="comment">#SQL日志的开关，可设置为OFF、ON、REALTIME，OFF代表不记录SQL日志，ON代表记录SQL日志，REALTIME代表记录SQL日志且实时写入磁盘，默认为OFF</span></span><br><span class="line">sql-log = ON</span><br><span class="line"><span class="comment">#慢日志输出设置。当设置了该参数时，则日志只输出执行时间超过sql-log-slow（单位：ms)的日志记录。不设置该参数则输出全部日志。</span></span><br><span class="line">sql-log-slow = 10</span><br><span class="line"><span class="comment">#实例名称，用于同一台机器上多个Atlas实例间的区分</span></span><br><span class="line">instance = <span class="built_in">test</span></span><br><span class="line"><span class="comment">#Atlas监听的工作接口IP和端口</span></span><br><span class="line">proxy-address = 0.0.0.0:3306</span><br><span class="line"><span class="comment">#Atlas监听的管理接口IP和端口</span></span><br><span class="line">admin-address = 0.0.0.0:2345</span><br><span class="line"><span class="comment">#分表设置，此例中person为库名，mt为表名，id为分表字段，3为子表数量，可设置多项，以逗号分隔，若不分表则不需要设置该项</span></span><br><span class="line"><span class="comment">#tables = person.mt.id.3</span></span><br><span class="line"><span class="comment">#默认字符集，设置该项后客户端不再需要执行SET NAMES语句</span></span><br><span class="line">charset = utf8</span><br><span class="line"><span class="comment">#允许连接Atlas的客户端的IP，可以是精确IP，也可以是IP段，以逗号分隔，若不设置该项则允许所有IP连接，否则只允许列表中的IP连接</span></span><br><span class="line">client-ips = 127.0.0.1, 172.16.1</span><br><span class="line"><span class="comment">#Atlas前面挂接的LVS的物理网卡的IP(注意不是虚IP)，若有LVS且设置了client-ips则此项必须设置，否则可以不设置</span></span><br><span class="line"><span class="comment">#lvs-ips = 192.168.1.1</span></span><br><span class="line"></span><br><span class="line">7、启动</span><br><span class="line">[root@lb01 ~]# /usr/local/mysql-proxy/bin/mysql-proxyd <span class="built_in">test</span> start</span><br><span class="line">OK: MySQL-Proxy of <span class="built_in">test</span> is started</span><br><span class="line"></span><br><span class="line">8、停止</span><br><span class="line">[root@lb01 ~]# /usr/local/mysql-proxy/bin/mysql-proxyd <span class="built_in">test</span> stop</span><br><span class="line">OK: MySQL-Proxy of <span class="built_in">test</span> is stopped</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9、如果想要让实例名一样，就修改配置文件</span><br><span class="line">[root@lb01 ~]# vim /usr/local/mysql-proxy/conf/test.cnf </span><br><span class="line">42行： instance = app1</span><br><span class="line">[root@lb01 binlog]# <span class="built_in">mv</span> /usr/local/mysql-proxy/conf/&#123;<span class="built_in">test</span>,app1&#125;.cnf</span><br><span class="line"></span><br><span class="line">10、启动</span><br><span class="line">[root@lb01 binlog]# /usr/local/mysql-proxy/bin/mysql-proxyd app1 start</span><br><span class="line">OK: MySQL-Proxy of app1 is started</span><br><span class="line">[root@lb01 binlog]# netstat -lntup</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:2345            0.0.0.0:*               LISTEN      127355/mysql-proxy  </span><br><span class="line">tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      127355/mysql-proxy </span><br><span class="line"><span class="comment">#看到3306端口，2345端口起来了就ok</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=========================记录一下</span><br><span class="line"><span class="comment">#管理接口的用户名</span></span><br><span class="line">admin-username = user</span><br><span class="line"><span class="comment">#管理接口的密码</span></span><br><span class="line">admin-password = <span class="built_in">pwd</span></span><br><span class="line"><span class="comment">#Atlas监听的管理接口IP和端口</span></span><br><span class="line">admin-address = 0.0.0.0:2345</span><br><span class="line">================================</span><br></pre></td></tr></table></figure><p>Atlas管理接口使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1、连接管理接口登录</span><br><span class="line">[root@lb01 ~]# mysql -uuser -ppwd -h127.0.0.1 -P2345</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; show databases;</span><br><span class="line">ERROR 1105 (07000): use <span class="string">&#x27;SELECT * FROM help&#x27;</span> to see the supported commands</span><br><span class="line">MySQL [(none)]&gt; <span class="keyword">select</span> * from <span class="built_in">help</span>;</span><br><span class="line">+----------------------------+---------------------------------------------------------+</span><br><span class="line">| <span class="built_in">command</span>                    | description                                             |</span><br><span class="line">+----------------------------+---------------------------------------------------------+</span><br><span class="line">| SELECT * FROM <span class="built_in">help</span>         | shows this <span class="built_in">help</span>                                         |#查看帮助</span><br><span class="line">| SELECT * FROM backends     | lists the backends and their state                      |#查看后端数据库</span><br><span class="line">| SET OFFLINE <span class="variable">$backend_id</span>    | <span class="built_in">set</span> offline 2;         | <span class="comment">#平滑下线数据库</span></span><br><span class="line">| SET ONLINE <span class="variable">$backend_id</span>     | <span class="built_in">set</span> online 2;           |#平滑上线数据库</span><br><span class="line">| ADD MASTER <span class="variable">$backend</span>        | example: <span class="string">&quot;add master 172.16.1.88:3306;&quot;</span>, ...               |#添加一个主库</span><br><span class="line">| ADD SLAVE <span class="variable">$backend</span>         | example: <span class="string">&quot;add slave 172.16.1.77:3306;&quot;</span>, ...                |#添加一个从库</span><br><span class="line">| REMOVE BACKEND <span class="variable">$backend_id</span> | example: <span class="string">&quot;remove backend 2;&quot;</span>, ...                        |#删除后端数据库</span><br><span class="line">| SELECT * FROM clients      | <span class="keyword">select</span> * from clients                                       |#查看可连接的客户端</span><br><span class="line">| ADD CLIENT <span class="variable">$client</span>         | example: <span class="string">&quot;add client 10.0.0;&quot;</span>, ...                  |#添加一个允许连接的客户端</span><br><span class="line">| REMOVE CLIENT <span class="variable">$client</span>      | example: <span class="string">&quot;remove client 10.0.0&quot;</span>, ...               |#删除可连接的客户端</span><br><span class="line">| SELECT * FROM pwds         | <span class="keyword">select</span> * from pwds;                                          |#查看在配置文件里面设置的用户和加密的密码</span><br><span class="line">| ADD PWD <span class="variable">$pwd</span>               | example: <span class="string">&quot;add pwd user:raw_password&quot;</span>, ...               |#添加一个明文的密码用户</span><br><span class="line">| ADD ENPWD <span class="variable">$pwd</span>             | example: <span class="string">&quot;add enpwd user:encrypted_password&quot;</span>, ...       |#添加一个加密后的用户密码</span><br><span class="line">| REMOVE PWD <span class="variable">$pwd</span>            | example: <span class="string">&quot;remove pwd user&quot;</span>, ...                         |#删除用户</span><br><span class="line">| SAVE CONFIG                | save the backends to config file                        |#直接保持配置文件</span><br><span class="line">| SELECT VERSION             | display the version of Atlas                            |#查看atlas版本号</span><br><span class="line">+----------------------------+---------------------------------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看后端数据库</span></span><br><span class="line">MySQL [(none)]&gt; SELECT * FROM backends;</span><br><span class="line">+-------------+------------------+-------+------+</span><br><span class="line">| backend_ndx | address          | state | <span class="built_in">type</span> |</span><br><span class="line">+-------------+------------------+-------+------+</span><br><span class="line">|           1 | 172.16.1.51:3306 | up    | rw   |</span><br><span class="line">|           2 | 172.16.1.52:3306 | up    | ro   |</span><br><span class="line">|           3 | 172.16.1.53:3306 | up    | ro   |</span><br><span class="line">|           4 | 172.16.1.54:3306 | up    | ro   |</span><br><span class="line">+-------------+------------------+-------+------+</span><br></pre></td></tr></table></figure><p>通过altas代理写入数据</p><p><img src="../image/study_img/image-20240830223037955.png" alt="image-20240830223037955"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">atlas作为代理，给(VIP)172.16.1.55代理，所有atlas的配置文件里面需要改成代理的vip</span><br><span class="line"></span><br><span class="line">1、修改配置文件，将vip添加</span><br><span class="line">[root@lb01 ~]# vim /usr/local/mysql-proxy/conf/app1.cnf </span><br><span class="line">12行  <span class="comment">#代表主库永远是55</span></span><br><span class="line">proxy-backend-addresses = 172.16.1.55:3306</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###这行暂时不要修改</span></span><br><span class="line"><span class="comment">#这一行，假如52变成主库，vip在52上面，就把52的ip去掉，当51变成从库，就把51的ip添加进来</span></span><br><span class="line">proxy-read-only-backend-addresses = 172.16.1.52:3306,172.16.1.53:3306,172.16.1.54:3306</span><br><span class="line"></span><br><span class="line">2、重启</span><br><span class="line">[root@lb01 ~]# /usr/local/mysql-proxy/bin/mysql-proxyd app1 restart</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、将写入数据的脚本里面的ip修改成代理ip</span><br><span class="line">[root@db01 ~]# vim insert.sh </span><br><span class="line">master_ip=172.16.1.5</span><br><span class="line"><span class="comment">#注意，脚本里面远程登录的用户，必须在atlas配置文件里面存在，不存在就不能写入数据</span></span><br><span class="line"></span><br><span class="line">4、检查主从状态，现在主库是51</span><br><span class="line">[root@lb01 ~]# masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line">app1 (pid:125895) is running(0:PING_OK), master:172.16.1.51</span><br><span class="line"></span><br><span class="line">5、执行脚本，查看是否能够写入数据，并检查数据</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|       28 |</span><br><span class="line">+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#一个机器安装atlas，就要做atlas的高可用，万一atlas宕机了，主库，从库就不能写数据了，还不如每个机器都安装，所以下面会部署多台机器部署atlas</span></span><br></pre></td></tr></table></figure><h3 id="12、多台机器部署Atlas">12、<strong>多台机器部署Atlas</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">1、停止lb01机器上面的atlas服务</span><br><span class="line">[root@lb01 ~]#  /usr/local/mysql-proxy/bin/mysql-proxyd app1 stop</span><br><span class="line"></span><br><span class="line">2、将atlas包、配置文件发送给其他4台数据库</span><br><span class="line">[root@lb01 ~]# <span class="keyword">for</span> i <span class="keyword">in</span> 51 52 53 54;<span class="keyword">do</span> scp Atlas-2.2.1.el6.x86_64.rpm 172.16.1.<span class="variable">$&#123;i&#125;</span>:/root;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">[root@lb01 ~]# <span class="keyword">for</span> i <span class="keyword">in</span> 51 52 53 54;<span class="keyword">do</span> scp /usr/local/mysql-proxy/conf/app1.cnf 172.16.1.<span class="variable">$&#123;i&#125;</span>:/usr/local/mysql-proxy/conf/;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">3、4个库安装atlas</span><br><span class="line">[root@lb01 ~]# <span class="keyword">for</span> i <span class="keyword">in</span> 51 52 53 54;<span class="keyword">do</span> ssh root@172.16.1.<span class="variable">$&#123;i&#125;</span> <span class="string">&quot;rpm -ivh Atlas-2.2.1.el6.x86_64.rpm&quot;</span>;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">4、查看配置文件是否收到</span><br><span class="line">[root@db01 ~]# ll /usr/local/mysql-proxy/conf/</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root root 2832 Aug 31 14:30 app1.cnf</span><br><span class="line">-rw-r--r-- 1 root root 2810 Dec 17  2014 test.cnf</span><br><span class="line"></span><br><span class="line">[root@db01 ~]# rpm -aq |grep Atlas</span><br><span class="line">Atlas-2.2.1-1.x86_64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、目前3306端口数据库在运行，所以改mysql端口不太行，所以先更改atlas端口，改成3307</span><br><span class="line">，如果有生产环境，这个端口会提前配置好，他就是3306，改数据库的端口就好</span><br><span class="line">[root@db01 ~]# vim /usr/local/mysql-proxy/conf/app1.cnf </span><br><span class="line"><span class="comment">#Atlas监听的工作接口IP和端口    45行</span></span><br><span class="line">proxy-address = 0.0.0.0:3307</span><br><span class="line"></span><br><span class="line">sed -i  <span class="string">&#x27;s#proxy-address = 0.0.0.0:3306#proxy-address = 0.0.0.0:3307#g&#x27;</span>  /usr/local/mysql-proxy/conf/app1.cnf  </span><br><span class="line"></span><br><span class="line">5、4台数据库启动atlas,并且检查端口 2345  3307端口</span><br><span class="line">/usr/local/mysql-proxy/bin/mysql-proxyd app1 start</span><br><span class="line"></span><br><span class="line">[root@db04 ~]# netstat -lntup</span><br><span class="line"></span><br><span class="line">6、atlas需要使用systemd管理，不然没法加入开机自启动</span><br><span class="line"></span><br><span class="line">7、更改程序写数据的脚本，还得加参数-P3307,往atlas里面写数据</span><br><span class="line">[root@db01 ~]# vim insert.sh</span><br><span class="line"><span class="comment">#用vip，还是往主库的altlas里面写数据，即便是vip漂移了，还是往atlas里面写，比如说51挂了，vip漂到53，还是往55的3307里面写数据，这样就不要使用keepalived给atlas做高可用了</span></span><br><span class="line">master_ip=172.16.1.55</span><br><span class="line">mysql_cli=<span class="string">&quot;mysql -uroot -p123 -h<span class="variable">$&#123;master_ip&#125;</span> -P3307&quot;</span></span><br><span class="line"></span><br><span class="line">8、执行脚本</span><br><span class="line">[root@db01 ~]# sh insert.sh      </span><br><span class="line"><span class="comment">#可以往里面写数据</span></span><br><span class="line">Warning: Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">Warning: Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br></pre></td></tr></table></figure><p>atlas结合MHA脚本使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">1、检查MHA是否启动</span><br><span class="line">[root@lb01 ~]# masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line">app1 (pid:125895) is running(0:PING_OK), master:172.16.1.51</span><br><span class="line"></span><br><span class="line"><span class="comment">#MHA切换完了，atlas配置文件里面的从库ip也要改，有一个hma的切换脚本，啥时候漂VIP，就啥时候改atlas配置文件，而且4台atlas配置文件要一致</span></span><br><span class="line"></span><br><span class="line">2、在主从服务器上编写脚本</span><br><span class="line">[root@db01 ~]# vim atlas_mha.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">mha_log=<span class="string">&quot;/etc/mha/logs/manager.log&quot;</span></span><br><span class="line"><span class="comment">#宕机的master</span></span><br><span class="line">down_master=$(grep <span class="string">&#x27;(current master)&#x27;</span> <span class="variable">$&#123;mha_log&#125;</span>|awk -F <span class="string">&#x27;(&#x27;</span>  <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>|<span class="built_in">tail</span> -1)</span><br><span class="line"><span class="comment">#down_master=$(sed -nr &#x27;s#(.*)\(.*\) \(current master\)$#\1#gp&#x27; $&#123;mha_log&#125;|tail -1)</span></span><br><span class="line"><span class="comment">#新的master</span></span><br><span class="line">new_master=$(grep <span class="string">&#x27;(new master)&#x27;</span> <span class="variable">$&#123;mha_log&#125;</span>|awk -F <span class="string">&#x27;(&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>|<span class="built_in">tail</span> -1)</span><br><span class="line"><span class="comment">#new_master=$(sed -nr &#x27;s#(.*)\(.*\) \(new master\)$#\1#gp&#x27; $&#123;mha_log&#125;|tail -1)</span></span><br><span class="line"><span class="comment">#操作管理接口   #mysql -uuser -ppwd  -P2345 -h172.16.1.51</span></span><br><span class="line"><span class="comment">#atlas配置文件管理接口的用户名</span></span><br><span class="line">atlas_user=<span class="string">&#x27;user&#x27;</span></span><br><span class="line"><span class="comment">#atlas配置文件管理接口的密码</span></span><br><span class="line">atlas_password=<span class="string">&#x27;pwd&#x27;</span></span><br><span class="line"><span class="comment">##atlas配置文件管理接口的端口</span></span><br><span class="line">atlas_port=<span class="string">&#x27;2345&#x27;</span></span><br><span class="line">atlas_conn=<span class="string">&#x27;mysql -u$&#123;atlas_user&#125; -p$&#123;atlas_password&#125; -P$&#123;atlas_port&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取down_master的backend_id,51主库要做的操作是删除被提升为主库的new_master</span></span><br><span class="line"><span class="keyword">for</span> atlas_ip <span class="keyword">in</span> 51 52 53 54;<span class="keyword">do</span></span><br><span class="line">      down_master_backend_id=$(<span class="variable">$&#123;atlas_conn&#125;</span> -h172.16.1.<span class="variable">$&#123;atlas_ip&#125;</span> -e <span class="string">&#x27;select * from backends&#x27;</span>| grep <span class="string">&quot;<span class="variable">$&#123;new_master&#125;</span>&quot;</span>|awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">      <span class="variable">$&#123;atlas_conn&#125;</span> -h172.16.1.<span class="variable">$&#123;atlas_ip&#125;</span> -e <span class="string">&#x27;remove backend $&#123;down_master_backend_id&#125;&#x27;</span></span><br><span class="line">      <span class="variable">$&#123;atlas_conn&#125;</span> -h172.16.1.<span class="variable">$&#123;atlas_ip&#125;</span> -e <span class="string">&#x27;add slave $&#123;down_master&#125;:3306;save config&#x27;</span></span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"></span><br><span class="line">3、脚本结合MHA一起使用，修改MHAvip漂移的脚本  在mha机器上修改  </span><br><span class="line">[root@lb01 ~]# vim /etc/mha/app1/master_ip_failover</span><br><span class="line">sub <span class="function"><span class="title">start_vip</span></span>() &#123;</span><br><span class="line">    `ssh <span class="variable">$ssh_user</span>\@<span class="variable">$new_master_host</span> \&quot; <span class="variable">$ssh_start_vip</span> \&quot;`;</span><br><span class="line">    `/bin/sh -x \&quot;/root/atlas_mha.sh\&quot;`;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#-x 将脚本的执行过程输出到日志里面</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1、检查主从，并且检查vip在主库上面</span><br><span class="line">[root@lb01 ~]#  masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line">app1 (pid:125895) is running(0:PING_OK), master:172.16.1.51</span><br><span class="line"></span><br><span class="line">[root@db01 ~]# ip a</span><br><span class="line"></span><br><span class="line">2、执行写入数据的脚本</span><br><span class="line">[root@db01 ~]# sh insert.sh</span><br><span class="line"></span><br><span class="line">3、先实时追踪日志</span><br><span class="line">[root@lb01 ~]# tailf  /etc/mha/logs/manager.log</span><br><span class="line"></span><br><span class="line">4、准备切换，停止主库数据库</span><br><span class="line">[root@db01 ~]# /etc/init.d/mysqld stop</span><br><span class="line"> change master to</span><br><span class="line">    master_host=<span class="string">&#x27;172.16.1.52&#x27;</span>,</span><br><span class="line">    master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">    master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    master_auto_position=1;</span><br><span class="line"> start slave;show slave status\G</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> STOP SLAVE;RESET SLAVE ALL;change master to</span><br><span class="line">    master_host=<span class="string">&#x27;172.16.1.52&#x27;</span>,</span><br><span class="line">    master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">    master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    master_auto_position=1;start slave;show slave status\G</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">mysql的MHA高可用的部署，超级详细的</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql主从复制</title>
    <link href="https://www.fomal.cc/posts/106fae33.html"/>
    <id>https://www.fomal.cc/posts/106fae33.html</id>
    <published>2024-09-21T09:45:49.000Z</published>
    <updated>2024-09-21T10:42:01.989Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、-mysql主从复制">1、 mysql主从复制</h3><p><strong>为什么要做主从复制</strong><br>1、为了做高可用<br>2、为了解决MySQL的单点故障<br>3、分摊主库的压力<br>4、做备份的情况(延迟从库)</p><p><strong>Mysql主从复制原理</strong></p><p><img src="../image/study_img/image-20240823161157907.png" alt="image-20240823161157907"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">同步：IO线程拿到数据交给SQL线程，sql线程执行完成后，IO线程再去要下一条数据(类似于我给你传文件，我要等你接收完)</span><br><span class="line">异步：IO线程把数据放到缓存里,不管SQL线程是否执行完，IO线程都会去要下一条数据</span><br><span class="line"></span><br><span class="line">如果看到SQL显示NO,可能是数据的问题，可能主库和从库数据不一致</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">master.info 储存主库信息的文件</span><br><span class="line">relay-log  中继日志，也叫差异日志(主库里有，从库里没有，还需要从库执行的语句，也就是主库和从库的数据差异的)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#原理</span></span><br><span class="line">1）通过change master to语句告诉从库主库的ip，port，user，password，file，pos</span><br><span class="line">2）从库通过start slave命令开启复制必要的IO线程和SQL线程</span><br><span class="line">3）从库通过IO线程拿着change master to用户密码相关信息，连接主库，验证合法性</span><br><span class="line">4）从库连接成功后，会根据binlog的pos问主库，有没有比这个更新的</span><br><span class="line">5）主库接收到从库请求后，比较一下binlog信息，如果有就将最新数据通过dump线程给从库IO线程</span><br><span class="line">6）从库通过IO线程接收到主库发来的binlog事件，存储到TCP/IP缓存中，并返回ACK更新master.info</span><br><span class="line">7）将TCP/IP缓存中的内容存到relay-log中</span><br><span class="line">8）SQL线程读取relay-log.info，读取到上次已经执行过的relay-log位置点，继续执行后续的relay-log日志，执行完成后，更新relay-log.info</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">change master to</span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_passwd=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_log_file=<span class="string">&#x27;mysql-bin.000001&#x27;</span>,</span><br><span class="line">master_log_pos=446</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#MySQL主从复制和3个线程，4个文件有关系</span></span><br><span class="line">1、#3个线程：</span><br><span class="line">      - 从库上的IO线程：(和主库建立连接，接收主库的数据)</span><br><span class="line">      - 从库上的SQL线程：(将IO线程取出的数据在数据库中执行一遍，他两之前是异步的)</span><br><span class="line">      </span><br><span class="line">      - 主库上的dump线程：(接受IO线程的请求，从binlog中取出数据返回给IO线程)</span><br><span class="line">      </span><br><span class="line">2、#4个文件</span><br><span class="line">      - 从库：master.info(存上一次主库binlog的名字和位置点)：执行start slave会把主库信息记录在master.info,方便下一次取数据</span><br><span class="line">      - 从库：relay-log.info：(记录sql语句上一回执行到中继日志的位置点，下回再执行的时候就从这个位置点往后执行)</span><br><span class="line">      - 从库：relay-log：(存储binlog中新增的数据（不是一直存在的）复制SQL线程在执行完文件中的所有事件并且不再需要它后，会自动删除每个中继日志文件)</span><br><span class="line">      </span><br><span class="line">      - 主库：bin-log(二进制日志记录主库所有对数据表发生变化的语句)</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"><span class="comment">#问题：relay-log会一直存在吗,如果不是，会存在多久？</span></span><br><span class="line">官网给的答案：</span><br><span class="line">https://dev.mysql.com/doc/refman/5.7/en/replica-logs-relaylog.html</span><br><span class="line"></span><br><span class="line">The replication SQL thread automatically deletes each relay <span class="built_in">log</span> file after it has executed all events <span class="keyword">in</span> the file and no longer needs it. There is no explicit mechanism <span class="keyword">for</span> deleting relay logs because the replication SQL thread takes care of doing so. However, FLUSH LOGS rotates relay logs, <span class="built_in">which</span> influences when the replication SQL thread deletes them.</span><br><span class="line">(复制SQL线程在执行完文件中的所有事件并且不再需要它后，会自动删除每个中继日志文件。没有明确的机制来删除中继日志，因为复制SQL线程会负责这样做。但是，FLUSH logs会轮换中继日志，这会影响复制SQL线程何时删除它们。)</span><br><span class="line">也就是说SQL线程执行完relay-log的所有事件之后，会定期的删除relay-log，但是不知道多久删除一次，官方没有给出明确的时间</span><br><span class="line"></span><br><span class="line">涉及到3个线程 4个文件</span><br><span class="line"><span class="comment">#从：master inifo  </span></span><br><span class="line">relay.loh  </span><br><span class="line">relay：记录sql语句上一回执行到中继日志的那个位置点了</span><br></pre></td></tr></table></figure><p><strong>部署传统主从复制</strong></p><p>环境准备</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th><th>应用</th></tr></thead><tbody><tr><td>db01</td><td>10.0.0.51  /  172.16.1.51</td><td><strong>主库</strong></td><td>mysql 5.6</td></tr><tr><td>db02</td><td>10.0.0.52  /  172.16.1.52</td><td>从库</td><td>mysql 5.6</td></tr><tr><td>db03</td><td>10.0.0.53  /  172.16.1.53</td><td>从库</td><td>mysql 5.6</td></tr><tr><td>db04</td><td>10.0.0.54 /  172.16.1.54</td><td>从库</td><td>mysql 5.6</td></tr></tbody></table><p>1、主库操作db01</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1、#主库操作</span><br><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line">[root@db02 ~]# vim /etc/my.cnf</span><br><span class="line">[root@db02 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/app/mysql-5.6.50</span><br><span class="line">datadir=/app/mysql-5.6.50/data</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">server_id=1</span><br><span class="line">lower_case_table=1</span><br><span class="line"><span class="comment">#innodb_data_file_path=ibdata1:12M;ibdata2:50M:autoextend</span></span><br><span class="line">binlog_format=row</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">skip-name-resolve</span><br><span class="line">[client]</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">[mysql]</span><br><span class="line">prompt=<span class="string">&quot;\\u@\\h:\\d &gt; &quot;</span></span><br><span class="line"></span><br><span class="line">2、#重启</span><br><span class="line">[root@db04 ~]#  /etc/init.d/mysqld restart</span><br><span class="line"></span><br><span class="line">3、#创建一个主从复制的用户</span><br><span class="line">grant replication slave on *.* to rep@<span class="string">&#x27;172.16.1.5%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">4、#查看binlog(master)的信息</span><br><span class="line">root@localhost:(none) &gt; show master status;</span><br><span class="line">+------------------+----------+</span><br><span class="line">| File             | Position |</span><br><span class="line">+------------------+----------+</span><br><span class="line">| mysql-bin.000016 |      327 |</span><br><span class="line">+------------------+----------+</span><br></pre></td></tr></table></figure><p>2、从库操作   先配置db02  db03</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1、#修改配置文件</span><br><span class="line">[root@db03 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/app/mysql-5.6.50</span><br><span class="line">datadir=/app/mysql-5.6.50/data</span><br><span class="line">从库binlog不需要开启</span><br><span class="line"><span class="comment">#log_bin=mysql-bin</span></span><br><span class="line"><span class="comment">#server_id不一样</span></span><br><span class="line">server_id=1</span><br><span class="line">lower_case_table=1</span><br><span class="line"><span class="comment">#innodb_data_file_path=ibdata1:12M;ibdata2:50M:autoextend</span></span><br><span class="line">binlog_format=row</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">skip-name-resolve</span><br><span class="line">[client]</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">[mysql]</span><br><span class="line">prompt=<span class="string">&quot;\\u@\\h:\\d &gt; &quot;</span></span><br><span class="line"></span><br><span class="line">2、#重启</span><br><span class="line">[root@db03 ~]# /etc/init.d/mysqld restart</span><br><span class="line"></span><br><span class="line">3、#执行master语句</span><br><span class="line">change master to</span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_log_file=<span class="string">&#x27;mysql-bin.000016&#x27;</span>,</span><br><span class="line">master_log_pos=327,</span><br><span class="line">master_port=3306;</span><br><span class="line"></span><br><span class="line">4、#开启主从复制</span><br><span class="line">mysql&gt; start slave;</span><br><span class="line"></span><br><span class="line">5、#查看主从复制状态</span><br><span class="line">mysql&gt; show slave status\G</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000016</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">            </span><br><span class="line">           <span class="comment">#2个yes就OK</span></span><br></pre></td></tr></table></figure><p><strong>主从复制故障处理</strong></p><p>IO线程故障</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#大概率是连接出问题</span></span><br><span class="line">change master to</span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_log_file=<span class="string">&#x27;mysql-bin.000016&#x27;</span>,</span><br><span class="line">master_log_pos=327,</span><br><span class="line">master_port=3306;</span><br><span class="line"></span><br><span class="line">1、#检查IP是否正常(和change master的IP一样，不要写外网IP)</span><br><span class="line">ping 172.16.1.51</span><br><span class="line"></span><br><span class="line">2、#检查端口是否正常(和change master的IP一样，不要写外网IP)</span><br><span class="line">telent 172.16.1.51 3306</span><br><span class="line">端口不通：</span><br><span class="line">      - 防火墙 selinux</span><br><span class="line">      - 服务没有起</span><br><span class="line">      - 没有创建远程连接的用户</span><br><span class="line">      </span><br><span class="line">3、#检测用户名和密码  从库用rep用户连接到主库</span><br><span class="line">[root@db03 ~]# mysql -urep -p123 -h172.16.1.51</span><br><span class="line"></span><br><span class="line">4、#主库检查binglog名字和位置点是否正确(位置点可以少，不能多，多了找不到那个点)</span><br><span class="line">root@localhost:(none) &gt; show master status;</span><br><span class="line">+------------------+----------+-</span><br><span class="line">| File             | Position | </span><br><span class="line">+------------------+----------+-</span><br><span class="line">| mysql-bin.000016 |    32858 | </span><br><span class="line">+------------------+----------+-</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240823175441790.png" alt="image-20240823175441790"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 报错原因：</span></span><br><span class="line">主库和从库的server_id相同</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240823175520693.png" alt="image-20240823175520693"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 报错原因：</span></span><br><span class="line">主库和从库的UUID相同</span><br></pre></td></tr></table></figure><p>SQL线程故障</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根本原因：主库和从库数据不一致</span></span><br><span class="line"></span><br><span class="line">1、主库的数据比从库多(主库里面有一个jiaoyi表，从库没有，我在主库里面的jiaoyi表插入数据，从库SQL线程就会报错)</span><br><span class="line"></span><br><span class="line">2、从库的数据比主库多(从库已经存在一个tabl1表，当主库创建table1表时，从库QL线程就会报错)</span><br></pre></td></tr></table></figure><p>1、主库的数据比从库多  报错</p><p><img src="../image/study_img/image-20240823160331343.png" alt="image-20240823160331343"></p><p>2、从库的数据比主库多  报错</p><p><img src="../image/study_img/image-20240823180522184.png" alt="image-20240823180522184"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解决方法：</span></span><br><span class="line"></span><br><span class="line">方法1：:不推荐  临时的解决方法  </span><br><span class="line">(跳过这个报错的指针)</span><br><span class="line"><span class="comment"># 临时停止同步</span></span><br><span class="line">mysql&gt; stop slave;</span><br><span class="line"><span class="comment"># 将同步指针向下移动一个（可重复操作）</span></span><br><span class="line">mysql&gt; <span class="built_in">set</span> global sql_slave_skip_counter=1;</span><br><span class="line"><span class="comment"># 开启同步</span></span><br><span class="line">mysql&gt; start slave;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法2：不推荐  临时的解决方法</span><br><span class="line">(在mysql标签主添加跳过错误代码的配置)</span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line"><span class="comment">#在[mysqld]标签下添加以下参数</span></span><br><span class="line">slave-skip-errors=1032,1062,1007,1146</span><br><span class="line"></span><br><span class="line"><span class="comment">#但是以上操作都是有风险存在的,导致从库数据缺失，这个数据从库里面永远没有，查不到数据，他跳过这个错误，配置文件里面写了，数据不复制,这个只是表面上看到yes,实际上没有意义，跳过相当于从库少数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据不一致的原因可能如下：</span></span><br><span class="line">1、在生产中运行已有的数据库的主库，新从库直接从当前位置点复制</span><br><span class="line">解决方法：给主库全备，导入到新从库中，保证数据的一致性</span><br><span class="line"></span><br><span class="line">2、直接在从库中操作数据库</span><br><span class="line">解决方法：从库设置不允许写入 ，从库设置为只读(读写分离)</span><br><span class="line"><span class="comment"># 在命令行临时设置</span></span><br><span class="line"><span class="built_in">set</span> global read_only=1;</span><br><span class="line"><span class="comment"># 在配置文件中永久生效</span></span><br><span class="line">read_only=1</span><br><span class="line">命令行+配置文件 不需要重启就是永久失效</span><br><span class="line"><span class="comment">#但是用root用户，对root不生效</span></span><br></pre></td></tr></table></figure><p>3、</p><p><img src="../image/study_img/image-20240826150832618.png" alt="image-20240826150832618"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解决办法</span></span><br><span class="line">1、主库停止主从复制</span><br><span class="line">root@localhost:(none) &gt; stop slave;</span><br><span class="line"></span><br><span class="line">2、在主库上查看当前位置点</span><br><span class="line">root@localhost:(none) &gt; show master status;</span><br><span class="line">+------------------+----------+--------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB |</span><br><span class="line">+------------------+----------+--------------+</span><br><span class="line">| mysql-bin.000016 |  5235939 |              |</span><br><span class="line">+------------------+----------+--------------+</span><br><span class="line"></span><br><span class="line">3、从库打点全备，到从库，</span><br><span class="line">[root@db01 ~]# mysqldump -uroot -p123 -A -R --triggers --master-data=1 --single-transaction|gzip &gt; /tmp/full.sql.gz</span><br><span class="line">[root@db01 ~]# scp /tmp/full.sql.gz 172.16.1.52:/tmp</span><br><span class="line"></span><br><span class="line">4、从库再从当前位置点开始复制</span><br><span class="line">[root@db02 ~]# zcat /tmp/full.sql.gz |mysql -uroot -p123</span><br><span class="line">[root@db02 ~]# mysql -uroot -p123</span><br><span class="line"></span><br><span class="line">5、#从库执行change mater 语句</span><br><span class="line">change master to</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_log_file=<span class="string">&#x27;mysql-bin.000016&#x27;</span>,</span><br><span class="line">master_log_pos=5235939,</span><br><span class="line">master_port=3306;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6、#从库开启主从复制</span><br><span class="line">root@localhost:(none) &gt; start slave;</span><br><span class="line">查看数据是否同步</span><br><span class="line">root@localhost:(none) &gt; show slave status\G</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p><strong>生产环境中，如何添加一台从库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新从库环境初始化  (db04)</span></span><br><span class="line">目前db01主库已经有一些数据了，假设db01是生产环境的主库，还有数据在网里面写入</span><br><span class="line">运行脚本</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld stop</span><br><span class="line">[root@db02 ~]# <span class="built_in">rm</span> -rf /app/mysql-5.6.50/data</span><br><span class="line">配置文件和旧环境大部分保持一致</span><br><span class="line">[root@db02 ~]# vim /etc/my.cnf</span><br><span class="line">[root@db02 ~]# /app/mysql-5.6.50/scripts/mysql_install_db --user=mysql --basedir=/app/mysql-5.6.50 --datadir=/app/mysql-5.6.50/data</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld start; mysqladmin -uroot -p password <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line">1、#主库打点全备(热备 不锁表)</span><br><span class="line">[root@db01 ~]#  mysqldump -uroot -p123 -A -R --triggers --master-data=1 --single-transaction|gzip &gt; /tmp/full.sql.gz</span><br><span class="line"></span><br><span class="line">但是zcat的文件里面有loca table 为什么锁表呢？</span><br><span class="line">它是用这个文件往里恢复数据的时候锁表，文件显示的是恢复过程，备份的时候不锁表的，不是备份的过程，是在恢复的时候锁住</span><br><span class="line"></span><br><span class="line">2、#从库恢复主库全备数据</span><br><span class="line">[root@db01 ~]# scp /tmp/full.sql.gz 172.16.1.54:/tmp</span><br><span class="line"></span><br><span class="line">[root@db04 ~]# zcat /tmp/full.sql.gz |mysql -uroot -p123</span><br><span class="line"></span><br><span class="line">3、#从查看数据少了，查看点位，直接从打点的位置开始复制</span><br><span class="line">[root@db01 ~]# zcat /tmp/full.sql.gz |<span class="built_in">head</span> -25</span><br><span class="line">CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000016&#x27;</span>, MASTER_LOG_POS=984578;</span><br><span class="line"></span><br><span class="line">5、#从库执行change mater 语句</span><br><span class="line">change master to</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_log_file=<span class="string">&#x27;mysql-bin.000016&#x27;</span>,</span><br><span class="line">master_log_pos=984578,</span><br><span class="line">master_port=3306;</span><br><span class="line"></span><br><span class="line">6、#从库开启主从复制</span><br><span class="line">root@localhost:(none) &gt; start slave;</span><br><span class="line">查看数据是否同步</span><br><span class="line">root@localhost:(none) &gt; show slave status\G</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><h3 id="2、延时复制">2、延时复制</h3><p><strong>传统主从复制的缺陷</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、传统主从复制无法备份</span><br><span class="line">2、传统主从复制无法过滤复制</span><br><span class="line">3、传统主从复制速度相对来说比较慢</span><br><span class="line">4、传统主从复制是异步复制，从库数据延迟(每台从库数据不是百分百一致，每台从库的数据不一致，但这个是不可避免的，在生产中一定有延迟)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant replication slave on prod.* to slave@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">ERROR 1221 (HY000): Incorrect usage of DB GRANT and GLOBAL PRIVILEGES</span><br><span class="line"><span class="comment">#replication 这是一个全局的权限</span></span><br></pre></td></tr></table></figure><p><strong>延时从库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#企业一般会延时3~6小时</span></span><br><span class="line">1、做延时从库的服务器无法在生产中提供服务(这个机器就是一个备机)</span><br><span class="line">2、备份</span><br><span class="line">3、恢复数据速度更快</span><br><span class="line">4、延时从库不影响高可用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">延时从库的原理：在SQL线程做手脚，IO线程继续拿数据，SQL线程在指定时间后，延时执行</span><br><span class="line"></span><br><span class="line">(怎么做，才能让他延迟3~6小时？)</span><br><span class="line"><span class="comment">#会设置SQL线程在指定的时间后再执行</span></span><br></pre></td></tr></table></figure><p>延时从库的原理</p><p><img src="../image/study_img/image-20240826144421626.png" alt="image-20240826144421626"></p><p><strong>配置延时从库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命令：重置主从复制 :他会把所有相关文件重置</span></span><br><span class="line">需要修改某些参数的时候才用(比如说位置点写错了，密码写错了)</span><br><span class="line">mysql&gt; change master to</span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,master_user=<span class="string">&#x27;rep&#x27;</span>,master_password=<span class="string">&#x27;123&#x27;</span>,master_log_file=<span class="string">&#x27;mysql-bin.000003&#x27;</span>,master_log_pos=154;</span><br><span class="line"></span><br><span class="line">reset slave;     会保留之前chang masetr的信息</span><br><span class="line"></span><br><span class="line">reset slave all;  (完全重置主从，保留任何信息，取消从库身份的时候)</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止主从复制</span></span><br><span class="line">stop slave;  </span><br><span class="line"></span><br><span class="line"><span class="comment">#就是在SQL-Delay加延迟时间</span></span><br><span class="line"><span class="comment">#将db04变成延时从库</span></span><br><span class="line"></span><br><span class="line">1、#停止主从复制</span><br><span class="line">root@localhost:(none) &gt; stop slave;</span><br><span class="line"></span><br><span class="line">2、#重置主从信息</span><br><span class="line">root@localhost:(none) &gt; reset salve;</span><br><span class="line"></span><br><span class="line">3、#配置SQL线程延迟复制时间   180 3min</span><br><span class="line">root@localhost:(none) &gt; chang master to master_delay=180;</span><br><span class="line"></span><br><span class="line">4、#开启主从复制，并查看状态</span><br><span class="line">root@localhost:(none) &gt; start slave;</span><br><span class="line">root@localhost:(none) &gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: </span><br><span class="line">               Master_Host: 172.16.1.51</span><br><span class="line">               ......</span><br><span class="line">               SQL_Delay: 180</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置延时从库，导致数据不一致，当让数据一致的解决办法</span></span><br><span class="line">1、#从库操作</span><br><span class="line">root@localhost:(none) &gt; stop slave;</span><br><span class="line">root@localhost:(none) &gt; reset slave;</span><br><span class="line">root@localhost:(none) &gt; change master to master_delay=0;</span><br><span class="line"></span><br><span class="line">2、主库操作</span><br><span class="line">[root@db01 ~]#  mysqldump -A -uroot -p123 &gt; /tmp/full.sql</span><br><span class="line">[root@db01 ~]# scp /tmp/full.sql.gz 172.16.1.52:/tmp</span><br><span class="line"></span><br><span class="line">3、从库恢复数据</span><br><span class="line">root@localhost:world &gt; <span class="built_in">source</span> /tmp/full.sql;</span><br><span class="line"></span><br><span class="line">4、主库查看位置点</span><br><span class="line">root@localhost:(none) &gt; show master status;</span><br><span class="line">+------------------+----------+--------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB |</span><br><span class="line">+------------------+----------+--------------+</span><br><span class="line">| mysql-bin.000016 |  5366820 |              |</span><br><span class="line">+------------------+----------+--------------+</span><br><span class="line"></span><br><span class="line">5、#从库执行change mater 语句</span><br><span class="line">change master to</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_log_file=<span class="string">&#x27;mysql-bin.000016&#x27;</span>,</span><br><span class="line">master_log_pos=5366820,</span><br><span class="line">master_port=3306;</span><br><span class="line"></span><br><span class="line">root@localhost:world &gt; start slave;</span><br><span class="line">root@localhost:world &gt; show slave status\G</span><br></pre></td></tr></table></figure><p><strong>延时从库恢复案例</strong></p><p>总数据量级500G，正常备份去恢复需要1.5-2小时<br>1）配置延时3600秒<br>mysql&gt;CHANGE MASTER TO MASTER_DELAY = 3600;</p><p>2）主库<br>drop database db;</p><p>3）怎么利用延时从库，恢复数据？</p><p>1、模拟数据准备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">1、#主库db01执行写入数据的脚本</span><br><span class="line">[root@db01 ~]# sh insert.sh </span><br><span class="line"></span><br><span class="line">2、先保证其他从库的数据是一致的，主从同步没问题</span><br><span class="line"></span><br><span class="line">3、主库创建一个库，写入数据</span><br><span class="line">root@localhost:(none) &gt; create database asm;</span><br><span class="line">root@localhost:(none) &gt; flush logs;</span><br><span class="line">root@localhost:(none) &gt; use asm</span><br><span class="line">root@localhost:(none) &gt; create table asm(<span class="built_in">id</span> int);</span><br><span class="line">root@localhost:(none) &gt; insert into asm values(1),(2),(3);</span><br><span class="line">root@localhost:(none) &gt; update asm <span class="built_in">set</span> <span class="built_in">id</span>=10 <span class="built_in">where</span> <span class="built_in">id</span>=1;</span><br><span class="line"></span><br><span class="line">4、主库打点全备</span><br><span class="line">[root@db01 ~]# mysqldump -uroot -p123 -A -R --triggers --master-data=2 --single-transaction  &gt; /tmp/full.sql.gz</span><br><span class="line">[root@db01 ~]# scp /tmp/full.sql.gz 172.16.1.52:/tmp</span><br><span class="line"></span><br><span class="line">5、从库从库位置点</span><br><span class="line">[root@db02 ~]# <span class="built_in">head</span> -25 /tmp/full.sql.gz </span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000017&#x27;</span>, MASTER_LOG_POS=99930;</span><br><span class="line">[root@db02 ~]#  mysql -uroot -p123 &lt; /tmp/full.sql.gz </span><br><span class="line"></span><br><span class="line">6、让从库db02变成一个延时从库</span><br><span class="line">root@localhost:world &gt; <span class="keyword">select</span> * from asm.asm;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|   10 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">+------+</span><br><span class="line">root@localhost:world &gt; stop slave;</span><br><span class="line">root@localhost:world &gt; reset slave all;</span><br><span class="line"></span><br><span class="line">7、从库执行change mater 语句</span><br><span class="line">change master to</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_log_file=<span class="string">&#x27;mysql-bin.000017&#x27;</span>,</span><br><span class="line">master_log_pos=99930,</span><br><span class="line">master_port=3306,</span><br><span class="line">master_delay=180;</span><br><span class="line"></span><br><span class="line">root@localhost:world &gt; start slave;</span><br><span class="line">root@localhost:world &gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           Slave_IO_Running: Yes</span><br><span class="line">          Slave_SQL_Running: Yes</span><br><span class="line">          .........</span><br><span class="line">          SQL_Delay: 180</span><br><span class="line">          SQL_Remaining_Delay: 0</span><br><span class="line">          </span><br><span class="line"></span><br><span class="line">8、主库里面再写点数据，从库里面查看现在数据还没有写过来，把主库的库删除</span><br><span class="line">root@localhost:asm &gt; insert into asm values(4),(5),(6);</span><br><span class="line">root@localhost:asm &gt; <span class="keyword">select</span> * from asm.asm;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|   10 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">|    4 |</span><br><span class="line">|    5 |</span><br><span class="line">|    6 |</span><br><span class="line">+------+      </span><br><span class="line">root@localhost:(none) &gt; drop database asm;</span><br></pre></td></tr></table></figure><p>2、恢复数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">(企业中的盘)SAS  Flash(最接近内存性能的盘) </span><br><span class="line">SATA(电脑的盘)</span><br><span class="line">mysq1&gt; change master to master_delay=0;  取消延时复制</span><br><span class="line"></span><br><span class="line"><span class="comment">#恢复思路    用db02做延时从库</span></span><br><span class="line">1、#停止db02延时从库的SQL线程</span><br><span class="line">root@localhost:(none) &gt; stop slave SQL_thread;</span><br><span class="line"></span><br><span class="line">2、#准备新环境</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld stop</span><br><span class="line">[root@db02 ~]# <span class="built_in">rm</span> -rf /app/mysql-5.6.50/data</span><br><span class="line">配置文件和旧环境大部分保持一致</span><br><span class="line">[root@db02 ~]# vim /etc/my.cnf</span><br><span class="line">[root@db02 ~]# /app/mysql-5.6.50/scripts/mysql_install_db --user=mysql --basedir=/app/mysql-5.6.50 --datadir=/app/mysql-5.6.50/data</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld start; mysqladmin -uroot -p password <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line">3、#延时从库做全备  (从库没有开binlog  不用打点全备)</span><br><span class="line">[root@db02 ~]# mysqldump -uroot -p123 -A -R --triggers &gt; /tmp/full_new.sql</span><br><span class="line"></span><br><span class="line">4、#截取删库之前relay-log.info数据  (查看从库执行到哪个位置点)</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /app/mysql-5.6.50/data/relay-log.info </span><br><span class="line">7</span><br><span class="line">./db02-relay-bin.000002  <span class="comment">#结束位置点的文件</span></span><br><span class="line">171031  <span class="comment">#开始位置点</span></span><br><span class="line">mysql-bin.000017</span><br><span class="line">270678</span><br><span class="line">180</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">开始位置点：171031  </span><br><span class="line"></span><br><span class="line">[root@db02 ~]# mysqlbinlog --base64-output=decode-rows -vvv /app/mysql-5.6.50/data/db02-relay-bin.000002 | grep -iC 10 drop</span><br><span class="line">结束位置点：194850</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# mysqlbinlog --start-position=171031 --stop-position=194850  /app/mysql-5.6.50/data/db02-relay-bin.000002 &gt; /tmp/inc1.sql</span><br><span class="line"></span><br><span class="line">5、截取删库之后的数据 需要停止数据写入</span><br><span class="line">[root@db01 ~]# sh insert.sh ^C</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|     3442 |</span><br><span class="line">+----------+  <span class="comment">#记录停库前数据最后写入的状态</span></span><br><span class="line"></span><br><span class="line">6、截取删库之前的位置点~停库的位置点数据</span><br><span class="line">[root@db02 ~]# mysqlbinlog --base64-output=decode-rows -vvv /app/mysql-5.6.50/data/db02-relay-bin.000002 | grep -iC 10 drop</span><br><span class="line">开始位置点：194939 </span><br><span class="line"></span><br><span class="line">[root@db02 ~]# ll /app/mysql-5.6.50/data/</span><br><span class="line">-rw-rw---- 1 mysql mysql   489751 Aug 26 17:21 db02-relay-bin.000002</span><br><span class="line">结束位置点：489751</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# mysqlbinlog --start-position=194939 --stop-position=489751  /app/mysql-5.6.50/data/db02-relay-bin.000002 &gt; /tmp/inc2.sql</span><br><span class="line"></span><br><span class="line">7、准备新环境<span class="string">&#x27;db03&#x27;</span></span><br><span class="line">[root@db03 ~]# /etc/init.d/mysqld stop</span><br><span class="line">[root@db03 ~]# <span class="built_in">rm</span> -rf /app/mysql-5.6.50/data</span><br><span class="line">配置文件和旧环境大部分保持一致</span><br><span class="line">[root@db03 ~]# vim /etc/my.cnf</span><br><span class="line">[root@db03 ~]# /app/mysql-5.6.50/scripts/mysql_install_db --user=mysql --basedir=/app/mysql-5.6.50 --datadir=/app/mysql-5.6.50/data</span><br><span class="line">[root@db03 ~]# /etc/init.d/mysqld start; mysqladmin -uroot -p password <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line">7、将延时从库的全备导入新环境</span><br><span class="line">[root@db02 ~]# scp /tmp/full_new.sql  172.16.1.53:/tmp</span><br><span class="line">[root@db03 ~]#  mysql -uroot -p123 &lt; /tmp/full_new.sql </span><br><span class="line"></span><br><span class="line">查看新环境的数据状态</span><br><span class="line">[root@db03 ~]#  mysql -uroot -p123</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|     1731 |</span><br><span class="line">+----------+  <span class="comment">#可以看到数据还不全</span></span><br><span class="line"></span><br><span class="line">8、恢复延迟查看截取的第一段，第二段新增数据到新环境</span><br><span class="line">[root@db02 ~]# scp /tmp/inc1.sql   172.16.1.53:/tmp</span><br><span class="line">[root@db02 ~]# scp /tmp/inc2.sql   172.16.1.53:/tmp</span><br><span class="line">[root@db03 ~]#  mysql -uroot -p123 &lt; /tmp/inc1.sql</span><br><span class="line">[root@db03 ~]#  mysql -uroot -p123 &lt; /tmp/inc2.sql</span><br><span class="line"></span><br><span class="line">9、新环境db03查看数据是否恢复</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|     3442 |</span><br><span class="line">+----------+</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> * from asm.asm;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|   10 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">|    4 |</span><br><span class="line">|    5 |</span><br><span class="line">|    6 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">10、应用割接</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>取消延时从库的步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将db02延时从库取消配置</span></span><br><span class="line">root@localhost:(none) &gt; stop slave;</span><br><span class="line"></span><br><span class="line">root@localhost:(none) &gt; change master to master_delay=0;</span><br><span class="line"></span><br><span class="line">root@localhost:(none) &gt; start slave;</span><br><span class="line"></span><br><span class="line">root@localhost:(none) &gt; show slave status\G</span><br><span class="line"><span class="comment">#查看线程可能有报错</span></span><br><span class="line">主库打点全备</span><br><span class="line">[root@db01 ~]#  mysqldump -uroot -p123 -A -R --triggers --master-data=2 --single-transaction  &gt; /tmp/full.sql.gz</span><br><span class="line"></span><br><span class="line">[root@db01 ~]# scp /tmp/full.sql.gz 172.16.1.52:/tmp </span><br><span class="line">[root@db01 ~]# <span class="built_in">head</span> -25 /tmp/full.sql.gz</span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000017&#x27;</span>, MASTER_LOG_POS=589398;</span><br><span class="line"></span><br><span class="line">、从库恢复数据</span><br><span class="line">root@localhost:world &gt; <span class="built_in">source</span> /tmp/full.sql;</span><br><span class="line"></span><br><span class="line">、主库查看位置点</span><br><span class="line">root@localhost:(none) &gt; show master status;</span><br><span class="line">+------------------+----------+--------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB |</span><br><span class="line">+------------------+----------+--------------+</span><br><span class="line">| mysql-bin.000017 |  589398  |              |</span><br><span class="line">+------------------+----------+--------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">、#从库执行change mater 语句</span><br><span class="line">root@localhost:(none) &gt; stop slave;</span><br><span class="line"></span><br><span class="line">change master to</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_log_file=<span class="string">&#x27;mysql-bin.000017&#x27;</span>,</span><br><span class="line">master_log_pos=589398,</span><br><span class="line">master_port=3306;</span><br><span class="line"></span><br><span class="line">root@localhost:world &gt; start slave;</span><br><span class="line">root@localhost:world &gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 172.16.1.51</span><br><span class="line">                  Master_User: rep</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000017</span><br><span class="line">          Read_Master_Log_Pos: 589398</span><br><span class="line">               Relay_Log_File: db02-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 283</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000017</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><h3 id="3、半同步复制">3、<strong>半同步复制</strong></h3><p>半同步复制出现的原因：为了保证主库和从库的数据一致性</p><p>从库的IO线程在没有接收到ACK之前，会阻塞主库写入操作<br>半同步缺点：阻塞主库写入数据，影响主库性能，降低用户体验<br>半同步优点：主库和从库数据保证了一致性，不会丢数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">从MYSQL5.5开始，支持半自动复制。之前版本的MySQL Replication都是异步（asynchronous）的，主库在执行完一些事务后，是不会管备库的进度的。如果备库不幸落后，而更不幸的是主库此时又出现Crash（例如宕机），这时备库中的数据就是不完整的。简而言之，在主库发生故障的时候，我们无法使用备库来继续提供数据一致的服务了。</span><br><span class="line"></span><br><span class="line">半同步复制（Semi synchronous Replication）则一定程度上保证提交的事务已经传给了至少一个备库。</span><br><span class="line">出发点是保证主从数据一致性问题，安全的考虑。</span><br><span class="line">5.5 出现概念，但是不建议使用，性能太差</span><br><span class="line">5.6出现group commit 组提交功能，来提升开启半同步复制的性能</span><br><span class="line">5.7更加完善了，在group commit基础上出现了MGR</span><br><span class="line">5.7的增强半同步复制的新特性：after commit； after <span class="built_in">sync</span>；</span><br><span class="line"></span><br><span class="line"><span class="comment">#什么情况下代表数据写完了，而且完整</span></span><br><span class="line">TCP缓存会返回一个ACK给IO线程</span><br><span class="line"></span><br><span class="line"><span class="comment">#半同步复制(在IO线程做手脚)</span></span><br><span class="line">IO线程取出数据后，IO线程不返回ACK，IO线程就不去给Dump线程要数据</span><br><span class="line">只要从库IO线程没有接到ACK之前，会阻塞主库写入操作(为了数据的一致性，影响主库性能导致用户的体验下降)</span><br><span class="line"><span class="comment">#开不开半同步取决于公司，但几乎很少开</span></span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240826181704110.png" alt="image-20240826181704110"></p><p>半同步的插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]# ll /app/mysql-5.6.50/lib/plugin/</span><br><span class="line">-rwxr-xr-x 1 mysql mysql 515584 Aug  7 19:52 semisync_master.so</span><br><span class="line">-rwxr-xr-x 1 mysql mysql 276296 Aug  7 19:52 semisync_slave.so</span><br><span class="line"></span><br><span class="line">为什么不是自动安装这两个插件？</span><br><span class="line">1、不是每个公司都有开半同步</span><br><span class="line">2、先做主从之后才能开半同步</span><br></pre></td></tr></table></figure><p><strong>半同步复制的配置</strong></p><p>1、db01主库操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">1、主库查看是否支持半同步</span><br><span class="line">root@localhost:(none) &gt; show global variables like <span class="string">&#x27;have_dynamic_loading&#x27;</span>;</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| Variable_name        | Value |</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| have_dynamic_loading | YES   |</span><br><span class="line">+----------------------+-------+</span><br><span class="line"></span><br><span class="line">2、主库需要安装半同步插件</span><br><span class="line">root@localhost:(none) &gt; install plugin rpl_semi_sync_master soname<span class="string">&#x27;semisync_master.so&#x27;</span>;</span><br><span class="line"></span><br><span class="line">3、启动插件+设置超时时间(临时的) </span><br><span class="line">root@localhost:(none) &gt; SET GLOBAL rpl_semi_sync_master_enabled = 1;</span><br><span class="line">root@localhost:(none) &gt; <span class="built_in">set</span> global rpl_semi_sync_master_timeout = 1000;</span><br><span class="line"></span><br><span class="line">4、#永久启动写在配置文件里面+超时时间  设置超时 1000ms=1s</span><br><span class="line">超过10s还没有写完数据，会停止半同步，恢复成异步复制(如果想要永久失效就写在配置文件里面)</span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">....</span><br><span class="line">rpl_semi_sync_master_enabled=1</span><br><span class="line">rpl_semi_sync_master_timeout = 1000</span><br><span class="line"></span><br><span class="line">5、检查</span><br><span class="line">root@localhost:(none) &gt; show variables like<span class="string">&#x27;rpl%&#x27;</span>;</span><br><span class="line">root@localhost:(none) &gt; show variables like<span class="string">&#x27;rpl%&#x27;</span>;</span><br><span class="line">+------------------------------------+----------+</span><br><span class="line">| Variable_name                      | Value    |</span><br><span class="line">+------------------------------------+----------+</span><br><span class="line">| rpl_semi_sync_master_enabled       | ON       |#开启</span><br><span class="line">| rpl_semi_sync_master_timeout       | 1000     |#超时时间</span><br><span class="line">| rpl_semi_sync_master_trace_level   | 32       |#路由的级别</span><br><span class="line">| rpl_semi_sync_master_wait_no_slave | ON       |</span><br><span class="line">| rpl_stop_slave_timeout             | 31536000 |#停止从库的超时时间</span><br><span class="line">+------------------------------------+----------+</span><br><span class="line"></span><br><span class="line">root@localhost:(none) &gt; show global status like <span class="string">&#x27;rpl_semi%&#x27;</span>;</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">| Variable_name                              | Value |</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">| Rpl_semi_sync_master_clients               | 0     |#0代表客户端还没有</span><br><span class="line">| Rpl_semi_sync_master_net_avg_wait_time     | 0     |</span><br><span class="line">| Rpl_semi_sync_master_net_wait_time         | 0     |</span><br><span class="line">| Rpl_semi_sync_master_net_waits             | 0     |</span><br><span class="line">| Rpl_semi_sync_master_no_times              | 0     |</span><br><span class="line">| Rpl_semi_sync_master_no_tx                 | 0     |</span><br><span class="line">| Rpl_semi_sync_master_status                | ON    |</span><br><span class="line">| Rpl_semi_sync_master_timefunc_failures     | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_avg_wait_time      | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_wait_time          | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_waits              | 0     |</span><br><span class="line">| Rpl_semi_sync_master_wait_pos_backtraverse | 0     |</span><br><span class="line">| Rpl_semi_sync_master_wait_sessions         | 0     |</span><br><span class="line">| Rpl_semi_sync_master_yes_tx                | 0     |</span><br><span class="line">+--------------------------------------------+-------+</span><br></pre></td></tr></table></figure><p>2、db02从库配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从库配置</span></span><br><span class="line">1、安装插件</span><br><span class="line">root@localhost:world &gt; INSTALL PLUGIN rpl_semi_sync_slave SONAME<span class="string">&#x27;semisync_slave.so&#x27;</span>;</span><br><span class="line"></span><br><span class="line">3、启动插件(临时启动)</span><br><span class="line">root@localhost:world &gt; SET GLOBAL rpl_semi_sync_slave_enabled = 1;</span><br><span class="line">永久生效</span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">....</span><br><span class="line">rpl_semi_sync_slave_enabled = 1</span><br><span class="line"></span><br><span class="line">4、重启IO线程</span><br><span class="line">root@localhost:world &gt; stop slave io_thread;</span><br><span class="line">root@localhost:world &gt; start slave io_thread;</span><br><span class="line"></span><br><span class="line">5、到主库查看是否有从库变成半同步</span><br><span class="line">root@localhost:(none) &gt; show global status like <span class="string">&#x27;rpl_semi%&#x27;</span>;</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">| Variable_name                              | Value |</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">| Rpl_semi_sync_master_clients               | 1     |#有一个客户端</span><br><span class="line">| Rpl_semi_sync_master_net_avg_wait_time     | 0     |</span><br><span class="line">| Rpl_semi_sync_master_net_wait_time         | 0     |</span><br><span class="line">| Rpl_semi_sync_master_net_waits             | 0     |</span><br><span class="line">| Rpl_semi_sync_master_no_times              | 0     |</span><br><span class="line">| Rpl_semi_sync_master_no_tx                 | 0     |</span><br><span class="line">| Rpl_semi_sync_master_status                | ON    |</span><br><span class="line">| Rpl_semi_sync_master_timefunc_failures     | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_avg_wait_time      | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_wait_time          | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_waits              | 0     |</span><br><span class="line">| Rpl_semi_sync_master_wait_pos_backtraverse | 0     |</span><br><span class="line">| Rpl_semi_sync_master_wait_sessions         | 0     |</span><br><span class="line">| Rpl_semi_sync_master_yes_tx                | 0     |</span><br><span class="line">+--------------------------------------------+-------+</span><br></pre></td></tr></table></figure><p>3、测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1、主库创建一个库</span><br><span class="line">root@localhost:(none) &gt; create database abc111;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)   <span class="comment">#配置之后，主库建库时间变快</span></span><br><span class="line"></span><br><span class="line">root@localhost:(none) &gt; create database abc112;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">root@localhost:(none) &gt; create database abc113;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">root@localhost:(none) &gt; create database abc114;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">2、查看状态，会记录平均等待时间  （ms为单位）</span><br><span class="line">root@localhost:(none) &gt; show global status like <span class="string">&#x27;rpl_semi%&#x27;</span>;</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">| Variable_name                              | Value |</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">| Rpl_semi_sync_master_clients               | 1     |</span><br><span class="line">| Rpl_semi_sync_master_net_avg_wait_time     | 4199  |</span><br><span class="line">| Rpl_semi_sync_master_net_wait_time         | 16799 |</span><br><span class="line">| Rpl_semi_sync_master_net_waits             | 4     |</span><br><span class="line">| Rpl_semi_sync_master_no_times              | 0     |</span><br><span class="line">| Rpl_semi_sync_master_no_tx                 | 0     |</span><br><span class="line">| Rpl_semi_sync_master_status                | ON    |</span><br><span class="line">| Rpl_semi_sync_master_timefunc_failures     | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_avg_wait_time      | 4286  |#平均等待时间 </span><br><span class="line">| Rpl_semi_sync_master_tx_wait_time          | 17144 |</span><br><span class="line">| Rpl_semi_sync_master_tx_waits              | 4     |#一共4条语句</span><br><span class="line">| Rpl_semi_sync_master_wait_pos_backtraverse | 0     |</span><br><span class="line">| Rpl_semi_sync_master_wait_sessions         | 0     |</span><br><span class="line">| Rpl_semi_sync_master_yes_tx                | 4     |#成功执行4条语句</span><br><span class="line">+--------------------------------------------+-------+</span><br></pre></td></tr></table></figure><p>关闭半同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@localhost:world &gt; SET GLOBAL rpl_semi_sync_slave_enabled = 0;</span><br><span class="line">配置文件取消</span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">....</span><br><span class="line"><span class="comment">#rpl_semi_sync_slave_enabled = 1</span></span><br></pre></td></tr></table></figure><h3 id="4、mysql的过滤复制">4、<strong>mysql的过滤复制</strong></h3><p>每个从库只想复制一个库</p><p><img src="../image/study_img/image-20240826200642230.png" alt="image-20240826200642230"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法：</span><br><span class="line">可以在主库配置：配置白名单或者黑名单</span><br><span class="line">可以在从库配置：配置白名单或者黑名单</span><br></pre></td></tr></table></figure><p><strong>方法一：主库配置(一般不用)</strong></p><ul><li>binlog-do-db：白名单：只记录白名单中列出的库的二进制日志</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">规范的sql语句先use一个库，再写数据</span><br><span class="line"><span class="comment">#在binlog做手脚：binlog只记录prod库的数据，其他的不记录</span></span><br><span class="line"></span><br><span class="line">1、#只复制单库</span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">binlog-do-db=prod</span><br><span class="line"></span><br><span class="line">2、#重启</span><br><span class="line">[root@db01 ~]# /etc/init.d/mysqld restart</span><br><span class="line"></span><br><span class="line">3、#重启之后，从库的主从复制需要重启</span><br><span class="line">root@localhost:world &gt; stop slave;start slave;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、#主库查看状态：只复制prod这个库的二进制日志</span><br><span class="line">root@localhost:(none) &gt; show master status;</span><br><span class="line">+------------------+----------+--------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB |</span><br><span class="line">+------------------+----------+--------------+</span><br><span class="line">| mysql-bin.000018 |      120 | prod         |#从库只复制prod这个库的二进制日志</span><br><span class="line">+------------------+----------+--------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#复制多个库</span></span><br><span class="line">1、#配置文件写库名字，有几个库就写几行</span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">binlog-do-db=prod</span><br><span class="line">binlog-do-db=world</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#重启</span><br><span class="line">[root@db01 ~]# /etc/init.d/mysqld restart</span><br><span class="line"></span><br><span class="line">3、#重启之后，从库的主从复制需要重启</span><br><span class="line">root@localhost:world &gt; stop slave;start slave;</span><br><span class="line"></span><br><span class="line">4、#主库查看状态：只复制prod和world这2个库的二进制日志</span><br><span class="line">root@localhost:(none) &gt; show master status;</span><br><span class="line">+------------------+----------+--------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB |</span><br><span class="line">+------------------+----------+--------------+</span><br><span class="line">| mysql-bin.000019 |      120 | prod,world   |</span><br><span class="line">+------------------+----------+--------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">1、#主库往prod库里面写数据</span><br><span class="line">root@localhost:(none) &gt; use prod</span><br><span class="line">root@localhost:prod &gt; insert into prod values(77777);</span><br><span class="line"></span><br><span class="line">2、#从库查看</span><br><span class="line">root@localhost:world &gt; <span class="keyword">select</span> * from prod.prod;</span><br><span class="line">+-------+</span><br><span class="line">| 77777 |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure><ul><li>binlog-ignore-db：黑名单：不记录黑名单列出的库的二进制日志</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在binlog做手脚：binlog不记录abc库的数据，其他的都记录</span></span><br><span class="line"></span><br><span class="line">1、#不复制单库</span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">binlog-ignore-db=abc</span><br><span class="line"></span><br><span class="line">2、#重启</span><br><span class="line">[root@db01 ~]# /etc/init.d/mysqld restart</span><br><span class="line"></span><br><span class="line">3、#重启之后，从库的主从复制需要重启</span><br><span class="line">root@localhost:world &gt; stop slave;start slave;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、#主库查看状态：只复制prod这个库的二进制日志</span><br><span class="line">root@localhost:(none) &gt; show master status;</span><br><span class="line">root@localhost:prod &gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | </span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| mysql-bin.000020 |      120 |              | abc              | </span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line"><span class="comment">#从库不复制abc这个库的二进制日志</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#不复制多个库</span></span><br><span class="line">1、#配置文件写库名字，有几个库就写几行</span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">binlog-ignore-db=abc</span><br><span class="line">binlog-ignore-db=aaa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#重启</span><br><span class="line">[root@db01 ~]# /etc/init.d/mysqld restart</span><br><span class="line"></span><br><span class="line">3、#重启之后，从库的主从复制需要重启</span><br><span class="line">root@localhost:world &gt; stop slave;start slave;</span><br><span class="line"></span><br><span class="line">4、#主库查看状态：只复制prod和world这2个库的二进制日志</span><br><span class="line">root@localhost:(none) &gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | </span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| mysql-bin.000020 |      120 |              | abc,aaa          | </span><br><span class="line">+------------------+----------+--------------+------------------+</span><br></pre></td></tr></table></figure><p><strong>方法二：从库配置(常用)</strong></p><p>白名单：只执行白名单中列出的库或者表的中继日志</p><ul><li>replicate-do-db=prod    (库里所有表都复制)</li><li>replicate-do-table=prod.prod     (库里的某一张表复制)</li><li>replicate-wild-do-table=prod.p*    (库里以p开头的表都复制)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">binlog不记录指定的库，其他的都记录</span><br><span class="line"></span><br><span class="line">表里面SQL线程只执行 Replicat_Do_DB指定的库的SQL语句</span><br><span class="line"></span><br><span class="line">1、#从库配置文件配置</span><br><span class="line">[root@db02 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">replicate-do-db=prod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#从库重启</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld restart</span><br><span class="line"></span><br><span class="line">3、#从库查看状态：只复制prod和world这2个库的二进制日志</span><br><span class="line">root@localhost:(none) &gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">.....</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: prod   <span class="comment">#只复制prod库</span></span><br></pre></td></tr></table></figure><p>黑名单：不执行黑名单中列出的库或者表的中继日志</p><ul><li>replicate-ignore-db=abc    (库里所有表不复制)</li><li>replicate-ignore-table=abc.abc    (库里的某一张表不复制)</li><li>replicate-wild-ignore-table=abc.a*      (库里以p开头的表都不复制)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">SQL线程不执行 Replicat_Ignore_DB指定的库的SQL语句</span><br><span class="line"></span><br><span class="line">1、#从库配置文件配置</span><br><span class="line">[root@db02 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">replicate-ignore-db=abc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#从库重启</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld restart</span><br><span class="line"></span><br><span class="line">3、#从库查看状态：只复制prod和world这2个库的二进制日志</span><br><span class="line">root@localhost:(none) &gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">.....</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: abc   <span class="comment">#不复制abc库</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">mysql的主从复制、延时复制、半同步复制、过滤复制的案例</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL数据备份和恢复</title>
    <link href="https://www.fomal.cc/posts/42021c83.html"/>
    <id>https://www.fomal.cc/posts/42021c83.html</id>
    <published>2024-09-21T09:44:27.000Z</published>
    <updated>2024-09-21T10:42:01.983Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mysql日志管理">mysql日志管理</h3><p><strong>Mysql日志管理</strong></p><p><img src="../image/study_img/image-20240820084820991.png" alt="image-20240820084820991"></p><p>1、错误日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#作用：MySql启动报错的错误信息，为了排查</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#默认是否开启：开启</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#储存位置：</span></span><br><span class="line">[root@db01 ~]# ll /app/mysql-5.6.50/data/</span><br><span class="line">-rw-rw---- 1 mysql mysql   179797 Aug 20 10:31 db01.err</span><br><span class="line"></span><br><span class="line">root@localhost:(none) &gt; show variables like <span class="string">&#x27;%err%&#x27;</span>;</span><br><span class="line">+---------------------+--------------+</span><br><span class="line">| Variable_name       | Value        |</span><br><span class="line">+---------------------+--------------+</span><br><span class="line">| log_error           | ./db01.err   | </span><br><span class="line">+---------------------+--------------+</span><br><span class="line"></span><br><span class="line"><span class="comment">#名字：hostname.err</span></span><br><span class="line">./db01.err </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置mysql错误日志的位置，但是需要提前创建这个日志文件并且授权</span></span><br><span class="line">1、创建出错误日志文件,并授权</span><br><span class="line">[root@db01 ~]# <span class="built_in">touch</span> /opt/mysql_error.txt</span><br><span class="line">[root@db01 ~]# <span class="built_in">chown</span> mysql.mysql /opt/mysql_error.txt</span><br><span class="line"></span><br><span class="line">2、修改mysql配置文件</span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line"><span class="comment">#在[mysqld]标签随便添加一行写入：</span></span><br><span class="line">log_error=/opt/mysql_error.txt  <span class="comment">#后面写上你要存放的路径</span></span><br><span class="line"></span><br><span class="line">3、重启</span><br><span class="line">[root@db01 ~]# /etc/init.d/mysqld restart</span><br></pre></td></tr></table></figure><p>2、常规日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#作用：记录常规操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#默认是否开启：否</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#储存位置：</span></span><br><span class="line">root@localhost:(none) &gt; show variables like <span class="string">&#x27;%general_log%&#x27;</span>;</span><br><span class="line">+------------------+---------------------------------+</span><br><span class="line">| Variable_name    | Value                           |</span><br><span class="line">+------------------+---------------------------------+</span><br><span class="line">| general_log      | OFF                             |</span><br><span class="line">| general_log_file | /app/mysql-5.6.50/data/db01.<span class="built_in">log</span> |</span><br><span class="line">+------------------+---------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment">#名字：hostname.log</span></span><br><span class="line">db01.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改方式：</span></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">general_log=1</span><br><span class="line">general_log_file=/app/mysql/data/db01.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>3、二进制日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#作用：只记录对数据发生变化的语句</span></span><br><span class="line">记录已提交的DML语句，并拆分为多个事件(event)来进行记录 记录所有DDL,DML,DCL</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认是否开启：否</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#储存位置：</span></span><br><span class="line">root@localhost:(none) &gt; show variables like <span class="string">&#x27;%log_bin%&#x27;</span>;</span><br><span class="line">+---------------------------------+----------------------------------------+</span><br><span class="line">| Variable_name                   | Value                                  |</span><br><span class="line">+---------------------------------+----------------------------------------+</span><br><span class="line">| log_bin                         | ON                                     |</span><br><span class="line">| log_bin_basename                | /app/mysql-5.6.50/data/mysql-bin       |</span><br><span class="line">| log_bin_index                   | /app/mysql-5.6.50/data/mysql-bin.index |</span><br><span class="line">| log_bin_trust_function_creators | OFF                                    |</span><br><span class="line">| log_bin_use_v1_row_events       | OFF                                    |</span><br><span class="line">| sql_log_bin                     | ON                                     |</span><br><span class="line">+---------------------------------+----------------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改方法 MySQL5.6</span></span><br><span class="line">修改mysql配置文件</span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line"><span class="comment">#在空行随便添加一个</span></span><br><span class="line">[mysqld]</span><br><span class="line">.....</span><br><span class="line">log_bin=mysql_bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改方法 MySQL5.7  (需要和server_id配合使用)</span></span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">.....</span><br><span class="line">server_id=1</span><br><span class="line">log-bin=mysql-bin</span><br></pre></td></tr></table></figure><p><strong>二进制的3种工作模式</strong></p><p>1、statement        语句模式(mysql5.6的默认模式)<br>2、row                  行级模式(mysql5.7的默认模式)<br>3、mixed              混合模式</p><ul><li>statement      语句模式(mysql5.6的默认模式)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前mysql5.6默认模式</span></span><br><span class="line">root@localhost:(none) &gt; show variables like <span class="string">&#x27;%binlog_format%&#x27;</span>;</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| Variable_name | Value     |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| binlog_format | STATEMENT |</span><br><span class="line">+---------------+-----------+</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前mysql5.7默认模式</span></span><br><span class="line">root@localhost:(none) &gt; show variables like <span class="string">&#x27;%binlog_format%&#x27;</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| binlog_format | ROW   |</span><br><span class="line">+---------------+-------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#语句模式的每一条语句都很清晰</span></span><br><span class="line">优点：简单易读，占用磁盘空间小</span><br><span class="line">缺点：不易读</span><br></pre></td></tr></table></figure><ul><li>row                 行级模式(mysql5.7的默认模式   企业常用的模式)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">优点：严谨记录原数据和数据的变化过程，不容易丢数据</span><br><span class="line">缺点：占用磁盘空间大，不易读</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.6开启行级模式</span></span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">.....</span><br><span class="line">binlog_format=row</span><br></pre></td></tr></table></figure><ul><li>mixed              混合模式(上面2种模式的混合     不常用)</li></ul><p><strong>二进制日志的查看方式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#二进制日志查看方式</span></span><br><span class="line">[root@db01 ~]# mysqlbinlog /app/mysql-5.6.50/data/mysql-bin.000010 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@db04 ~]# mysqlbinlog --base64-output=decode-rows -vvv /app/mysql-5.7.44/data/mysql-bin.000001 </span><br><span class="line"><span class="built_in">base64</span>加密算命去给他解码</span><br><span class="line">decode-rows:转码</span><br><span class="line">incode  编码</span><br><span class="line"></span><br><span class="line"><span class="comment">#只看和某个binlog库相关的数据   -d+库名</span></span><br><span class="line">[root@db04 ~]# mysqlbinlog --base64-output=decode-rows -vvv -d binlog /app/mysql-5.7.44/data/mysql-bin.000001 </span><br><span class="line"></span><br><span class="line">mysql5.6:一般新数据库at 120位置点之后就是写入的数据</span><br><span class="line">mysql5.7:一般新数据库at 154位置点之后就是写入的数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#mysqlbinlog用的什么工作模式，怎么解析数据的？  面试问题</span></span><br><span class="line">行级模式</span><br><span class="line">mysqlbinlog --base64-output=decode-rows -vvv    就可以解析出来</span><br></pre></td></tr></table></figure><p><strong>二进制日志的操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启方式 </span></span><br><span class="line"><span class="comment">#注意:在mysql5.7中开启binlog必须要加上server-id。</span></span><br><span class="line">[root@db01 data]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">.....</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog_format=row</span><br><span class="line">server_id=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前有哪些binlog  以及binlog的大小</span></span><br><span class="line">物理方法</span><br><span class="line">[root@db04 ~]# ll /app/mysql-5.7.44/data/</span><br><span class="line">-rw-r----- 1 mysql mysql      688 Aug 20 14:26 mysql-bin.000001</span><br><span class="line"></span><br><span class="line">mysql命令行查看</span><br><span class="line">root@localhost:(none) &gt; show binary logs;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前最新的binlog和位置点</span></span><br><span class="line">root@localhost:(none) &gt; show master status;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看指定binlog中的所有事件，不适合看行级模式</span></span><br><span class="line">root@localhost:(none) &gt; show binlog events <span class="keyword">in</span>  <span class="string">&#x27;mysql-bin.000012&#x27;</span>;</span><br></pre></td></tr></table></figure><p>事件介绍<br>1）在binlog中最小的记录单元为event<br>2）一个事务会被拆分成多个事件（event）</p><p><strong>事件的特性(binlog的特性)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1）每个event都有一个开始位置（start position）和结束位置（stop position）。</span><br><span class="line">2）所谓的位置就是event对整个二进制的文件的相对位置（文件大小）</span><br><span class="line">3）对于一个二进制日志中，前120个position是文件格式信息预留空间（MySQL5.6）。</span><br><span class="line">   对于一个二进制日志中，前154个position是文件格式信息预留空间（MySQL5.7）</span><br><span class="line">4）MySQL第一个记录的事件，都是从120开始的</span><br></pre></td></tr></table></figure><p><strong>利用二进制日志恢复数据    （MySQL 5.6）</strong></p><p>1、模拟数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">1、#刷新的binlog,并且从120开始</span><br><span class="line">root@localhost:(none) &gt; flush logs;</span><br><span class="line">root@localhost:(none) &gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000012 |      120 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"></span><br><span class="line">2、#创建binlog库 表 </span><br><span class="line">root@localhost:(none) &gt; create database binlog;</span><br><span class="line">root@localhost:(none) &gt; use binlog;</span><br><span class="line">root@localhost:binlog &gt; create table binlog_table(<span class="built_in">id</span> int);</span><br><span class="line"></span><br><span class="line">3、#插入数据</span><br><span class="line">root@localhost:binlog &gt; insert into binlog_table values(1);</span><br><span class="line">mysql&gt; <span class="keyword">select</span> * from binlog_table;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">4、#再插入数据</span><br><span class="line">root@localhost:binlog &gt; insert into binlog_table values(2);</span><br><span class="line">root@localhost:binlog &gt; insert into binlog_table values(3);</span><br><span class="line">mysql&gt; <span class="keyword">select</span> * from binlog_table;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">5、#删除一条数据</span><br><span class="line">root@localhost:binlog &gt; delete from binlog_table <span class="built_in">where</span> <span class="built_in">id</span>=1;</span><br><span class="line">root@localhost:binlog:18: &gt;<span class="keyword">select</span> * from binlog_table;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">| 2    |</span><br><span class="line">| 3    |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">6、#修改一条数据</span><br><span class="line">root@localhost:binlog &gt; update binlog_table <span class="built_in">set</span> <span class="built_in">id</span>=22 <span class="built_in">where</span> <span class="built_in">id</span>=2;</span><br><span class="line">root@localhost:binlog &gt; <span class="keyword">select</span> * from binlog_table;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|   22 |</span><br><span class="line">|    3 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">7、#删表</span><br><span class="line">root@localhost:binlog &gt; drop table binlog_table;</span><br><span class="line"></span><br><span class="line">8、#删库</span><br><span class="line">root@localhost:binlog &gt; drop database binlog;</span><br></pre></td></tr></table></figure><p>2、使用bin log 恢复数据到delete之前</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">恢复到： </span><br><span class="line">mysql&gt; <span class="keyword">select</span> * from binlog_table;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">你要知道你在这个状态之后执行了什么：执行了delete</span><br><span class="line"></span><br><span class="line">1、#准备一个新环境 db02</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld stop</span><br><span class="line">[root@db02 ~]# <span class="built_in">rm</span> -rf /app/mysql-5.6.50/data</span><br><span class="line">配置文件和旧环境大部分保持一致</span><br><span class="line">[root@db02 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/app/mysql-5.6.50</span><br><span class="line">datadir=/app/mysql-5.6.50/data</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">server_id=1</span><br><span class="line">lower_case_table=1</span><br><span class="line"><span class="comment">#innodb_data_file_path=ibdata1:12M;ibdata2:50M:autoextend</span></span><br><span class="line">binlog_format=row</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">prompt=<span class="string">&quot;\\u@\\h:\\d &gt; &quot;</span></span><br><span class="line">[root@db02 ~]# /app/mysql-5.6.50/scripts/mysql_install_db --user=mysql --basedir=/app/mysql-5.6.50 --datadir=/app/mysql-5.6.50/data</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld start</span><br><span class="line"></span><br><span class="line">2、#把旧环境的数据库进行全备</span><br><span class="line">[root@db01 ~]# mysqldump -uroot -p123 -A &gt; /tmp/full.sql</span><br><span class="line"></span><br><span class="line">3、#新环境db02创建一个可以远程连接的用户(如果数据量比较大，可以创建用户远程恢复)</span><br><span class="line">root@localhost:(none) &gt; grant all on *.* to root@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> user,host from mysql.user;</span><br><span class="line">+------+-----------+</span><br><span class="line">| user | host      |</span><br><span class="line">+------+-----------+</span><br><span class="line">| root | %         |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、#db01将全备恢复到新环境</span><br><span class="line">[root@db01 ~]# mysql -uroot -p123 -h172.16.1.52 &lt; /tmp/full.sql </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、#旧环境截取binlog</span><br><span class="line">因为一开始刷新的binlog,所以起始位置点从120开始 mysql-bin.000012</span><br><span class="line">起始位置点：120</span><br><span class="line">结束位置点: <span class="built_in">id</span>为1 2 3 之后，执行了delete   </span><br><span class="line">[root@db01 ~]# mysqlbinlog --base64-output=decode-rows -vvv /app/mysql-5.6.50/data/mysql-bin.000012 | grep -iC 10 delete</span><br><span class="line"><span class="comment"># at 937</span></span><br><span class="line"><span class="comment">#240820 11:18:12 server id 1  end_log_pos 1011 CRC32 0x9073f227         Query   thread_id=2     exec_time=0     error_code=0</span></span><br><span class="line">SET TIMESTAMP=1724123892/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line">......</span><br><span class="line">COMMIT/*!*/;</span><br><span class="line"></span><br><span class="line">查到结束位置点就是：937 (上下10行 begin 前面的at 937)</span><br><span class="line"></span><br><span class="line"><span class="comment">#截取</span></span><br><span class="line">[root@db01 ~]# mysqlbinlog --start-position=120 --stop-position=937 /app/mysql-5.6.50/data/mysql-bin.000012 &gt; /tmp/binlog.sql</span><br><span class="line"></span><br><span class="line">6、#恢复截取的数据到新环境</span><br><span class="line">[root@db01 ~]# mysql -uroot -p123 -h172.16.1.52 &lt; /tmp/binlog.sql </span><br><span class="line"></span><br><span class="line">7、#db02新环境查看数据</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> * from binlog.binlog_table;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">8、#全备完了，用户如果还在往旧数据库写数据，需要恢复</span><br><span class="line"></span><br><span class="line">9、#应用割接</span><br><span class="line">      - 开发改代码</span><br><span class="line">      - 运维导出新环境的数据到旧环境</span><br></pre></td></tr></table></figure><p><strong>存在问题</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、生产中不会刷新binlog</span><br><span class="line"></span><br><span class="line">2、生产中肯定会一直提供服务，实时都在写入数据</span><br><span class="line"></span><br><span class="line">3、生产中截取数据时，可能会截取到其他库的数据</span><br><span class="line">加上-d  只截取和binlog相关的库</span><br><span class="line">[root@db01 data]# mysqlbinlog --base64-output=decode-rows -vvv -d binlog</span><br><span class="line">/app/mysql/data/mysql-bin.000030</span><br><span class="line"></span><br><span class="line">120~937位置点中包含binlog库的数据</span><br><span class="line">[root@db01 data]# mysqlbinlog --start-position=120 --stop-position=937 -d binlog /app/mysql/data/mysql-bin.000030 &gt; /tmp/binlog.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">#所以不能单独使用binlog截取数据，可以每天凌晨一点在定时任务里面做一次全备</span></span><br><span class="line"><span class="comment">#binlog只能用来当成是增量数据的备份，一定要配合mysqldum逻辑备份的全备一起使用，单独使用非常累</span></span><br></pre></td></tr></table></figure><p><strong>binlog的刷新和删除</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#binlog刷新</span></span><br><span class="line">1、重启mysql数据库</span><br><span class="line">2、执行flush logs;</span><br><span class="line">3、mysqladmin -uroot -p123 flush-log</span><br><span class="line">4、当binlog大小到达1G,会自动刷新</span><br><span class="line"></span><br><span class="line"><span class="comment">#binlog要定期清理和删除</span></span><br><span class="line">1、根据时间删除</span><br><span class="line"><span class="comment">#临时生效</span></span><br><span class="line">root@localhost:(none) &gt; SET GLOBAL expire_logs_days = 7;</span><br><span class="line"><span class="comment">#永久生效</span></span><br><span class="line">[root@db01 data]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">expire_logs_days = 7</span><br><span class="line"></span><br><span class="line">2、根据时间删除</span><br><span class="line">root@localhost:(none) &gt; PURGE BINARY LOGS BEFORE now() - INTERVAL 3 day;</span><br><span class="line"></span><br><span class="line">3、根据文件名删除(常用)</span><br><span class="line">root@localhost:(none) &gt; PURGE BINARY LOGS TO <span class="string">&#x27;mysql-bin.000020&#x27;</span>;</span><br><span class="line">20  会把20之前的全部删除</span><br></pre></td></tr></table></figure><p>4、慢查询日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">只要会开启他就行了 他是记录执行比较慢的SQL语句</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作用：记录执行的比较慢的SQL语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认是否开启：否</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储位置：/app/mysql/data/</span></span><br><span class="line">root@localhost:(none) &gt; show variables like <span class="string">&#x27;%slow%&#x27;</span>;</span><br><span class="line">+---------------------------+--------------------------------------+</span><br><span class="line">| Variable_name             | Value                                |</span><br><span class="line">+---------------------------+--------------------------------------+</span><br><span class="line">| log_slow_admin_statements | OFF                                  |</span><br><span class="line">| log_slow_slave_statements | OFF                                  |</span><br><span class="line">| slow_launch_time          | 2                                    |</span><br><span class="line">| slow_query_log            | OFF                                  |</span><br><span class="line">| slow_query_log_file       | /app/mysql-5.6.50/data/db01-slow.log |</span><br><span class="line">+---------------------------+--------------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 名字：hostname-slow.log</span></span><br><span class="line">db01-slow.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改方式</span></span><br><span class="line"><span class="comment">## 修改配置文件</span></span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment">#指定是否开启慢查询日志</span></span><br><span class="line">slow_query_log=1</span><br><span class="line"><span class="comment">#指定慢日志文件存放位置（默认在data）</span></span><br><span class="line">slow_query_log_file=/app/mysql-5.6.50/data/db01-slow.log</span><br><span class="line"><span class="comment">#设定慢查询的阀值(默认10s)</span></span><br><span class="line">long_query_time=0.05</span><br><span class="line"><span class="comment">#不使用索引的慢查询语句是否记录到日志</span></span><br><span class="line">log_queries_not_using_indexes</span><br><span class="line"><span class="comment">#查询检查返回少于该参数指定行的SQL不被记录到慢查询日志  （鸡肋）</span></span><br><span class="line">min_examined_row_limit=100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 模拟慢查询</span></span><br><span class="line"><span class="comment">#进入world库</span></span><br><span class="line">mysql&gt; use world</span><br><span class="line"><span class="comment">#查看表</span></span><br><span class="line">mysql&gt; show tables</span><br><span class="line"><span class="comment">#将city表中所有内容加到t1表中</span></span><br><span class="line">mysql&gt; create table t1 <span class="keyword">select</span> * from city;</span><br><span class="line"><span class="comment">#查看t1的表结构</span></span><br><span class="line">mysql&gt; desc t1;</span><br><span class="line"><span class="comment">#将t1表所有内容插入到t1表中（多插入几次）</span></span><br><span class="line">mysql&gt; insert into t1 <span class="keyword">select</span> * from t1;</span><br><span class="line">mysql&gt; insert into t1 <span class="keyword">select</span> * from t1;</span><br><span class="line">mysql&gt; insert into t1 <span class="keyword">select</span> * from t1;</span><br><span class="line">mysql&gt; insert into t1 <span class="keyword">select</span> * from t1;</span><br><span class="line"><span class="comment">#删除t1表中id&gt;2000的数据</span></span><br><span class="line">mysql&gt; delete from t1 <span class="built_in">where</span> <span class="built_in">id</span>&gt;2000;</span><br><span class="line"><span class="comment">#查看慢日志</span></span><br><span class="line">[root@db01 ~]# <span class="built_in">cat</span> /application/mysql/data/mysql-db01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@db01 ~]# mysqldumpslow /app/mysql-5.6.50/data/db01-slow.log</span><br><span class="line">-s：指定排序顺序</span><br><span class="line">      c：Count 执行次数</span><br><span class="line">      t：Time 执行时间 总时间</span><br><span class="line">      r：Rows 结果行数 总行数</span><br><span class="line">      l：Lock 锁表时间 总锁表时间</span><br><span class="line">      </span><br><span class="line">      at：平均时间</span><br><span class="line">      ar：平均行数</span><br><span class="line">      al：平均锁表时间</span><br></pre></td></tr></table></figure><p><strong>使用percona公司提供的pt-query-digest工具分析慢查询日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">https://www.percona.com/  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、下载并安装</span><br><span class="line">[root@db01 ~]# yum install -y https://downloads.percona.com/downloads/percona-toolkit/3.6.0/binary/redhat/7/x86_64/percona-toolkit-3.6.0-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">2、这条命令就可以分析慢查询日志</span><br><span class="line">[root@db01 ~]# pt-query-digest /app/mysql-5.6.50/data/db01-slow.log </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可视化界面：</span><br><span class="line">Anemometer基于pt-query-digest将MySQL慢查询可视化</span><br><span class="line">httpss://www.percona.com/downloads/percona-toolkit/LATEST/ 慢日志分析工具下载</span><br><span class="line">httpss://github.com/box/Anemometer 可视化代码下载</span><br></pre></td></tr></table></figure><p><strong>在恢复数据时，数据库在实时写入数据，怎么恢复</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#往数据库一直写数据的脚本</span></span><br><span class="line">[root@db01 ~]# vim insert.sh </span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">master_ip=$(hostname -I|awk  <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">mysql_cli=<span class="string">&quot;mysql -uroot -p123 -h<span class="variable">$&#123;master_ip&#125;</span>&quot;</span></span><br><span class="line"><span class="variable">$&#123;mysql_cli&#125;</span> -e <span class="string">&#x27;drop database if exists prod;&#x27;</span></span><br><span class="line"><span class="variable">$&#123;mysql_cli&#125;</span> -e <span class="string">&#x27;create database if not exists prod;&#x27;</span></span><br><span class="line"><span class="variable">$&#123;mysql_cli&#125;</span> -e <span class="string">&#x27;create table if not exists prod.prod(id int primary key auto_increment);&#x27;</span></span><br><span class="line">num=1</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></span><br><span class="line"> <span class="variable">$&#123;mysql_cli&#125;</span> -e <span class="string">&quot;insert into prod.prod values(<span class="subst">$((num++)</span>));commit;&quot;</span></span><br><span class="line"> <span class="built_in">sleep</span> 1</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>1、模拟写数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1、#运行脚本</span><br><span class="line">[root@db01 ~]# sh insert.sh</span><br><span class="line"></span><br><span class="line">2、#创建binlog库 表 </span><br><span class="line">root@localhost:(none) &gt; create database binlog;</span><br><span class="line">root@localhost:(none) &gt; use binlog;</span><br><span class="line">root@localhost:binlog &gt; create table binlog_table(<span class="built_in">id</span> int);</span><br><span class="line"></span><br><span class="line">3、#插入数据</span><br><span class="line">root@localhost:binlog &gt; insert into binlog_table values(1);</span><br><span class="line"></span><br><span class="line">4、#再插入数据</span><br><span class="line">root@localhost:binlog &gt; insert into binlog_table values(2);</span><br><span class="line">root@localhost:binlog &gt; insert into binlog_table values(3);</span><br><span class="line"></span><br><span class="line">5、#删除一条数据</span><br><span class="line">root@localhost:binlog &gt; delete from binlog_table <span class="built_in">where</span> <span class="built_in">id</span>=1;</span><br><span class="line"></span><br><span class="line">6、#修改一条数据</span><br><span class="line">root@localhost:binlog &gt; update binlog_table <span class="built_in">set</span> <span class="built_in">id</span>=22 <span class="built_in">where</span> <span class="built_in">id</span>=2;</span><br><span class="line"></span><br><span class="line">7、#删表</span><br><span class="line">root@localhost:binlog &gt; drop table binlog_table;</span><br><span class="line"></span><br><span class="line">8、#删库</span><br><span class="line">root@localhost:binlog &gt; drop database binlog;</span><br></pre></td></tr></table></figure><p>2、恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">恢复到： </span><br><span class="line">mysql&gt; <span class="keyword">select</span> * from binlog_table;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">你要知道你在这个状态之后执行了什么：执行了delete</span><br><span class="line">如果旧环境还能提供服务就暂时不停止库，一会再停止</span><br><span class="line"></span><br><span class="line">1、#准备一个新环境 db02</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld stop</span><br><span class="line">[root@db02 ~]# <span class="built_in">rm</span> -rf /app/mysql-5.6.50/data</span><br><span class="line">配置文件和旧环境大部分保持一致</span><br><span class="line">[root@db02 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/app/mysql-5.6.50</span><br><span class="line">datadir=/app/mysql-5.6.50/data</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">server_id=1</span><br><span class="line">lower_case_table=1</span><br><span class="line"><span class="comment">#innodb_data_file_path=ibdata1:12M;ibdata2:50M:autoextend</span></span><br><span class="line">binlog_format=row</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">prompt=<span class="string">&quot;\\u@\\h:\\d &gt; &quot;</span></span><br><span class="line">[root@db02 ~]# /app/mysql-5.6.50/scripts/mysql_install_db --user=mysql --basedir=/app/mysql-5.6.50 --datadir=/app/mysql-5.6.50/data</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#旧环境截取binlog数据的位置点</span><br><span class="line">[root@db01 ~]# mysqlbinlog --base64-output=decode-rows -vvv /app/mysql-5.6.50/data/mysql-bin.000015|grep -iC 10  <span class="string">&#x27;create database binlog&#x27;</span></span><br><span class="line">开始位置：11999</span><br><span class="line">[root@db01 ~]#  mysqlbinlog --base64-output=decode-rows -vvv /app/mysql-5.6.50/data/mysql-bin.000015|grep -iC 10 <span class="string">&#x27;delete from `binlog`&#x27;</span></span><br><span class="line">结束位置点：30114</span><br><span class="line"></span><br><span class="line">只恢复binlog库数据的截取</span><br><span class="line">[root@db01 ~]# mysqlbinlog --start-position=11999 --stop-position=30114 -d binlog /app/mysql-5.6.50/data/mysql-bin.000015 &gt; /tmp/binlog.sql </span><br><span class="line"></span><br><span class="line">3、#新环境db02创建一个可以远程连接的用户(如果数据量比较大，可以创建用户远程恢复)</span><br><span class="line">root@localhost:(none) &gt; grant all on *.* to root@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">4、#db01将截取的数据恢复到新环境</span><br><span class="line">[root@db01 ~]# mysql -uroot -p123 -h172.16.1.52 &lt; /tmp/binlog.sql </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、#新环境查看数据</span><br><span class="line">root@localhost:(none) &gt; show databases;</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> * from binlog.binlog_table;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">6、#应用割接   运维导出新环境binlog的数据到旧环境</span><br><span class="line">[root@db02 ~]# mysqldump -B binlog &gt; /tmp/binlog2.sql</span><br><span class="line">[root@db02 ~]# scp /tmp/binlog2.sql 172.16.1.51:/tmp</span><br><span class="line"></span><br><span class="line">7、#挂维护页，停止连接数据库的程序tomcat php，不能停止数据库，因为导入数据需要使用mysql客户端的命令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8、#新环境关闭binlog的记录，防止binlog被污染,再恢复数据</span><br><span class="line">root@localhost:(none) &gt; <span class="built_in">set</span> sql_log_bin=0;</span><br><span class="line">root@localhost:binlog &gt; <span class="built_in">source</span> /tmp/binlog2.sql;</span><br><span class="line"></span><br><span class="line">9、#开启binlog的记录</span><br><span class="line">root@localhost:(none) &gt; <span class="built_in">set</span> sql_log_bin=1;</span><br><span class="line">root@localhost:binlog &gt; <span class="keyword">select</span> * from binlog_table;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">10、#取消维护页，开启连接数据库的服务</span><br></pre></td></tr></table></figure><h3 id="MySQL数据备份和恢复">MySQL数据备份和恢复</h3><p><strong>备份的原因</strong><br>运维工作的核心简单概括就两件事:<br>1）第一个是保护公司的数据.<br>2）第二个是让网站能7*24小时提供服务(用户体验)。</p><p><strong>备份的类型</strong><br>冷备份(停服务做备份)：(mysqldump做不了)<br>这些备份在用户不能访问数据时进行，因此无法读取或修改数据。这些脱机备份会阻止执行任何使用数据的活动。这些类型的备份不会干扰正常运行的系统的性能。但是，对于某些应用程序，会无法接受必须在一段较长的时间里锁定或完全阻止用户访问数据。</p><p>温备份(不停服务做备份，但是备份过程中会锁表)：<br>这些备份在读取数据时进行，但在多数情况下，在进行备份时不能修改数据本身。这种中途备份类型的优点是不必完全锁定最终用户。但是，其不足之处在于无法在进行备份时修改数据集，这可能使这种类型的备份不适用于某些应用程序。在备份过程中无法修改数据可能产生性能问题。</p><p>热备份(不停服务做备份，也不锁表)：<br>这些动态备份在读取或修改数据的过程中进行，很少中断或者不中断传输或处理数据的功能。使用热备份时，系统仍可供读取和修改数据的操作访问。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">恢复数据的时候一定要跟开发确认好</span><br><span class="line"></span><br><span class="line">逻辑备份 物理备份可以一起用，哪种速度快，可以考虑使用</span><br></pre></td></tr></table></figure><p><strong>备份的工具</strong></p><p>1、mysqldump (逻辑)<br>mysql原生自带很好用的逻辑备份工具</p><p>2、mysqlbinlog (逻辑)<br>实现binlog备份的原生态命令</p><p>3、xtrabackup (物理)<br>precona公司开发的性能很高的物理备份工具</p><p><strong>备份的方式</strong></p><ul><li>逻辑备份</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">基于SQL语句的备份</span><br><span class="line">1）binlog</span><br><span class="line">2）into outfile</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">secure-file-priv=/tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个是恢复表里面的真实数据</span></span><br><span class="line">mysql&gt; <span class="keyword">select</span> * from world.city into outfile <span class="string">&#x27;/tmp/world_city.data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3）mysqldump</span><br><span class="line">4）replication(主从复制)</span><br><span class="line">5) mysqlbinlog</span><br></pre></td></tr></table></figure><ul><li><p>物理备份</p><p>基于数据文件的备份<br>1）Xtrabackup（percona公司写的)</p></li></ul><p><strong>备份策略</strong></p><ul><li>全备：备份所有数据</li><li>增备：每次基于上一次备份后新增的数据</li><li>差异备份：(每次都基于全备)</li></ul><p><img src="../image/study_img/image-20240821103326915.png" alt="image-20240821103326915"></p><p><strong>mysqldump逻辑备份工具</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#客户端命令选项</span></span><br><span class="line">-u：指定用户</span><br><span class="line">-p：指定密码</span><br><span class="line">-h：指定主机</span><br><span class="line">-P：指定端口</span><br><span class="line">-S：指定socket文件</span><br></pre></td></tr></table></figure><p><strong>备份命令的选项</strong></p><p>1、全备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-A  /  --all-databases :备份mysql的所有库和所有表</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# mysqldump -uroot -p123 -A &gt; /tmp/full.sql  </span><br></pre></td></tr></table></figure><p>2、库级备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-B    /   --databases  ：指定库做备份</span><br><span class="line"></span><br><span class="line"><span class="comment">#mysqldupm -uroot -p123 -B 库名  库名 库名  库名...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定单个库做备份    (备份出来的文件有建库语句)</span></span><br><span class="line">[root@db02 ~]# mysqldump -uroot -p123 -B world &gt; /tmp/world.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">#恢复方式</span></span><br><span class="line">[root@db02 ~]# mysqldump -uroot -p123 &lt; /tmp/world.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定多个库做备份</span></span><br><span class="line">[root@db02 ~]# mysqldump -uroot -p123 -B world student &gt; /tmp/world_stu.sql</span><br></pre></td></tr></table></figure><p>3、表级备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不加选项，直接写库名字</span></span><br><span class="line">[root@db02 ~]# mysqldump -uroot -p123 world &gt; /tmp/world1.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">#恢复方式(恢复时需要指定一个库)</span></span><br><span class="line">[root@db02 ~]# mysqldump -uroot -p123 <span class="built_in">test</span> &lt; /tmp/world1.sql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysqldump -uroot -p123 库名 表名 表名 表名 表名...</span></span><br><span class="line">[root@db02 ~]# mysqldump -uroot -p123 linux8 city &gt; /tmp/linux8_city.sql</span><br><span class="line">[root@db02 ~]# mysqldump -uroot -p123 linux8 prod &gt; /tmp/linux8_prod.sql</span><br></pre></td></tr></table></figure><p>4、打点备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打点备份(备份位置点和名字) </span></span><br><span class="line">好处：这次全备就记录到这个位置点了，新增的数据就是这个点之后的，想截取binlog，开始位置点就看这个点，结束位置点去binlog里面截取</span><br><span class="line"></span><br><span class="line">--master-data=[0|1|2] ：(温备选项)  </span><br><span class="line"></span><br><span class="line">his option will turn --lock-all-tables on(使用这个选项时，会打开 --lock--all-tables选项，会锁表)</span><br><span class="line">unless --single-transaction is specified too(除非加入 --single-transaction这个选项，就不会被锁表(快照)) </span><br><span class="line"></span><br><span class="line">0：关闭这个选项，跟不写这个选项一样，没有change master的记录</span><br><span class="line">1：If equal to 1, will <span class="built_in">print</span> it as a CHANGE MASTER <span class="built_in">command</span>; </span><br><span class="line">    <span class="comment">#打印chenge master语句</span></span><br><span class="line">2：<span class="keyword">if</span> equal to 2, that <span class="built_in">command</span> will be prefixed with a comment symbol.</span><br><span class="line">    <span class="comment">#chenge master将会被注释掉(主从复制可以用 2比较常用)  文件的22行记录</span></span><br></pre></td></tr></table></figure><p>5、快照备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#快照备份</span></span><br><span class="line">--single--transaction：(热备选项) 不锁表，不影响用户持续写入数据</span><br><span class="line"></span><br><span class="line">加入这个选项，在备份的时候就相当于拍了快照，就备份到目前的指定位置，后面用户写入的数据我不备份，只有快照我不知道备份到哪里，需要配合打点备份使用，用户写入的数据就是这个点之后的数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#全备且热备的命令</span></span><br><span class="line">[root@db01 ~]# mysqldump -uroot -p123 -A --master-data=2 --single-transaction &gt; /tmp/full.sgl</span><br><span class="line"></span><br><span class="line">[root@db01 ~]# vim /tmp/full.sgl</span><br><span class="line">22行：</span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000015&#x27;</span>, MASTER_LOG_POS=105700;</span><br><span class="line">记录这次全备，备份到mysql-bin.000015，位置点是：10500，这个点之后的数据就是新增数据</span><br></pre></td></tr></table></figure><p>6、备份函数和存储过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-R： 函数和储存过程是开发写程序的时候写的(如果有就备份，如果没有就不备份，但是加上这个选项也没有任何影响)</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p123 -A -R --master-data=2 --single-transaction &gt; /tmp/full.sgl</span><br></pre></td></tr></table></figure><p>7、备份触发器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--triggers:  备份触发器 (如果开发写了就备份，如果没有就不备份,加上这个选项也没有任何影响)</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p123 -A -R --triggers --master-data=2 --single-transaction &gt; /tmp/full.sgl</span><br><span class="line"></span><br><span class="line"><span class="comment">#压缩</span></span><br><span class="line">mysqldump -uroot -p123 -A -R --triggers --master-data=2 --single-transaction |gzip &gt; /tmp/full.sgl</span><br><span class="line"></span><br><span class="line"><span class="comment">#完整的备份语句</span></span><br><span class="line">[root@db01 ~]# mysqldump -uroot -p123 -A -R --triggers --master-data=2 --single-transaction|gzip &gt; /tmp/full_$(<span class="built_in">date</span> +%F).sql.gz</span><br></pre></td></tr></table></figure><p>8、刷新binlog备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-F：做备份的同时，每备份一个库，刷新一个新的binlog出来(不常用)</span><br><span class="line">出来的是没有用的binlog,小文件就会多，会导致inode被沾满</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# mysqldump -uroot -p123 -B table1 table2 table3 -F &gt; /tmp/test_binlog.sql</span><br><span class="line">会刷新3个binlog出来</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#认识，但不用的选项</span></span><br><span class="line">-d:仅备份表结构</span><br><span class="line">-t:仅备份数据</span><br></pre></td></tr></table></figure><p><strong>完整的热备语句</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">任何场景的备份命令：</span><br><span class="line">压缩，并且记录备份时间戳,写脚本也适用</span><br><span class="line"></span><br><span class="line">[root@db01 ~]# mysqldump -uroot -p123 -A -R --triggers --master-data=2 --single-transaction|gzip &gt; /tmp/full_$(<span class="built_in">date</span> +%F).sql.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-rw-r--r--  1 root root 252419 Aug 22 00:55 full_2024-08-22.sql.gz</span><br><span class="line"><span class="comment">#解压，恢复数据不需要解压的</span></span><br><span class="line">[root@db01 ~]# gzip -d /tmp/full_2024-08-22.sql.gz </span><br><span class="line"></span><br><span class="line"><span class="comment">#恢复数据</span></span><br><span class="line">[root@db01 ~]# zcat /tmp/full_2024-08-22.sql.gz |mysql -uroot -p123</span><br></pre></td></tr></table></figure><p><font color = red> 注意：</font><br>1）mysqldump在备份和恢复时都需要MySQL实例启动为前提<br>2）一般数据量级100G以内，大约15-30分钟可以恢复（PB、EB就需要考虑别的方式）<br>3）mysqldump是以覆盖的形式恢复数据的</p><p><strong>企业故障恢复案例1</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">背景：</span><br><span class="line">正在运行的网站系统，MySQL数据库，数据量25G，日业务增量10-15M。</span><br><span class="line"></span><br><span class="line">备份策略：</span><br><span class="line">每天23：00，计划任务调用mysqldump执行全备脚本</span><br><span class="line"></span><br><span class="line">故障时间点：</span><br><span class="line">上午10点开发人员误删除一个核心业务表，如何恢复？</span><br><span class="line"></span><br><span class="line"><span class="comment">#23~10点的增量数据要截取</span></span><br><span class="line"><span class="comment">#删表语句后面新增的数据也要截取</span></span><br><span class="line"></span><br><span class="line">思路：</span><br><span class="line">1）停业务避免数据的二次伤害</span><br><span class="line">2）找一个临时的库，恢复前一天的全备</span><br><span class="line">3）截取前一天23：00到第二天10点误删除之间的binlog，恢复到临时库</span><br><span class="line">4）测试可用性和完整性</span><br><span class="line">5）开启业务前的两种方式</span><br><span class="line">    a.直接使用临时库顶替原生产库，前端应用割接到新库</span><br><span class="line">    b.将误删除的表单独导出，然后导入到原生产环境</span><br><span class="line">6）开启业务</span><br></pre></td></tr></table></figure><p>1、故障模拟演练</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">1、#先执行写入数据的脚本</span><br><span class="line">[root@db01 ~]# sh insert.sh </span><br><span class="line"></span><br><span class="line">2、#创建库创表</span><br><span class="line">root@localhost:(none) &gt; create database hexin;</span><br><span class="line">root@localhost:(none) &gt; use hexin;</span><br><span class="line">root@localhost:hexin &gt; create table hexin(<span class="built_in">id</span> int);</span><br><span class="line"></span><br><span class="line">3、#运行那么久了，往里面写点数据</span><br><span class="line">root@localhost:hexin &gt; insert into hexin values(1),(2),(3),(4);</span><br><span class="line">root@localhost:hexin &gt; <span class="keyword">select</span> * from hexin;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">|    4 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">4、#假设现在到晚上23点了，任务计划自动做全备</span><br><span class="line">[root@db01 ~]# mysqldump -uroot -p123 -A -R --triggers --master-data=2 --single-transaction|gzip &gt; /tmp/full_$(<span class="built_in">date</span> +%F).sql.gz</span><br><span class="line"></span><br><span class="line">5、#模拟新增数据</span><br><span class="line">root@localhost:hexin &gt; update hexin <span class="built_in">set</span> <span class="built_in">id</span>=10 <span class="built_in">where</span> <span class="built_in">id</span>=1;</span><br><span class="line">root@localhost:hexin &gt; <span class="keyword">select</span> * from hexin;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|   10 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">|    4 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">root@localhost:hexin &gt; delete from hexin <span class="built_in">where</span> <span class="built_in">id</span>=3;</span><br><span class="line">root@localhost:hexin &gt; <span class="keyword">select</span> * from hexin;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|   10 |</span><br><span class="line">|    2 |</span><br><span class="line">|    4 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">6、#上午10点开发人员误删除一个核心业务表</span><br><span class="line">root@localhost:hexin &gt; drop table hexin;</span><br><span class="line"></span><br><span class="line">root@localhost:hexin &gt; <span class="keyword">select</span> * from hexin;</span><br><span class="line">ERROR 1146 (42S02): Table <span class="string">&#x27;hexin.hexin&#x27;</span> doesn<span class="string">&#x27;t exist</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果网站不能提供服务了就停止数据库，如果网站还能使用，就可以不停止数据库</span></span><br></pre></td></tr></table></figure><p>2、恢复(不停库)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">+------+   <span class="comment">#恢复到这里</span></span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|   10 |</span><br><span class="line">|    2 |</span><br><span class="line">|    4 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、#准备新环境  db02</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld stop</span><br><span class="line">[root@db02 ~]# <span class="built_in">rm</span> -rf /app/mysql-5.6.50/data</span><br><span class="line">配置文件和旧环境大部分保持一致</span><br><span class="line">[root@db02 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/app/mysql-5.6.50</span><br><span class="line">datadir=/app/mysql-5.6.50/data</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">server_id=1</span><br><span class="line">lower_case_table=1</span><br><span class="line"><span class="comment">#innodb_data_file_path=ibdata1:12M;ibdata2:50M:autoextend</span></span><br><span class="line">binlog_format=row</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">prompt=<span class="string">&quot;\\u@\\h:\\d &gt; &quot;</span></span><br><span class="line">[root@db02 ~]# /app/mysql-5.6.50/scripts/mysql_install_db --user=mysql --basedir=/app/mysql-5.6.50 --datadir=/app/mysql-5.6.50/data</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#新环境创建一个远程连接的用户</span><br><span class="line">root@localhost:(none) &gt; grant all on *.* to root@<span class="string">&#x27;172.16.1.%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、#将头一天的全备恢复到新环境</span><br><span class="line">[root@db01 ~]# zcat /tmp/full_2024-08-22.sql.gz |mysql -uroot -p123 -h172.16.1.52</span><br><span class="line">新环境查看</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> * from hexin.hexin;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">|    4 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">3、#截取binlog新增数据</span><br><span class="line">[root@db01 ~]# zcat /tmp/full_2024-08-22.sql.gz |<span class="built_in">head</span> -25</span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000015&#x27;</span>, MASTER_LOG_POS=527709;</span><br><span class="line">在全备里面   <span class="string">&#x27;mysql-bin.000015   </span></span><br><span class="line"><span class="string">开始位置点：527709</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">结束位置点：上午10点开发人员误删除一个核心业务表</span></span><br><span class="line"><span class="string">drop table hexin这个语句之前就是结束位置点</span></span><br><span class="line"><span class="string">[root@db01 ~]# mysqlbinlog --base64-output=decode-rows -vvv /app/mysql-5.6.50/data/mysql-bin.000015 |grep -iC 10 &#x27;</span>drop table `hexin`<span class="string">&#x27;</span></span><br><span class="line"><span class="string">结束位置点：584459</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@db01 ~]# mysqlbinlog --start-position=527709 --stop-position=584459 /app/mysql-5.6.50/data/mysql-bin.000015 &gt; /tmp/inc1.sql</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4、#将第一段的数据恢复到新环境</span></span><br><span class="line"><span class="string">[root@db01 ~]# mysql -uroot -p123 -h172.16.1.52 &lt; /tmp/inc1.sql </span></span><br><span class="line"><span class="string">新环境查看</span></span><br><span class="line"><span class="string">root@localhost:(none) &gt; select * from hexin.hexin;</span></span><br><span class="line"><span class="string">+------+</span></span><br><span class="line"><span class="string">| id   |</span></span><br><span class="line"><span class="string">+------+</span></span><br><span class="line"><span class="string">|   10 |</span></span><br><span class="line"><span class="string">|    2 |</span></span><br><span class="line"><span class="string">|    4 |</span></span><br><span class="line"><span class="string">+------+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5、#挂维护页，停止连接数据库的程序</span></span><br><span class="line"><span class="string">这个时候可以停止脚本执行</span></span><br><span class="line"><span class="string">查看总的数据</span></span><br><span class="line"><span class="string">root@localhost:hexin &gt; select count(*) from prod.prod;</span></span><br><span class="line"><span class="string">+----------+</span></span><br><span class="line"><span class="string">| count(*) |</span></span><br><span class="line"><span class="string">+----------+</span></span><br><span class="line"><span class="string">|     4366 |</span></span><br><span class="line"><span class="string">+----------+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">6、#截取删表之后的新增数据</span></span><br><span class="line"><span class="string">开始位置点：上午10点开发人员误删除一个核心业务表</span></span><br><span class="line"><span class="string">drop table hexin这个语句位置点，的后面一个位置点</span></span><br><span class="line"><span class="string">[root@db01 ~]# mysqlbinlog --base64-output=decode-rows -vvv /app/mysql-5.6.50/data/mysql-bin.000015 |grep -iC 10 &#x27;</span>drop table `hexin`<span class="string">&#x27;</span></span><br><span class="line"><span class="string">SET @@session.pseudo_thread_id=2475/*!*/;</span></span><br><span class="line"><span class="string">DROP TABLE `hexin` /* generated by server */</span></span><br><span class="line"><span class="string">/*!*/;</span></span><br><span class="line"><span class="string"># at 584579</span></span><br><span class="line"><span class="string">#240822  1:54:12 server id 1</span></span><br><span class="line"><span class="string">开束位置点：584579</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">结束位置点：(需要停止连接数据库的服务才好找，不要往数据库里面写数据)</span></span><br><span class="line"><span class="string">[root@db01 ~]# mysqlbinlog --base64-output=decode-rows -vvv /app/mysql-5.6.50/data/mysql-bin.000015|tail</span></span><br><span class="line"><span class="string"># at 940180                     结束位置点</span></span><br><span class="line"><span class="string">240822  2:26:40 server id 1  &#x27;</span>end_log_pos 940211<span class="string">&#x27; CRC32 0xd479131d       Xid = 26217</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">或者直接看文件大小就可以，结束位置点和binlog文件停止写入的大小一样</span></span><br><span class="line"><span class="string">[root@db01 ~]# ll /app/mysql-5.6.50/data/</span></span><br><span class="line"><span class="string">-rw-rw---- 1 mysql mysql   940211 Aug 22 02:26 mysql-bin.000015</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">结束位置点：940211    (end_log_pos 940211)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@db01 ~]# mysqlbinlog --start-position=584579 --stop-position=940211 /app/mysql-5.6.50/data/mysql-bin.000015 &gt; /tmp/inc2.sql</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">7、#将第二段的新增数据恢复到新环境</span></span><br><span class="line"><span class="string">[root@db01 ~]#  mysql -uroot -p123 -h172.16.1.52 &lt; /tmp/inc2.sql</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">新环境查看总的数据，和旧环境的数据一样</span></span><br><span class="line"><span class="string">root@localhost:(none) &gt; select count(*) from prod.prod;</span></span><br><span class="line"><span class="string">+----------+</span></span><br><span class="line"><span class="string">| count(*) |</span></span><br><span class="line"><span class="string">+----------+</span></span><br><span class="line"><span class="string">|     4366 |</span></span><br><span class="line"><span class="string">+----------+</span></span><br><span class="line"><span class="string">1 row in set (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root@localhost:(none) &gt; select * from hexin.hexin;</span></span><br><span class="line"><span class="string">+------+</span></span><br><span class="line"><span class="string">| id   |</span></span><br><span class="line"><span class="string">+------+</span></span><br><span class="line"><span class="string">|   10 |</span></span><br><span class="line"><span class="string">|    2 |</span></span><br><span class="line"><span class="string">|    4 |</span></span><br><span class="line"><span class="string">+------+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">8、#应用割接</span></span><br><span class="line"><span class="string">        - 运维：新环境全备，导入旧环境</span></span><br><span class="line"><span class="string">        - 开发：修改连接数据库的代码</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">9、#取消护页，开启连接数据库的程序</span></span><br></pre></td></tr></table></figure><p><strong>企业故障恢复案例2</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">背景：</span><br><span class="line">正在运行的网站系统，MySQL数据库，数据量25G，日业务增量10-15M。</span><br><span class="line"></span><br><span class="line">备份策略：</span><br><span class="line">每天23：00，计划任务调用mysqldump执行全备脚本</span><br><span class="line"></span><br><span class="line">故障时间点：</span><br><span class="line">上午10点开发人员误删除一个核心业务表之前，<span class="string">&#x27;还误修改了一条数据,误将1改成10了&#x27;</span>，如何恢复？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">最终要恢复的数据是：</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    4 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line"><span class="comment">#截取思路</span></span><br><span class="line">1、截取全备~update之前</span><br><span class="line">2、update之后~(drop table hexin)上午10点开发人员误删除一个核心业务表之前</span><br><span class="line">3、(drop table hexin)之后~停库</span><br></pre></td></tr></table></figure><p>1、故障模拟演练</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">1、#先执行写入数据的脚本</span><br><span class="line">[root@db01 ~]# sh insert.sh </span><br><span class="line"></span><br><span class="line">2、#创建库创表</span><br><span class="line">root@localhost:(none) &gt; create database hexin;</span><br><span class="line">root@localhost:(none) &gt; use hexin;</span><br><span class="line">root@localhost:hexin &gt; create table hexin(<span class="built_in">id</span> int);</span><br><span class="line"></span><br><span class="line">3、#运行那么久了，往里面写点数据</span><br><span class="line">root@localhost:hexin &gt; insert into hexin values(1),(2),(3),(4);</span><br><span class="line">root@localhost:hexin &gt; <span class="keyword">select</span> * from hexin;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">|    4 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">4、#假设现在到晚上23点了，任务计划自动做全备</span><br><span class="line">[root@db01 ~]# mysqldump -uroot -p123 -A -R --triggers --master-data=2 --single-transaction|gzip &gt; /tmp/full_$(<span class="built_in">date</span> +%F).sql.gz</span><br><span class="line"></span><br><span class="line">5、#模拟新增数据</span><br><span class="line">root@localhost:hexin &gt; update hexin <span class="built_in">set</span> <span class="built_in">id</span>=10 <span class="built_in">where</span> <span class="built_in">id</span>=1;</span><br><span class="line">root@localhost:hexin &gt; <span class="keyword">select</span> * from hexin;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|   10 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">|    4 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">root@localhost:hexin &gt; delete from hexin <span class="built_in">where</span> <span class="built_in">id</span>=3;</span><br><span class="line">root@localhost:hexin &gt; <span class="keyword">select</span> * from hexin;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|   10 |</span><br><span class="line">|    2 |</span><br><span class="line">|    4 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">6、#上午10点开发人员误删除一个核心业务表</span><br><span class="line">root@localhost:hexin &gt; drop table hexin;</span><br><span class="line"></span><br><span class="line">root@localhost:hexin &gt; <span class="keyword">select</span> * from hexin;</span><br><span class="line">ERROR 1146 (42S02): Table <span class="string">&#x27;hexin.hexin&#x27;</span> doesn<span class="string">&#x27;t exist</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果网站不能提供服务了就停止数据库，如果网站还能使用，就可以不停止数据库</span></span><br></pre></td></tr></table></figure><p>2、恢复(不停库)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">+------+   <span class="comment">#恢复到这里</span></span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    4 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、#准备新环境  db02</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld stop</span><br><span class="line">[root@db02 ~]# <span class="built_in">rm</span> -rf /app/mysql-5.6.50/data</span><br><span class="line">配置文件和旧环境大部分保持一致</span><br><span class="line">[root@db02 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br><span class="line">basedir=/app/mysql-5.6.50</span><br><span class="line">datadir=/app/mysql-5.6.50/data</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">server_id=1</span><br><span class="line">lower_case_table=1</span><br><span class="line"><span class="comment">#innodb_data_file_path=ibdata1:12M;ibdata2:50M:autoextend</span></span><br><span class="line">binlog_format=row</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">prompt=<span class="string">&quot;\\u@\\h:\\d &gt; &quot;</span></span><br><span class="line">[root@db02 ~]# /app/mysql-5.6.50/scripts/mysql_install_db --user=mysql --basedir=/app/mysql-5.6.50 --datadir=/app/mysql-5.6.50/data</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#新环境创建一个远程连接的用户</span><br><span class="line">root@localhost:(none) &gt; grant all on *.* to root@<span class="string">&#x27;172.16.1.%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;   <span class="comment">#当全备恢复过来，这个用户就不在了，我们后面用远程用户导数据，是没有刷新表或者重启mysql，如果一旦做了重启或者刷新，这个用户就不能用了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、#将头一天的全备恢复到新环境</span><br><span class="line">[root@db01 ~]# zcat /tmp/full_2024-08-22.sql.gz |mysql -uroot -p123 -h172.16.1.52</span><br><span class="line">新环境查看</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> * from hexin.hexin;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">|    4 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line"><span class="comment">#截取思路</span></span><br><span class="line">1、截取全备~update之前</span><br><span class="line">2、update之后~(drop table hexin)上午10点开发人员误删除一个核心业务表之前</span><br><span class="line">3、(drop table hexin)之后~停库</span><br><span class="line"></span><br><span class="line">3、#截取全备~update之前</span><br><span class="line">[root@db01 ~]# zcat /tmp/full_2024-08-22.sql.gz |<span class="built_in">head</span> -25</span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000015&#x27;</span>, MASTER_LOG_POS=969876;</span><br><span class="line">开始位置点：969876</span><br><span class="line"></span><br><span class="line">[root@db01 ~]#  mysqlbinlog --base64-output=decode-rows -vvv /app/mysql-5.6.50/data/mysql-bin.000015 |grep -iC 10 <span class="string">&#x27;update `hexin`&#x27;</span></span><br><span class="line">结束位置点：971995</span><br><span class="line"></span><br><span class="line">mysqlbinlog --start-position=969876 --stop-position=971995 /app/mysql-5.6.50/data/mysql-bin.000015 &gt; /tmp/inc1.sql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、#截取update之后~上午10点开发人员误删除一个核心业务表</span><br><span class="line">[root@db01 ~]#  mysqlbinlog --base64-output=decode-rows -vvv /app/mysql-5.6.50/data/mysql-bin.000015 |grep -iC 10 <span class="string">&#x27;update `hexin`&#x27;</span></span><br><span class="line">开始位置点：972090</span><br><span class="line"></span><br><span class="line">[root@db01 ~]#  mysqlbinlog --base64-output=decode-rows -vvv /app/mysql-5.6.50/data/mysql-bin.000015 |grep -iC 10 <span class="string">&#x27;drop table `hexin`&#x27;</span></span><br><span class="line">结束位置点：979382</span><br><span class="line"></span><br><span class="line">mysqlbinlog --start-position=972090 --stop-position=979382 /app/mysql-5.6.50/data/mysql-bin.000015 &gt; /tmp/inc2.sql</span><br><span class="line"></span><br><span class="line">5、#挂维护页，停止连接数据库的程序</span><br><span class="line">这个时候可以停止脚本执行</span><br><span class="line">查看总的数据</span><br><span class="line">root@localhost:hexin &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|     2115 |</span><br><span class="line">+----------+</span><br><span class="line"></span><br><span class="line">6、#截取(drop table hexin)之后~停库(停止连接数据库的程序)</span><br><span class="line">[root@db01 ~]# mysqlbinlog --base64-output=decode-rows -vvv /app/mysql-5.6.50/data/mysql-bin.000015 |grep -iC 10 <span class="string">&#x27;drop table `hexin`&#x27;</span></span><br><span class="line">开始位置点：979502</span><br><span class="line"></span><br><span class="line">[root@db01 ~]# ll /app/mysql-5.6.50/data/</span><br><span class="line">-rw-rw---- 1 mysql mysql  1334948 Aug 22 04:25 mysql-bin.000015</span><br><span class="line">结束位置点：1334948</span><br><span class="line"></span><br><span class="line">mysqlbinlog --start-position=979502 --stop-position=1334948 /app/mysql-5.6.50/data/mysql-bin.000015 &gt; /tmp/inc3.sql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7、#将数据恢复到新环境</span><br><span class="line">mysql -uroot -p123 -h172.16.1.52 &lt; /tmp/inc1.sql</span><br><span class="line">mysql -uroot -p123 -h172.16.1.52 &lt; /tmp/inc2.sql</span><br><span class="line">mysql -uroot -p123 -h172.16.1.52 &lt; /tmp/inc3.sql</span><br><span class="line"></span><br><span class="line">新环境查看总的数据，和旧环境的数据一样</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|     2115 |</span><br><span class="line">+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> * from hexin.hexin;</span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    4 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">8、#应用割接</span><br><span class="line">        - 运维：新环境全备，导入旧环境</span><br><span class="line">        - 开发：修改连接数据库的代码</span><br><span class="line">        </span><br><span class="line">9、#取消护页，开启连接数据库的程序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果在就服务器里面恢复，先截取使用数据，把所有需要的数据截取准备好，停服务，按顺序一条一条往里面恢复</span><br></pre></td></tr></table></figure><h3 id="mysql物理备份">mysql物理备份</h3><p><strong>安装xtrabackup</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1、下载2.4版本的xtrabckup   db02</span><br><span class="line">[root@db02 ~]# wget https://downloads.percona.com/downloads/Percona-XtraBackup-2.4/Percona-XtraBackup-2.4.29/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.29-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">2、安装</span><br><span class="line">[root@db02 ~]# yum localinstall -y percona-xtrabackup-24-2.4.29-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">3、可以tabl出这两个命令就安装成功</span><br><span class="line"><span class="comment">#(热备的命令,专门innodb储存引擎做备份的)</span></span><br><span class="line">[root@db02 ~]# innobackupex </span><br><span class="line"></span><br><span class="line"><span class="comment">#(老版本的命令,他也可以做innodb的存储引擎,要锁表,相当于温备了,可以备任何储存引擎,属于温备)</span></span><br><span class="line">[root@db02 ~]# xtrabackup  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、配置文件加上socket路径，mysql用户需要有进入这个目录的权限</span><br><span class="line">[root@db02 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">....</span><br><span class="line"><span class="comment">#二进制安装的mysql默认在tmp下</span></span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line"><span class="comment">#客户端需要指定socket文件，不然备份的时候会报错</span></span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">5、准备新环境  db02</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld stop</span><br><span class="line">[root@db02 ~]# <span class="built_in">rm</span> -fr /app/mysql/data</span><br><span class="line">[root@db02 ~]# /app/mysql-5.6.50/scripts/mysql_install_db --user=mysql --basedir=/app/mysql-5.6.50 --datadir=/app/mysql-5.6.50/data</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld start</span><br><span class="line">6、#先给root用户配置一个密码</span><br><span class="line">[root@db02 ~]# mysqladmin -u root -p password 123</span><br><span class="line">Enter password: <span class="comment">#直接回车</span></span><br><span class="line">Warning: Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">创建一个用户</span><br><span class="line">root@localhost:(none) &gt; grant all on *.* to root@<span class="string">&#x27;172.16.1.%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>; </span><br></pre></td></tr></table></figure><p><strong>Xtrabackup介绍</strong><br>1）对于非innodb表（比如myisam）是直接锁表cp数据文件，属于一种温备。<br>2）对于innodb的表（支持事务），不锁表，cp数据页最终以数据文件方式保存下来，并且把redo和undo一并备走，属于热备方式。<br>3）备份/恢复时读取配置文件/etc/my.cnf</p><p><strong>全备</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">热备：备份的时候，可以写数据</span><br><span class="line">温备：备份的时候，只能读，不能写</span><br><span class="line"></span><br><span class="line">1、#修改配置文件</span><br><span class="line">[root@db02 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">....</span><br><span class="line"><span class="comment">#二进制安装的mysql默认在tmp下</span></span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line"><span class="comment">#客户端需要指定socket文件，不然备份的时候会报错</span></span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、#(热备)全备的命令</span><br><span class="line">root无密码 (backup不需要提前创建，会自动创建的)</span><br><span class="line">[root@db02 ~]# innobackupex --user=root /backup</span><br><span class="line">root有密码</span><br><span class="line">[root@db02 ~]# innobackupex --user=root  --password=<span class="string">&#x27;123&#x27;</span> /backup</span><br><span class="line">请注意备份结果是否完成</span><br><span class="line">xtrabackup: Transaction <span class="built_in">log</span> of lsn (1625997) to (1625997) was copied.</span><br><span class="line">240822 15:16:57 completed OK!</span><br><span class="line"></span><br><span class="line"><span class="comment">#(锁表温备)全备的命令   如果公司不是inodb的储存引擎。就用温备</span></span><br><span class="line">[root@db02 ~]# xtrabackup --user-root --password=123 --backup --target-dir=/tmp/full_$(<span class="built_in">date</span> +%F)</span><br><span class="line">请注意备份结果是否完成</span><br><span class="line">xtrabackup: Transaction <span class="built_in">log</span> of lsn (1625997) to (1625997) was copied.</span><br><span class="line">240822 15:15:52 completed OK!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、#查看备份文件</span><br><span class="line">[root@db02 ~]# ll /backup/2024-08-22_15-16-55/</span><br><span class="line">total 12316</span><br><span class="line">-rw-r----- 1 root root      481 Aug 22 15:16 backup-my.cnf   <span class="comment">#mysql的配置文件</span></span><br><span class="line">-rw-r----- 1 root root 12582912 Aug 22 15:16 ibdata1         <span class="comment">#共享表空间,undo在里面</span></span><br><span class="line">drwxr-x--- 2 root root     4096 Aug 22 15:16 mysql</span><br><span class="line">drwxr-x--- 2 root root     4096 Aug 22 15:16 performance_schema</span><br><span class="line">drwxr-x--- 2 root root       20 Aug 22 15:16 <span class="built_in">test</span></span><br><span class="line">-rw-r----- 1 root root       21 Aug 22 15:16 xtrabackup_binlog_info  <span class="comment">#记录打点备份 备份到的位置点</span></span><br><span class="line">-rw-r----- 1 root root      135 Aug 22 15:16 xtrabackup_checkpoints <span class="comment">#form_lsn  to_lsn  查看增量备份是否衔接</span></span><br><span class="line">-rw-r----- 1 root root      465 Aug 22 15:16 xtrabackup_info    <span class="comment">#这次备份的信息</span></span><br><span class="line">-rw-r----- 1 root root     2560 Aug 22 15:16 xtrabackup_logfile   <span class="comment">#redo</span></span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/2024-08-22_15-16-55/xtrabackup_checkpoints</span><br><span class="line">backup_type = full-backuped   <span class="comment">#备份类型=全备</span></span><br><span class="line">from_lsn = 0                  <span class="comment">#日志版本号起点：lsn:日志版本号  从0号日志版本号开始备份</span></span><br><span class="line">to_lsn = 1625997              <span class="comment">#日志版本号备份到的点位   备份结束位置：1625997</span></span><br><span class="line">last_lsn = 1625997            <span class="comment">#最新的日志版本号   如果有用户往里面写入数据，这个数据就会比to_lsn大</span></span><br><span class="line">compact = 0</span><br><span class="line">recover_binlog_info = 0       <span class="comment">#是否覆盖二进制的log信息  0：关闭</span></span><br><span class="line">flushed_lsn = 1625997         <span class="comment">#备份完成后获取到的最新lsn</span></span><br><span class="line">增备的from_lsn 一定是上一次增备的to_lsn,要检查是否衔接上，没有连接上，做的增备数据就不对</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个文件里面的就好比打点备份  想截binlog 开始位置点就在这里面看</span></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/2024-08-22_16-05-44/xtrabackup_binlog_info </span><br><span class="line">mysql-bin.000004        24251</span><br></pre></td></tr></table></figure><p><strong>全备恢复</strong></p><p>恢复全备的条件：<br>1、被恢复的目录必须是空的(data目录是空的)<br>2、被恢复的数据实例是关闭的(需要停库)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#全备恢复之前：需要手动模拟CSR的恢复过程，把redo中的数据 重做，undo中的数据  回滚</span></span><br><span class="line">因为表空间里面的数据是不全的，有一部分在redo,如果只做redo,redo里面存在一下没有提交的数据，undo也要做一遍</span><br><span class="line"></span><br><span class="line">1、#先删除一个prod库,再恢复数据</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|     1077 |</span><br><span class="line">+----------+</span><br><span class="line"></span><br><span class="line">root@localhost:(none) &gt; drop database prod;</span><br><span class="line"></span><br><span class="line">2、#因为是物理备份，做redo undo之前需要停止数据库</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld stop</span><br><span class="line"></span><br><span class="line">3、#模拟CSR恢复过程：把redo中的数据 重做，undo中的数据  回滚，这个命令不需要连接服务端，所以恢复数据的时候可以停库</span><br><span class="line">这个重做要小心谨慎，这个是一次性的，做完了这次备份就不能用了，后面有增量数据，就不能从这个的基础上做增量备份了</span><br><span class="line">innobackupex --apply-log +全备的路径</span><br><span class="line">[root@db02 ~]# innobackupex --apply-log /backup/2024-08-22_16-05-44/</span><br><span class="line"></span><br><span class="line">4、#模拟完成，查看目录，多了好几个东西</span><br><span class="line">[root@db02 ~]# ll /backup/2024-08-22_16-05-44/</span><br><span class="line"></span><br><span class="line">5、#恢复  清空data目录</span><br><span class="line">[root@db02 ~]# <span class="built_in">rm</span> -rf /app/mysql-5.6.50/data</span><br><span class="line">恢复数据</span><br><span class="line">innobackupex --copy-bak +全备的路径</span><br><span class="line">[root@db02 ~]# innobackupex --copy-back /backup/2024-08-22_16-54-47/</span><br><span class="line">授权</span><br><span class="line">[root@db02 ~]# <span class="built_in">chown</span> -R mysql.mysql /app/mysql-5.6.50/data</span><br><span class="line">启动</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld start</span><br><span class="line">查看数据</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|       53 |</span><br><span class="line">+----------+</span><br><span class="line"></span><br><span class="line">----------------------不用这种方法：这个方法是底层原理---------------------</span><br><span class="line">5、#恢复  清空data目录</span><br><span class="line">[root@db02 ~]# <span class="built_in">rm</span> -rf /app/mysql-5.6.50/data</span><br><span class="line">恢复数据</span><br><span class="line">[root@db02 ~]# <span class="built_in">mv</span> /backup/2024-08-22_16-05-44/ /app/mysql-5.6.50/data</span><br><span class="line">授权</span><br><span class="line">[root@db02 ~]# <span class="built_in">chown</span> -R mysql.mysql /app/mysql-5.6.50/data</span><br><span class="line">启动</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld start</span><br><span class="line">查看数据</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|       53 |</span><br><span class="line">+----------+</span><br><span class="line">----------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1、执行脚本</span><br><span class="line">[root@db02 ~]# sh insert.sh </span><br><span class="line"></span><br><span class="line">2、等待一会 做全备</span><br><span class="line">[root@db02 ~]# innobackupex --user=root --password=<span class="string">&#x27;123&#x27;</span> /backup</span><br><span class="line"></span><br><span class="line">3、查看数据里面是否有数据，并删除数据</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|      211 |</span><br><span class="line">+----------+</span><br><span class="line">root@localhost:(none) &gt; drop database prod;</span><br><span class="line"></span><br><span class="line">4、等待一会，停止脚本，进行数据的恢复</span><br><span class="line">[root@db02 ~]# sh insert.sh ^C</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld stop</span><br><span class="line">模拟CSR</span><br><span class="line">[root@db02 ~]# innobackupex --apply-log /backup/2024-08-22_17-09-10/</span><br><span class="line">模拟完成，查看目录，多了好几个东西</span><br><span class="line">[root@db02 ~]# ll /backup/2024-08-22_17-09-10/</span><br><span class="line">[root@db02 ~]# innobackupex --copy-back /backup/2024-08-22_17-09-10/</span><br><span class="line">[root@db02 ~]# <span class="built_in">chown</span> -R mysql.mysql /app/mysql-5.6.50/data</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld start</span><br><span class="line">查看数据</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|      113 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p><strong>增量备份和恢复</strong></p><p>备份方式<br>1）基于上一次备份进行增量<br>2）增量备份无法单独恢复，必须基于全备进行恢复<br>3）所有增量必须要按顺序合并到全备当中</p><p>1、备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">1、执行脚本</span><br><span class="line">[root@db02 ~]# sh insert.sh </span><br><span class="line"></span><br><span class="line">2、全备  等待一会 做全备不带时间戳，并查看位置点</span><br><span class="line">[root@db02 ~]# innobackupex --user=root --password=123 --no-timestamp /backup/full_$(<span class="built_in">date</span> +%F)</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/full_2024-08-22/xtrabackup_checkpoints </span><br><span class="line">backup_type = full-backuped</span><br><span class="line">from_lsn = 0</span><br><span class="line">to_lsn = 3252565</span><br><span class="line">last_lsn = 3260144</span><br><span class="line"></span><br><span class="line">3、第一次增量备份</span><br><span class="line">[root@db02 ~]# innobackupex --user=root --password=123 --no-timestamp --incremental --incremental-basedir=/backup/full_2024-08-22 /backup/inc1_$(<span class="built_in">date</span> +%F-%H)</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc1_2024-08-22-17/xtrabackup_checkpoints </span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 3252565   <span class="comment">#要和全备的to_lsn一样</span></span><br><span class="line">to_lsn = 3473250</span><br><span class="line">last_lsn = 3477650</span><br><span class="line"></span><br><span class="line">4、第二次增备</span><br><span class="line">[root@db02 ~]# innobackupex --user=root --password=123 --no-timestamp --incremental --incremental-basedir=/backup/inc1_2024-08-22-17 /backup/inc2_$(<span class="built_in">date</span> +%F-%H)</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc2_2024-08-22-17/xtrabackup_checkpoints </span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 3473250   <span class="comment">#要和inc1的to_lsn一样</span></span><br><span class="line">to_lsn = 3540803</span><br><span class="line">last_lsn = 3554601</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、第三次增备</span><br><span class="line">[root@db02 ~]# innobackupex --user=root --password=123 --no-timestamp --incremental --incremental-basedir=/backup/inc2_2024-08-22-17 /backup/inc3_$(<span class="built_in">date</span> +%F-%H)</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc3_2024-08-22-18/xtrabackup_checkpoints </span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 3540803   <span class="comment">#要和inc2的to_lsn一样</span></span><br><span class="line">to_lsn = 3576288</span><br><span class="line">last_lsn = 3590568</span><br><span class="line"></span><br><span class="line">6、第四次增备</span><br><span class="line">[root@db02 ~]# innobackupex --user=root --password=123 --no-timestamp --incremental --incremental-basedir=/backup/inc3_2024-08-22-18 /backup/inc4_$(<span class="built_in">date</span> +%F-%H)</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc4_2024-08-22-18/xtrabackup_checkpoints </span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 3576288</span><br><span class="line">to_lsn = 3625448</span><br><span class="line">last_lsn = 3626012</span><br><span class="line"></span><br><span class="line">第四次增量备份之后的数据只能去binlog里面去查找</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# ll /backup</span><br><span class="line">drwxr-x--- 8 root root  268 Aug 22 17:42 full_2024-08-22</span><br><span class="line">drwxr-x--- 7 root root  267 Aug 22 17:53 inc1_2024-08-22-17</span><br><span class="line">drwxr-x--- 7 root root  267 Aug 22 17:58 inc2_2024-08-22-17</span><br><span class="line">drwxr-x--- 7 root root  267 Aug 22 18:00 inc3_2024-08-22-18</span><br><span class="line">drwxr-x--- 7 root root  267 Aug 22 18:02 inc4_2024-08-22-18</span><br><span class="line"></span><br><span class="line">当前系统时间-1h</span><br><span class="line"><span class="built_in">date</span> +%F-%H -d <span class="string">&#x27;-1hour&#x27;</span></span><br><span class="line"><span class="built_in">date</span> +%F-%H -d <span class="string">&#x27;-1day&#x27;</span></span><br><span class="line"><span class="built_in">date</span> +%F-%H -d <span class="string">&#x27;-1minute&#x27;</span></span><br></pre></td></tr></table></figure><p>2、恢复</p><p>1）full+inc1+inc2+inc3+inc4<br>2）需要将inc1和inc2按顺序合并到full中<br>3）分步骤进行–apply-log</p><p><img src="../image/study_img/image-20240822114534116.png" alt="image-20240822114534116"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">1、#先查看里面有多少数据，再删除prod库</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|     2181 |</span><br><span class="line">+----------+</span><br><span class="line">root@localhost:(none) &gt; drop database prod;</span><br><span class="line">脚本开始报错无法写入数据，停止脚本即可</span><br><span class="line">[root@db02 ~]# sh insert.sh ^C</span><br><span class="line"></span><br><span class="line">2、#停止数据库</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld stop</span><br><span class="line"></span><br><span class="line">3、#挪走data目录</span><br><span class="line">[root@db02 ~]# <span class="built_in">mv</span> /app/mysql-5.6.50/data /tmp/</span><br><span class="line"></span><br><span class="line">4、#第一步：在全备中apply-log时，只应用redo，不应用undo    把增备按照顺序合并到全备</span><br><span class="line">全备模拟CSR只做redo，不做undo,因为一条数据写进来，没有提交全备做完了，但在下一个增备里面提交了，如果这个时候把undo做了，数据就回滚了</span><br><span class="line">innobackupex --apply-log --redo-noly /backup/全备</span><br><span class="line">[root@db02 ~]# innobackupex --apply-log --redo-only /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/full_2024-08-22/xtrabackup_checkpoints</span><br><span class="line">backup_type = log-applied  <span class="comment">#状态变了</span></span><br><span class="line">from_lsn = 0</span><br><span class="line">to_lsn = 3252565</span><br><span class="line">last_lsn = 3260144</span><br><span class="line"><span class="comment">#查看全备的位置点有无变化并记录下来</span></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/full_2024-08-22/xtrabackup_binlog_info </span><br><span class="line">mysql-bin.000001       </span><br><span class="line"></span><br><span class="line">5、#第二步：合并inc1合并到full中，并且apply-log，只应用redo，不应用undo</span><br><span class="line">[root@db02 ~]# innobackupex --apply-log --redo-only --incremental-dir=/backup/inc1_2024-08-22-17 /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc1_2024-08-22-17/xtrabackup_checkpoints</span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 3252565</span><br><span class="line">to_lsn = 3473250</span><br><span class="line">last_lsn = 3477650</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/full_2024-08-22/xtrabackup_binlog_info </span><br><span class="line">mysql-bin.000001  </span><br><span class="line"></span><br><span class="line">6、#第三步：合并inc2合并到full中，只做redo，不做undo</span><br><span class="line">[root@db02 ~]# innobackupex --apply-log --redo-only --incremental-dir=/backup/inc2_2024-08-22-17 /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc2_2024-08-22-17/xtrabackup_checkpoints </span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 3473250</span><br><span class="line">to_lsn = 3540803</span><br><span class="line">last_lsn = 3554601</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/full_2024-08-22/xtrabackup_binlog_info </span><br><span class="line">mysql-bin.000001  </span><br><span class="line"></span><br><span class="line">7、#第四步：合并inc3合并到full中，只做redo，不做undo</span><br><span class="line">[root@db02 ~]# innobackupex --apply-log --redo-only --incremental-dir=/backup/inc3_2024-08-22-18 /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc3_2024-08-22-18/xtrabackup_checkpoints</span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 3540803</span><br><span class="line">to_lsn = 3576288</span><br><span class="line">last_lsn = 3590568</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/full_2024-08-22/xtrabackup_binlog_info </span><br><span class="line">mysql-bin.000001  </span><br><span class="line"></span><br><span class="line">8、#第五步：合并inc4（最后一次）合并到full中，redo和undo都做</span><br><span class="line">[root@db02 ~]# innobackupex --apply-log --incremental-dir=/backup/inc4_2024-08-22-18 /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc4_2024-08-22-18/xtrabackup_checkpoints</span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 3576288</span><br><span class="line">to_lsn = 3625448</span><br><span class="line">last_lsn = 3626012</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/full_2024-08-22/xtrabackup_binlog_info </span><br><span class="line">mysql-bin.000001  </span><br><span class="line"></span><br><span class="line">9、#将全备--apply-log，redo和undo都应用</span><br><span class="line">[root@db02 ~]# innobackupex --apply-log /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line">10、#恢复数据</span><br><span class="line">[root@db02 ~]# innobackupex --copy-back /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line">11、#授权  启动</span><br><span class="line">[root@db02 ~]# <span class="built_in">chown</span> -R mysql.mysql /app/mysql-5.6.50/data</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld start</span><br><span class="line"></span><br><span class="line">12、#连接进去查看一下数据是否对得上</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|     1517 |</span><br><span class="line">+----------+  <span class="comment">#可以看到数据少了，还有一部分数据，在binlog里面</span></span><br><span class="line"></span><br><span class="line">13、#截取binlog</span><br><span class="line">合并完了，这个binlog的位置点也会合并</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/full_2024-08-22/xtrabackup_binlog_info </span><br><span class="line">mysql-bin.000001        282633</span><br><span class="line">开始位置点：282633</span><br><span class="line"></span><br><span class="line">由于之前的data目录被挪到tmp了</span><br><span class="line">[root@db02 ~]# mysqlbinlog --base64-output=decode-rows /tmp/data/mysql-bin.000001 |grep  -iC 10 <span class="string">&#x27;drop database&#x27;</span></span><br><span class="line">结束位置点：407253</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# mysqlbinlog --start-position=282633 --stop-position=407253 /tmp/data/mysql-bin.000001 &gt; /tmp/inc5.sql</span><br><span class="line"></span><br><span class="line">14、#进入数据库</span><br><span class="line">关闭binlog,防止binlog被污染，让binlog从120开始</span><br><span class="line">root@localhost:(none) &gt; <span class="built_in">set</span> sql_log_bin=0;</span><br><span class="line"></span><br><span class="line">导入数据</span><br><span class="line">root@localhost:(none) &gt; <span class="built_in">source</span> /tmp/inc5.sql</span><br><span class="line"></span><br><span class="line">开启binlog</span><br><span class="line">root@localhost:(none) &gt; <span class="built_in">set</span> sql_log_bin=1;</span><br><span class="line"></span><br><span class="line">查看数据，已经恢复</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|     2187 |</span><br><span class="line">+----------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">增量备份挺麻烦的 所以企业里面都是做差异备份</span><br><span class="line">但是差异备份比较占磁盘空间</span><br></pre></td></tr></table></figure><p><strong>企业级增量恢复实战</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">背景：</span><br><span class="line">某大型网站，mysql数据库，数据量500G，每日更新量100M-200M</span><br><span class="line"></span><br><span class="line">备份策略：</span><br><span class="line">xtrabackup，每周六0:00进行全备，周一到周五及周日00:00进行增量备份。</span><br><span class="line"></span><br><span class="line">故障场景：</span><br><span class="line">周三下午2点出现数据库意外删除表操作。</span><br><span class="line">如何恢复？？？</span><br><span class="line"></span><br><span class="line"><span class="comment">#全备+增备+binlog</span></span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240822201507914.png" alt="image-20240822201507914"></p><p>1、模拟备份删数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">1、#执行写数据的脚本</span><br><span class="line">[root@db02 ~]# sh insert.sh </span><br><span class="line"></span><br><span class="line">2、#等待一会，全备 (周六)</span><br><span class="line">[root@db02 ~]# <span class="built_in">rm</span> -rf /backup/*</span><br><span class="line">[root@db02 ~]# innobackupex --user=root --password=123 --no-timestamp /backup/full_$(<span class="built_in">date</span> +%F)</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/full_2024-08-22/xtrabackup_checkpoints </span><br><span class="line">backup_type = full-backuped</span><br><span class="line">from_lsn = 0</span><br><span class="line">to_lsn = 4215962</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、#等待一会，增备inc1 (周日)</span><br><span class="line">[root@db02 ~]# innobackupex --user=root --password=123 --no-timestamp --incremental --incremental-basedir=/backup/full_2024-08-22/ /backup/inc1_$(<span class="built_in">date</span> +%F-%H)</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc1_2024-08-22-20/xtrabackup_checkpoints </span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 4215962</span><br><span class="line">to_lsn = 4333233</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、#等待一会，增备inc2 (周一)</span><br><span class="line">[root@db02 ~]# innobackupex --user=root --password=123 --no-timestamp --incremental --incremental-basedir=/backup/inc1_2024-08-22-20/ /backup/inc2_$(<span class="built_in">date</span> +%F-%H)</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc2_2024-08-22-20/xtrabackup_checkpoints </span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 4333233</span><br><span class="line">to_lsn = 4395658</span><br><span class="line"></span><br><span class="line">5、#等待一会，增备inc3 (周二)</span><br><span class="line">[root@db02 ~]# innobackupex --user=root --password=123 --no-timestamp --incremental --incremental-basedir=/backup/inc2_2024-08-22-20/ /backup/inc3_$(<span class="built_in">date</span> +%F-%H)</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc3_2024-08-22-20/xtrabackup_checkpoints </span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 4395658</span><br><span class="line">to_lsn = 4411035</span><br><span class="line"></span><br><span class="line">6、#等待一会，增备inc4 (周三)</span><br><span class="line">[root@db02 ~]# innobackupex --user=root --password=123 --no-timestamp --incremental --incremental-basedir=/backup/inc3_2024-08-22-20/ /backup/inc4_$(<span class="built_in">date</span> +%F-%H)</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc4_2024-08-22-20/xtrabackup_checkpoints </span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 4411035</span><br><span class="line">to_lsn = 4455757</span><br><span class="line"></span><br><span class="line">7、#周三下午2点出现数据库意外删除表操作，先查看数据，再删表</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|     1199 |</span><br><span class="line">+----------+</span><br><span class="line">root@localhost:(none) &gt; drop table prod.prod;</span><br><span class="line">停止脚本运行</span><br><span class="line">[root@db02 ~]# sh insert.sh ^C</span><br></pre></td></tr></table></figure><p>2、恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">1、#停止数据库</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld stop</span><br><span class="line"></span><br><span class="line">3、#挪走data目录</span><br><span class="line">[root@db02 ~]# <span class="built_in">mv</span> /app/mysql-5.6.50/data /tmp/</span><br><span class="line"></span><br><span class="line">2、#第一步：在全备中apply-log时，只应用redo，不应用undo</span><br><span class="line">[root@db02 ~]# innobackupex --apply-log --redo-only /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/full_2024-08-22/xtrabackup_checkpoints </span><br><span class="line">backup_type = log-applied</span><br><span class="line">from_lsn = 0</span><br><span class="line">to_lsn = 4215962</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/full_2024-08-22/xtrabackup_binlog_info </span><br><span class="line">mysql-bin.000001        55527</span><br><span class="line"></span><br><span class="line">3、#第二步：合并inc1合并到full中，并且apply-log，只应用redo，不应用undo  (周日和周六合并)</span><br><span class="line">[root@db02 ~]# innobackupex --apply-log --redo-only --incremental-dir=/backup/inc1_2024-08-22-20 /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc1_2024-08-22-20/xtrabackup_checkpoints</span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 4215962</span><br><span class="line">to_lsn = 4333233</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc1_2024-08-22-20/xtrabackup_binlog_info </span><br><span class="line">mysql-bin.000001        112629</span><br><span class="line"></span><br><span class="line">4、#第三步：合并inc2合并到full中，只做redo，不做undo    (周一和周六合并)</span><br><span class="line">[root@db02 ~]# innobackupex --apply-log --redo-only --incremental-dir=/backup/inc2_2024-08-22-20 /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc2_2024-08-22-20/xtrabackup_checkpoints </span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 4333233</span><br><span class="line">to_lsn = 4395658</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc2_2024-08-22-20/xtrabackup_binlog_info </span><br><span class="line">mysql-bin.000001        144249</span><br><span class="line"></span><br><span class="line">5、#第四步：合并inc3合并到full中，只做redo，不做undo    (周二和周六合并)</span><br><span class="line">[root@db02 ~]# innobackupex --apply-log --redo-only --incremental-dir=/backup/inc3_2024-08-22-20 /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc3_2024-08-22-20/xtrabackup_checkpoints </span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 4395658</span><br><span class="line">to_lsn = 4411035</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc3_2024-08-22-20/xtrabackup_binlog_info </span><br><span class="line">mysql-bin.000001        163965</span><br><span class="line"></span><br><span class="line">6、#第五步：合并inc4（最后一次）合并到full中，redo和undo都做   (周三和周六合并)</span><br><span class="line">[root@db02 ~]# innobackupex --apply-log --incremental-dir=/backup/inc4_2024-08-22-20 /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc4_2024-08-22-20/xtrabackup_checkpoints </span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 4411035</span><br><span class="line">to_lsn = 4455757</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc4_2024-08-22-20/xtrabackup_binlog_info </span><br><span class="line">mysql-bin.000001        186099</span><br><span class="line"></span><br><span class="line">7、#将全备--apply-log，redo和undo都应用</span><br><span class="line">[root@db02 ~]# innobackupex --apply-log /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line">8、#恢复数据</span><br><span class="line">[root@db02 ~]# innobackupex --copy-back /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line">9、#授权  启动</span><br><span class="line">[root@db02 ~]# <span class="built_in">chown</span> -R mysql.mysql /app/mysql-5.6.50/data</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld start</span><br><span class="line"></span><br><span class="line">10、#连接进去查看一下数据是否对得上</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|      998 |</span><br><span class="line">+----------+  <span class="comment">#可以看到数据少了，还有一部分数据，在binlog里面</span></span><br><span class="line"></span><br><span class="line">11、#截取binlog</span><br><span class="line">合并完了，这个binlog的位置点也会合并</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/full_2024-08-22/xtrabackup_binlog_info </span><br><span class="line">mysql-bin.000001        186099</span><br><span class="line">开始位置点：186099</span><br><span class="line">由于之前的data目录被挪到tmp了</span><br><span class="line">[root@db02 ~]# mysqlbinlog --base64-output=decode-rows /tmp/data/mysql-bin.000001 |grep  -iC 10 <span class="string">&#x27;drop table&#x27;</span></span><br><span class="line">结束位置点：223640</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# mysqlbinlog --start-position=186099 --stop-position=223640 /tmp/data/mysql-bin.000001 &gt; /tmp/inc5.sql</span><br><span class="line"></span><br><span class="line">12、#进入数据库</span><br><span class="line">关闭binlog,防止binlog被污染，让binlog从120开始</span><br><span class="line">root@localhost:(none) &gt; <span class="built_in">set</span> sql_log_bin=0;</span><br><span class="line"></span><br><span class="line">导入数据</span><br><span class="line">root@localhost:(none) &gt; <span class="built_in">source</span> /tmp/inc5.sql</span><br><span class="line"></span><br><span class="line">开启binlog</span><br><span class="line">root@localhost:(none) &gt; <span class="built_in">set</span> sql_log_bin=1;</span><br><span class="line"></span><br><span class="line">查看数据，已经恢复</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|     1199 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p><strong>xtrabackupex进行差异备份</strong></p><p><img src="../image/study_img/image-20240822212220010.png" alt="image-20240822212220010"></p><p><img src="../image/study_img/image-20240822214839115.png" alt="image-20240822214839115"></p><p>1、模拟备份删数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">1、#执行写数据的脚本</span><br><span class="line">[root@db02 ~]# sh insert.sh </span><br><span class="line"></span><br><span class="line">2、#等待一会，全备 (周六)</span><br><span class="line">[root@db02 ~]# <span class="built_in">rm</span> -rf /backup/*</span><br><span class="line">[root@db02 ~]# innobackupex --user=root --password=123 --no-timestamp /backup/full_$(<span class="built_in">date</span> +%F)</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/full_2024-08-22/xtrabackup_checkpoints </span><br><span class="line">backup_type = full-backuped</span><br><span class="line">from_lsn = 0</span><br><span class="line">to_lsn = 4915321</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、#等待一会，差异备inc1 (周日)</span><br><span class="line">[root@db02 ~]# innobackupex --user=root --password=123 --no-timestamp --incremental --incremental-basedir=/backup/full_2024-08-22/ /backup/inc1_$(<span class="built_in">date</span> +%F-%H)</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc1_2024-08-22-21/xtrabackup_checkpoints</span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 4915321</span><br><span class="line">to_lsn = 4987544</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、#等待一会，差异备inc2 (周一)</span><br><span class="line">[root@db02 ~]# innobackupex --user=root --password=123 --no-timestamp --incremental --incremental-basedir=/backup/full_2024-08-22/ /backup/inc2_$(<span class="built_in">date</span> +%F-%H)</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc2_2024-08-22-21/xtrabackup_checkpoints </span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = </span><br><span class="line">to_lsn = </span><br><span class="line"></span><br><span class="line">5、#等待一会，差异备inc3 (周二)</span><br><span class="line">[root@db02 ~]# innobackupex --user=root --password=123 --no-timestamp --incremental --incremental-basedir=/backup/full_2024-08-22/ /backup/inc3_$(<span class="built_in">date</span> +%F-%H)</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc3_2024-08-22-21/xtrabackup_checkpoints </span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = </span><br><span class="line">to_lsn = </span><br><span class="line"></span><br><span class="line">6、#等待一会，差异备inc4 (周三)</span><br><span class="line">[root@db02 ~]# innobackupex --user=root --password=123 --no-timestamp --incremental --incremental-basedir=/backup/full_2024-08-22/ /backup/inc4_$(<span class="built_in">date</span> +%F-%H)</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc4_2024-08-22-21/xtrabackup_checkpoints </span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = </span><br><span class="line">to_lsn = </span><br><span class="line"></span><br><span class="line">7、#周三下午2点出现数据库意外删除表操作，先查看数据，再删表</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|      497 |</span><br><span class="line">+----------+</span><br><span class="line">root@localhost:(none) &gt; drop table prod.prod;</span><br><span class="line">停止脚本运行</span><br><span class="line">[root@db02 ~]# sh insert.sh ^C</span><br></pre></td></tr></table></figure><p>2、恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">1、#停止数据库</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld stop</span><br><span class="line"></span><br><span class="line">3、#挪走data目录</span><br><span class="line">[root@db02 ~]# <span class="built_in">mv</span> /app/mysql-5.6.50/data /tmp/</span><br><span class="line"></span><br><span class="line">2、#第一步：在全备中apply-log时，只应用redo，不应用undo</span><br><span class="line">[root@db02 ~]# innobackupex --apply-log --redo-only /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/full_2024-08-22/xtrabackup_checkpoints </span><br><span class="line">backup_type = log-applied</span><br><span class="line">from_lsn = 0</span><br><span class="line">to_lsn = 4915321</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/full_2024-08-22/xtrabackup_binlog_info </span><br><span class="line">mysql-bin.000001        9399</span><br><span class="line"></span><br><span class="line">3、#第二步：合并inc4（最后一次的差异备份）到full中，redo和undo都做   (周三和周六合并)</span><br><span class="line">[root@db02 ~]# innobackupex --apply-log --incremental-dir=/backup/inc4_2024-08-22-21 /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc4_2024-08-22-21/xtrabackup_checkpoints </span><br><span class="line">backup_type = incremental</span><br><span class="line">from_lsn = 4915321</span><br><span class="line">to_lsn = 5067923</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/inc4_2024-08-22-21/xtrabackup_binlog_info </span><br><span class="line">mysql-bin.000001         85473</span><br><span class="line"></span><br><span class="line">4、#将全备--apply-log，redo和undo都应用</span><br><span class="line">[root@db02 ~]# innobackupex --apply-log /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line">5、#恢复数据</span><br><span class="line">[root@db02 ~]# innobackupex --copy-back /backup/full_2024-08-22/</span><br><span class="line"></span><br><span class="line">6、#授权  启动</span><br><span class="line">[root@db02 ~]# <span class="built_in">chown</span> -R mysql.mysql /app/mysql-5.6.50/data</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld start</span><br><span class="line"></span><br><span class="line">7、#连接进去查看一下数据是否对得上</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|      457 |</span><br><span class="line">+----------+  <span class="comment">#可以看到数据少了，还有一部分数据，在binlog里面</span></span><br><span class="line"></span><br><span class="line">8、#截取binlog</span><br><span class="line">合并完了，这个binlog的位置点也会合并</span><br><span class="line">[root@db02 ~]# <span class="built_in">cat</span> /backup/full_2024-08-22/xtrabackup_binlog_info </span><br><span class="line">mysql-bin.000001        85473</span><br><span class="line">开始位置点：85473</span><br><span class="line">由于之前的data目录被挪到tmp了</span><br><span class="line">[root@db02 ~]# mysqlbinlog --base64-output=decode-rows /tmp/data/mysql-bin.000001 |grep  -iC 10 <span class="string">&#x27;drop table&#x27;</span></span><br><span class="line">结束位置点：93068</span><br><span class="line"></span><br><span class="line">[root@db02 ~]# mysqlbinlog --start-position=85473 --stop-position=93068 /tmp/data/mysql-bin.000001 &gt; /tmp/inc5.sql</span><br><span class="line"></span><br><span class="line">9、#进入数据库</span><br><span class="line">关闭binlog,防止binlog被污染，让binlog从120开始</span><br><span class="line">root@localhost:(none) &gt; <span class="built_in">set</span> sql_log_bin=0;</span><br><span class="line"></span><br><span class="line">导入数据</span><br><span class="line">root@localhost:(none) &gt; <span class="built_in">source</span> /tmp/inc5.sql</span><br><span class="line"></span><br><span class="line">开启binlog</span><br><span class="line">root@localhost:(none) &gt; <span class="built_in">set</span> sql_log_bin=1;</span><br><span class="line"></span><br><span class="line">查看数据，已经恢复</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> count(*) from prod.prod;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|      497 |</span><br><span class="line">+----------+  <span class="comment">#差异备份恢复完成</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本篇文章介绍了mysql的日志，利用mysql的binlog对进行截取和恢复数据，介绍使用备份工具对数据进行备份的案例</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Mysql存储引擎和DTL</title>
    <link href="https://www.fomal.cc/posts/23751c6b.html"/>
    <id>https://www.fomal.cc/posts/23751c6b.html</id>
    <published>2024-09-21T09:43:45.000Z</published>
    <updated>2024-09-21T11:19:03.299Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mysql存储引擎-DTL">mysql存储引擎&amp;DTL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.idb 结尾的文件叫表空间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MySQL引擎功能：</span><br><span class="line">除了可以提供基本的存取功能，还有更多功能事务功能、锁定、备份和恢复、优化以及特殊功能</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MySQL 提供以下存储引擎:</span><br><span class="line"><span class="string">&#x27;01）InnoDB&#x27;</span>    <span class="comment">#主流的</span></span><br><span class="line"><span class="string">&#x27;02）MyISAM&#x27;</span></span><br><span class="line">03）MEMORY</span><br><span class="line">04）ARCHIVE</span><br><span class="line">05）FEDERATED</span><br><span class="line">06）EXAMPLE</span><br><span class="line">07）BLACKHOLE</span><br><span class="line">08）MERGE</span><br><span class="line">09）NDBCLUSTER</span><br><span class="line">10）CSV</span><br><span class="line"></span><br><span class="line">数据定义语言，建库建表</span><br></pre></td></tr></table></figure><p>mysql自带的存储引擎</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看mysql自带的存储引擎</span></span><br><span class="line">root@localhost:(none) &gt; show engines;</span><br><span class="line">+--------------------+</span><br><span class="line">| Engine             |</span><br><span class="line">+--------------------+</span><br><span class="line">| FEDERATED          |</span><br><span class="line">| MRG_MYISAM         |</span><br><span class="line">| MyISAM             |#</span><br><span class="line">| BLACKHOLE          |</span><br><span class="line">| CSV                |</span><br><span class="line">| MEMORY             |</span><br><span class="line">| ARCHIVE            |</span><br><span class="line">| InnoDB             | <span class="comment">#</span></span><br><span class="line">| PERFORMANCE_SCHEMA |</span><br><span class="line">+--------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看mysql数据库中哪些表使用的存储引擎是InnoDB</span></span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> * from information_schema.tables  <span class="built_in">where</span> ENGINE=<span class="string">&#x27;InnoDB&#x27;</span>\G;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看数据库中哪些表是myisam</span></span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> * from information_schema.tables <span class="built_in">where</span> engine=<span class="string">&#x27;myisam&#x27;</span>\G</span><br></pre></td></tr></table></figure><p><strong>InnoDB和myisam的区别</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#面试问题InnoDB和myisam的区别</span></span><br><span class="line">mysiam的物理文件有3个，Inodb的物理文件有2个</span><br><span class="line">Inodb是行级锁，mysiam是表级锁</span><br><span class="line">inodb支持事务，redo和undo是实现CSR过程的2个事务日志，所以有CSR自动故障恢复；</span><br><span class="line">mysiam不支持事务，没有redo和undo，没有CSR自动故障恢复</span><br><span class="line">Inodb是行级锁，支持MVCC高版本并发控制；mysiam不支持，因为mysiam是表级锁(改一行，整个表都锁了)</span><br><span class="line">高版本并发控制类似于行级锁，你改这行数据的时候，其他行的数据别人也是可以改的，因为有共享锁+排他锁+乐观锁构成</span><br><span class="line">Inodb支持热备，mysiam不支持</span><br><span class="line">(热备是按照事务的提交做的备份)</span><br></pre></td></tr></table></figure><p>1、物理区别：最底层的数据文件不同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysiam数据文件  frm=fotmat 结构</span></span><br><span class="line"><span class="comment">#myisam的数据文件由3个组成</span></span><br><span class="line">1、查看mysql的安装目录下的所有user文件</span><br><span class="line">[root@db01 ~]# <span class="built_in">cd</span> /app/mysql-5.6.50/data/mysql</span><br><span class="line"></span><br><span class="line">2、查看所有user的文件</span><br><span class="line">[root@db01 mysql]# ll user*</span><br><span class="line">-rw-rw---- 1 mysql mysql 10684 Aug  7 23:30 user.frm</span><br><span class="line">-rw-rw---- 1 mysql mysql   664 Aug 13 15:27 user.MYD</span><br><span class="line">-rw-rw---- 1 mysql mysql  2048 Aug 13 22:01 user.MYI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#InoDd的数据文件由2个组成</span></span><br><span class="line">进入随意一个库文件</span><br><span class="line">[root@db01 student]# <span class="built_in">cd</span> /app/mysql-5.6.50/data/student</span><br><span class="line">[root@db01 student]# ll</span><br><span class="line">-rw-rw---- 1 mysql mysql   8726 Aug 13 03:17 stu1.frm</span><br><span class="line">-rw-rw---- 1 mysql mysql  98304 Aug 15 20:52 stu1.ibd</span><br></pre></td></tr></table></figure><p>2、逻辑区别</p><p><img src="../image/study_img/image-20240816090213485.png" alt="image-20240816090213485"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mvcc叫多版本进化控制</span><br><span class="line"></span><br><span class="line">锁定粒度：在修改一行数据中，别的用户过来是不可以修改的</span><br><span class="line"></span><br><span class="line">把改的数据放到缓存里，先搞一个消息队列，把改的头像放到缓存里面，等上一个人修改完成后，再把你的头像放到数据库中，所以改头像要刷新一会才看到新改的头像</span><br><span class="line"></span><br><span class="line">冷备：把服务停掉，做备份</span><br><span class="line">热备：不停服务器，做备份</span><br><span class="line">温备：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb核心特性</span></span><br><span class="line">重点:</span><br><span class="line">MVCC</span><br><span class="line">事务</span><br><span class="line">行级锁</span><br><span class="line">热备份</span><br><span class="line">Crash Safe Recovery（自动故障恢复）</span><br><span class="line"></span><br><span class="line">mysiam没有事务 就没有事务日志redo undo</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看默认的存储引擎的3种方法：</span></span><br><span class="line">1、#使用 SELECT 确认会话存储引擎</span><br><span class="line">root@localhost:(none) &gt; SELECT @@default_storage_engine;</span><br><span class="line">+--------------------------+</span><br><span class="line">| @@default_storage_engine |</span><br><span class="line">+--------------------------+</span><br><span class="line">| InnoDB                   |</span><br><span class="line">+--------------------------+</span><br><span class="line"></span><br><span class="line">2、#使用 show 确认每个表的存储引擎</span><br><span class="line">root@localhost:(none) &gt; show create table world.city;</span><br><span class="line">建表语句最后一行显示存储引擎</span><br><span class="line">ENGINE=InnoDB AUTO_INCREMENT=4080 DEFAULT CHARSET=latin1</span><br><span class="line"></span><br><span class="line">3、#使用  informattion_schema 确认每个表的存储引擎</span><br><span class="line"><span class="keyword">select</span> table_name, engine from information_schema.tables <span class="built_in">where</span> table_name=<span class="string">&#x27;city&#x27;</span> and table_schema=<span class="string">&#x27;world&#x27;</span>\G</span><br><span class="line"></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">table_name: city</span><br><span class="line">    engine: InnoDB</span><br></pre></td></tr></table></figure><p>存储引擎的设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#.存储引擎的设置     #不要去瞎改，使用默认的就行</span></span><br><span class="line">1）#在配置文件的[mysqld]标签下添加 (永久生效)</span><br><span class="line">[mysqld]</span><br><span class="line">default-storage-engine=InnoDB  <span class="comment">#这行配置就改你需要的存储引擎</span></span><br><span class="line">注意：改了配置文件需要重启</span><br><span class="line"></span><br><span class="line">2）#在MySQL命令行中临时设置(临时生效)</span><br><span class="line">SET @@storage_engine=InnoDB</span><br><span class="line"></span><br><span class="line">3）#建表的时候指定存储引擎</span><br><span class="line">create table t (i int) engine = InnoDB;</span><br></pre></td></tr></table></figure><p><strong>企业案例1</strong></p><p>项目背景：<br>公司原有的架构：一个展示型的网站，LAMT，MySQL5.1.77版本（MYISAM），50M数据量。</p><p>小问题不断：<br>1、表级锁：对表中任意一行数据修改类操作时，整个表都会锁定，对其他行的操作都不能同时进行。<br>2、myisam不支持故障自动恢复（CSR）：当断电时有可能会出现数据损坏或丢失的问题。</p><p>如何解决：<br>1、建议将现有的myisam引擎替换为Innodb，将版本替换为5.7<br>1）如果使用MYISAM会产生”小问题”，性能安全不能得到保证，使用innodb可以解决这个问题。<br>2）5.7版本对于innodb引擎支持不够完善，5.7版本对innodb支持非常完善了。</p><p>2、实施过程和注意要素：但是这个代码上面有很大的改动，开发改好代码才做升级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">升级的时候不能影响到用户</span><br><span class="line"></span><br><span class="line"><span class="comment">#不停库的操作</span></span><br><span class="line">1、准备一个新环境，来一台新机器，因为有问题的机器不能动</span><br><span class="line"></span><br><span class="line">2、在新环境中二进制安装一个mysql5.7.44，如果是容器的话就docker起一个</span><br><span class="line"></span><br><span class="line">3、给当前正在提供服务的生产库，进行一个全备（打点全备，记录当前备份的位置点）</span><br><span class="line">为什么做全备：因为在生产的数据库虽然不用了，但里面有很多系统表，mysql的user表,创建的用户，给开发开的用户，开发写的程序连接数据库的用户都在里面，包括要求的授权，脱敏的授权，如果再去一个一个创建就比较麻烦，如果要保证这些都还在，就要做全备</span><br><span class="line">[root@db02 ~]# vim /etc/my.cnf</span><br><span class="line">[mysql]   <span class="comment">#这个标签所有客户端都识别</span></span><br><span class="line">prompt=<span class="string">&quot;\\u@\\h:\\d &gt; &quot;</span></span><br><span class="line">[root@db02 ~]# mysqldump -uroot -p123 -A --triggers -R --master-data=2 &gt;/tmp/full.sql</span><br><span class="line">-A         导出所有数据库。</span><br><span class="line">--triggers 确保触发器也被导出</span><br><span class="line">-R         导出存储过程和函数。</span><br><span class="line">--master-data=2 导出的SQL文件中包含CHANGE MASTER TO语句，这些语句包含了二进制日志的位置信息，这对于设置复制环境非常有用。=2 的意思是，这些语句会被注释掉，使得它们默认不会被执行，但你可以根据需要取消注释它们。</span><br><span class="line"></span><br><span class="line">4、将全备恢复到新环境</span><br><span class="line">[root@db01 ~]# mysql -uroot -p123 &lt; /tmp/full.sql</span><br><span class="line"></span><br><span class="line">5、从新环境备份出程序库的所有表数据(做一个单库的备份)</span><br><span class="line">mysqldump -uroot -p123 -B 程序库 &gt; /tmp/程序库.sql</span><br><span class="line">[root@db01 ~]# mysqldump -uroot -p123 -B student &gt; /tmp/student.sql</span><br><span class="line"></span><br><span class="line">6、修改表的存储引擎</span><br><span class="line">[root@db01 ~]# sed -i <span class="string">&#x27;s#ENGINE=MYISAM#ENGINE=INNODB#g&#x27;</span> /tmp/student.sql</span><br><span class="line"></span><br><span class="line">7、将修改后的程序库数据到新环境</span><br><span class="line"><span class="comment">#新环境没开bin_log的导入方法</span></span><br><span class="line">[root@db01 student]# mysqldump -uroot -p123 &lt; /tmp/student.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">#新环境开bin_log的导入方法：需要加入数据库</span></span><br><span class="line">1）关闭bin_log的记录</span><br><span class="line">root@localhost:(none) &gt; <span class="built_in">set</span> sql_log_bin=0;</span><br><span class="line"></span><br><span class="line">2）导入数据</span><br><span class="line">root@localhost:(none) &gt; <span class="built_in">source</span> /tmp/student.sql</span><br><span class="line"></span><br><span class="line">3）开启bin_log的记录</span><br><span class="line">root@localhost:(none) &gt; <span class="built_in">set</span> sql_log_bin=1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#停库操作</span></span><br><span class="line">8、先挂维护页，旧环境停止连接数据库的服务、数据库</span><br><span class="line">[root@db02 ~]# systemctl stop tomcat;systemctl stop php-fpm;systemctl stop mysql</span><br><span class="line"></span><br><span class="line">9、从bin_log中截取增量数据</span><br><span class="line"></span><br><span class="line">10、启动新环境数据库</span><br><span class="line"></span><br><span class="line">11、恢复截取的增量数据到新环境</span><br><span class="line"></span><br><span class="line">12、测试环境连接新库，测试所有功能</span><br><span class="line">    </span><br><span class="line">13、应用割接到新数据库(改程序代码连接到数据库的信息,如果是云主机就改云主机的ip,物理机修改网卡的ip很麻烦,改程序代码连接到数据库)</span><br><span class="line"></span><br><span class="line">14、启动连接数据库的服务</span><br><span class="line"></span><br><span class="line">15、取消维护页</span><br><span class="line"></span><br><span class="line">项目结果：</span><br><span class="line">解决了<span class="string">&#x27;小问题&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>mysql中的表空间</strong></p><p>在mysql中表空间有2种<br>1、共享表空间(需要做切割)，所有表都能共享这里的数据<br>–  用来存储系统数据的<br>–  存undo<br>–  临时表(类似于连表查询出来的表)<br>2、独立表空间(inodb看到的idb文件)<br>–  存储用户真实数据<br>–  每一张inodb存储引擎的表都有一个自己独立表空间</p><ul><li>共享表空间：用来存储系统数据、存undo、存临时表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看共享表空间</span></span><br><span class="line"><span class="comment">#物理查看</span></span><br><span class="line">[root@db01 ~]# ll /app/mysql-5.6.50/data/</span><br><span class="line">-rw-rw---- 1 mysql mysql       56 Aug  7 23:44 auto.cnf  <span class="comment">#UUID文件</span></span><br><span class="line">-rw-rw---- 1 mysql mysql 79691776 Aug 15 20:56 ibdata1   <span class="comment">#共享表空间</span></span><br><span class="line">-rw-rw---- 1 mysql mysql 50331648 Aug 15 20:56 ib_logfile0</span><br><span class="line">-rw-rw---- 1 mysql mysql 50331648 Aug  7 23:30 ib_logfile1</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看共享表空间的配置</span></span><br><span class="line">root@localhost:(none) &gt; show variables like <span class="string">&#x27;%path%&#x27;</span>;</span><br><span class="line">+----------------------------------+------------------------+</span><br><span class="line">| Variable_name                    | Value                  |</span><br><span class="line">+----------------------------------+------------------------+</span><br><span class="line">| innodb_data_file_path            | ibdata1:12M:autoextend |</span><br><span class="line">+----------------------------------+------------------------+</span><br><span class="line">这个表空间默认大写只能存储12M数据   autoextend自动扩展：如果说共享表空间越来越大，存储系统数据的、存undo、临时表的速度越来越慢，所以共享表空间要做切割</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#共享表空间的切割</span></span><br><span class="line">1、编辑配置文件</span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">innodb_data_file_path=ibdata1:50M;ibdata2:50M:autoextend  <span class="comment">#后面再切的话改ibdata3 ibdata4就行了</span></span><br><span class="line"></span><br><span class="line">2、重启数据库失败</span><br><span class="line">[root@db01 ~]# /etc/init.d/mysqld restart</span><br><span class="line">Shutting down MySQL.... SUCCESS! </span><br><span class="line">Starting MySQL.... ERROR! The server quit without updating PID file (/app/mysql-5.6.50/data/db01.pid).</span><br><span class="line"></span><br><span class="line">3、查看日志</span><br><span class="line">[root@db01 ~]# tailf -200 /app/mysql-5.6.50/data/db01.err </span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240816162945793.png" alt="image-20240816162945793"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分析：</span></span><br><span class="line">mysql里面最小的数据单位是页，一页16K</span><br><span class="line">报错显示idbdata1的大小是4864页,而我在配置文件配置的是3200页</span><br><span class="line">(4864*16)/1024=76M                (3200*16)/1024=50M</span><br><span class="line">原本ibdata1共享表空间的大小为76M，但是配置文件中只给了50M不够</span><br><span class="line"></span><br><span class="line">4、所以我在改的时候一定要看一下ibdata1共享表空间多大，改成一模一样的大小就好,后面的无所谓，因为后面的还没有生成</span><br><span class="line">[root@db01 ~]# <span class="built_in">du</span> -sh /app/mysql-5.6.50/data/ibdata1</span><br><span class="line">76M     /app/mysql-5.6.50/data/ibdata1</span><br><span class="line">表示ibdata1 文件占用了大约 76M 的磁盘空间</span><br><span class="line"></span><br><span class="line">5、重新修改配置文件，再启动</span><br><span class="line">[root@db01 ~]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">innodb_data_file_path=ibdata1:76M;ibdata2:50M:autoextend</span><br><span class="line"></span><br><span class="line">[root@db01 ~]# /etc/init.d/mysqld restart</span><br><span class="line"></span><br><span class="line">6、切割完成查看多出ibdata2，以后就往ibdata2保存系统数据，undo、临时表，ibdata1就固定在76M了</span><br><span class="line">[root@db01 ~]# ll /app/mysql-5.6.50/data/</span><br><span class="line">-rw-rw---- 1 mysql mysql 79691776 Aug 16 11:07 ibdata1</span><br><span class="line">-rw-rw---- 1 mysql mysql 52428800 Aug 16 11:07 ibdata2  <span class="comment">#会新增这个</span></span><br></pre></td></tr></table></figure><ul><li>独立表空间：存储用户真实数据、每一张inodb存储引擎的表都有一个自己独立表空间</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">所有的idb文件，就是每一张表的独立表空间</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看独立表空间</span></span><br><span class="line">[root@db01 ~]# ll /app/mysql-5.6.50/data/student/stu*</span><br><span class="line">-rw-rw---- 1 mysql mysql   8726 Aug 13 03:17 stu1.frm</span><br><span class="line">-rw-rw---- 1 mysql mysql  98304 Aug 15 20:52 stu1.ibd    <span class="comment">#独立表空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看独立表空间是否开启，默认是开启的</span></span><br><span class="line">root@localhost:(none) &gt; show variables like <span class="string">&#x27;%per_table%&#x27;</span>;</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| Variable_name         | Value |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| innodb_file_per_table | ON    |</span><br><span class="line">+-----------------------+-------+</span><br></pre></td></tr></table></figure><p>5.7版本中默认会将undo和临时表独立出来，5.6版本也可以独立，只不过需要在初始化的时候进行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#5.7的临时表</span></span><br><span class="line">[root@db03 ~]# ll /app/mysql-5.7.44/data/</span><br><span class="line">-rw-r----- 1 mysql mysql 12582912 Aug  9 05:40 ibtmp1</span><br></pre></td></tr></table></figure><p><strong>企业案例2</strong></p><p>在没有备份数据的情况下，突然断电导致表结构损坏，打不开数据库。</p><p>环境准备：</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th></tr></thead><tbody><tr><td>db01</td><td>10.0.0.51  /  172.16.1.51</td><td>新环境</td></tr><tr><td>bdb02</td><td>10.0.0.52  /  172.16.1.52</td><td>旧环境：表结构损坏的数据库</td></tr></tbody></table><p>模拟数据损坏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模拟表结构损坏</span></span><br><span class="line">准备数据库的备份文件传递到其他机器</span><br><span class="line">[root@db01 ~]# <span class="built_in">cd</span> /app/mysql-5.6.50/data/</span><br><span class="line">[root@db01 data]# tar zcf world.tgz world</span><br><span class="line">[root@db01 data]# scp world.tgz 172.16.1.52:/root</span><br><span class="line"></span><br><span class="line">bdb02操作：</span><br><span class="line">1、将库文件解压到mysql的data目录</span><br><span class="line">[root@db02 ~]# tar xf world.tgz -C /app/mysql-5.6.50/data/</span><br><span class="line"></span><br><span class="line">2、重启mysql</span><br><span class="line">[root@db02 ~]# /etc/init.d/mysqld restart</span><br><span class="line"></span><br><span class="line">3、连接数据库，查看库是否导入成功</span><br><span class="line">[root@db02 ~]# mysql</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| world              |</span><br><span class="line"></span><br><span class="line">4、查看表里面的数据，报错</span><br><span class="line">mysql&gt; use world</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_world |</span><br><span class="line">+-----------------+</span><br><span class="line">| city            |</span><br><span class="line">| country         |</span><br><span class="line">| countrylanguage |</span><br><span class="line">| score           |</span><br><span class="line">+-----------------+</span><br><span class="line">mysql&gt; <span class="keyword">select</span> * from city;</span><br><span class="line">ERROR 1146 (42S02): Table <span class="string">&#x27;world.city&#x27;</span> doesn<span class="string">&#x27;t exist</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt; select * from country;</span></span><br><span class="line"><span class="string">ERROR 1146 (42S02): Table &#x27;</span>world.country<span class="string">&#x27; doesn&#x27;</span>t exist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如下恢复的操作需要准备新环境，但是想保留2个机器之前的数据，建议给db01、db02拍摄快照</span></span><br></pre></td></tr></table></figure><p>恢复思路</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">1、#先停止db02连接mysql的所有服务，停止mysql数据库，准备新环境</span><br><span class="line">由于我把db01当作新环境，并且拍摄了快照，我可以把之前的数据文件清理掉</span><br><span class="line">[root@db01 ~]# /etc/init.d/mysqld stop</span><br><span class="line">[root@db01 ~]# <span class="built_in">rm</span> -rf /app/mysql-5.6.50/data/</span><br><span class="line"></span><br><span class="line">重新初始化，就可以当作新环境的数据库</span><br><span class="line">[root@db01 ~]# /app/mysql-5.6.50/scripts/mysql_install_db --user=mysql --basedir=/app/mysql-5.6.50 --datadir=/app/mysql-5.6.50/data</span><br><span class="line">[root@db01 ~]# <span class="built_in">echo</span> $?</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">新环境OK,启动mysql</span><br><span class="line">[root@db01 ~]# /etc/init.d/mysqld start</span><br><span class="line">Starting MySQL.Logging to <span class="string">&#x27;/app/mysql-5.6.50/data/db01.err&#x27;</span>.</span><br><span class="line">.. SUCCESS! </span><br><span class="line"></span><br><span class="line">[root@db01 ~]# ll /app/mysql-5.6.50/data/</span><br><span class="line">total 229028</span><br><span class="line">-rw-rw---- 1 mysql mysql       56 Aug 17 02:16 auto.cnf</span><br><span class="line">-rw-rw---- 1 mysql mysql     1995 Aug 17 02:16 db01.err</span><br><span class="line">-rw-rw---- 1 mysql mysql        5 Aug 17 02:16 db01.pid</span><br><span class="line">-rw-rw---- 1 mysql mysql 79691776 Aug 17 02:16 ibdata1</span><br><span class="line">-rw-rw---- 1 mysql mysql 52428800 Aug 17 02:15 ibdata2</span><br><span class="line">-rw-rw---- 1 mysql mysql 50331648 Aug 17 02:16 ib_logfile0</span><br><span class="line">-rw-rw---- 1 mysql mysql 50331648 Aug 17 02:15 ib_logfile1</span><br><span class="line">drwx------ 2 mysql mysql     4096 Aug 17 02:15 mysql</span><br><span class="line">-rw-rw---- 1 mysql mysql    69408 Aug 17 02:15 mysql-bin.000001</span><br><span class="line">-rw-rw---- 1 mysql mysql  1640526 Aug 17 02:15 mysql-bin.000002</span><br><span class="line">-rw-rw---- 1 mysql mysql      120 Aug 17 02:16 mysql-bin.000003</span><br><span class="line">-rw-rw---- 1 mysql mysql       57 Aug 17 02:16 mysql-bin.index</span><br><span class="line">drwx------ 2 mysql mysql     4096 Aug 17 02:15 performance_schema</span><br><span class="line">drwx------ 2 mysql mysql        6 Aug 17 02:15 <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">2、#旧环境的表结构(字段，数据类型，约束)已经损坏，需要找开发要表结构（就是建表语句）</span><br><span class="line"><span class="comment">#删掉外键创建语句:  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)</span></span><br><span class="line"></span><br><span class="line"> CREATE TABLE world.city (</span><br><span class="line">  `ID` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `Name` char(35) NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `CountryCode` char(3) NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `District` char(20) NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `Population` int(11) NOT NULL DEFAULT <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  PRIMARY KEY (`ID`),</span><br><span class="line">  KEY `CountryCode` (`CountryCode`),</span><br><span class="line">  KEY `Population` (`Population`),</span><br><span class="line">  KEY `inx_aa` (`CountryCode`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=4080 DEFAULT CHARSET=latin1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、#登陆新环境的数据库，创建库、表</span><br><span class="line">[root@db01 ~]# mysql </span><br><span class="line">root@localhost:(none) &gt; create database world;</span><br><span class="line"></span><br><span class="line">root@localhost:(none) &gt; CREATE TABLE world.city (</span><br><span class="line">  `ID` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `Name` char(35) NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `CountryCode` char(3) NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `District` char(20) NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `Population` int(11) NOT NULL DEFAULT <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  PRIMARY KEY (`ID`),</span><br><span class="line">  KEY `CountryCode` (`CountryCode`),</span><br><span class="line">  KEY `Population` (`Population`),</span><br><span class="line">  KEY `inx_aa` (`CountryCode`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=4080 DEFAULT CHARSET=latin1;</span><br><span class="line"></span><br><span class="line">查看表结构完整，但是没数据</span><br><span class="line">root@localhost:(none) &gt; desc world.city;</span><br><span class="line">+-------------+----------+------+-----+---------+----------------+</span><br><span class="line">| Field       | Type     | Null | Key | Default | Extra          |</span><br><span class="line">+-------------+----------+------+-----+---------+----------------+</span><br><span class="line">| ID          | int(11)  | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| Name        | char(35) | NO   |     |         |                |</span><br><span class="line">| CountryCode | char(3)  | NO   | MUL |         |                |</span><br><span class="line">| District    | char(20) | NO   |     |         |                |</span><br><span class="line">| Population  | int(11)  | NO   | MUL | 0       |                |</span><br><span class="line">+-------------+----------+------+-----+---------+----------------+</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> * from world.city;</span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">那么数据在哪里呢，数据在独立表空间</span><br><span class="line">[root@db01 ~]# ll /app/mysql-5.6.50/data/world/</span><br><span class="line">total 16</span><br><span class="line">-rw-rw---- 1 mysql mysql 8710  Aug 17 02:24 city.frm</span><br><span class="line">-rw-rw---- 1 mysql mysql 147456 Aug 17 02:24 city.idb <span class="comment">#独立表空间</span></span><br><span class="line">-rw-rw---- 1 mysql mysql   61 Aug 17 02:22 db.opt</span><br><span class="line"></span><br><span class="line">4、#删除新环境的独立表空间</span><br><span class="line">root@localhost:(none) &gt; alter table world.city discard tablespace;</span><br><span class="line"></span><br><span class="line">[root@db01 ~]# ll /app/mysql-5.6.50/data/world/</span><br><span class="line">total 16</span><br><span class="line">-rw-rw---- 1 mysql mysql 8710 Aug 17 02:24 city.frm</span><br><span class="line">-rw-rw---- 1 mysql mysql   61 Aug 17 02:22 db.opt</span><br><span class="line"><span class="comment">#独立表空间被删除</span></span><br><span class="line"></span><br><span class="line">5、#从旧环境db02将city表的表空间复制过来</span><br><span class="line">[root@db02 ~]# <span class="built_in">cd</span> /app/mysql-5.6.50/data/world/</span><br><span class="line">[root@db02 world]# scp city.ibd 172.16.1.51:/app/mysql-5.6.50/data/world/</span><br><span class="line"></span><br><span class="line">6、#新环境db01给独立表空间授权</span><br><span class="line">[root@db01 ~]# <span class="built_in">chown</span> -R mysql.mysql /app/mysql-5.6.50/data/world</span><br><span class="line"></span><br><span class="line">7、#新环境db01导入表空间</span><br><span class="line">root@localhost:(none) &gt; alter table world.city import tablespace;</span><br><span class="line"></span><br><span class="line">8、#查询数据</span><br><span class="line">root@localhost:(none) &gt; <span class="keyword">select</span> * from world.city;</span><br><span class="line"></span><br><span class="line">9、#程序还在旧数据库上，测试没问题之后，就用于割接</span><br><span class="line">   - 方法一：开发修改代码连接数据库的IP，开发改完代码要走代码上线的流程，审批，测试，..发布</span><br><span class="line">   - 方法二：运维导出新环境的数据，恢复到旧环境</span><br><span class="line"></span><br><span class="line">10、#启动连接数据库的服务</span><br></pre></td></tr></table></figure><h3 id="Innodb核心特性——事务"><strong>Innodb核心特性——事务</strong></h3><p><strong>什么是事务</strong><br>主要针对DML语句（update，delete，insert）</p><p>一组数据操作执行步骤，这些步骤被视为一个工作单元:<br>1）用于对多个语句进行分组<br>2）可以在多个客户机并发访问同一个表中的数据时使用</p><p>**事物的生命周期：**所有步骤都成功或都失败<br>1）如果所有步骤正常，则执行<br>2）如果步骤出现错误或不完整，则取消</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#成功的事物</span></span><br><span class="line"><span class="comment">#开启事物</span></span><br><span class="line">begin：</span><br><span class="line">然后执行DML语句</span><br><span class="line"></span><br><span class="line"><span class="comment">#提交事物</span></span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line"><span class="comment">#失败的事物</span></span><br><span class="line"><span class="comment">#开启事物</span></span><br><span class="line">begin：</span><br><span class="line">然后执行DML语句</span><br><span class="line"></span><br><span class="line"><span class="comment">#回滚事物</span></span><br><span class="line">rollback     </span><br><span class="line"></span><br><span class="line">执行commit或者rollback,事物不会直接写在磁盘里，是先写在日志里面，写入日志比较快，日志优先写</span><br></pre></td></tr></table></figure><p>事物的通俗理解：伴随着“交易”出现的数据库概念。我们理解的“交易”是什么？<br>1）物与物的交换（古代）<br>2）货币现金与实物的交换（现代1）<br>3）虚拟货币与实物的交换（现代2）<br>4）虚拟货币与虚拟实物交换（现代3）</p><p><strong>事物的特性</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A：原子性：开启一个事物，要么操作全部成功，事物才会结束，如果失败一次，就回滚</span><br><span class="line">C：一致性：事物开启之前和事物执行结束后，数据状态保存一致</span><br><span class="line">I：隔离性：事物与事物之间是隔离的(和锁有关系，锁又和隔离级别有关系)</span><br><span class="line">D：持久性：事物操作完成后要持久化</span><br></pre></td></tr></table></figure><p>事物流程举例</p><p><img src="../image/study_img/image-20240816121313252.png" alt="image-20240816121313252"></p><p><strong>事物的流程控制语句 (DTL ：Databases Transaction Language)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">DTL也叫TCL(Transaction Control Language)</span><br><span class="line"></span><br><span class="line"><span class="comment">#模拟操作事物(银行取钱)</span></span><br><span class="line">1、#创建一个交易表，并插入数据(一开始两个人的初始余额是500)</span><br><span class="line">root@localhost:student &gt; create table jiaoyi(money int,name varchar(10));</span><br><span class="line">root@localhost:student &gt; insert into  jiaoyi values(500,<span class="string">&#x27;zhang3&#x27;</span>),(500,<span class="string">&#x27;lisi&#x27;</span>);</span><br><span class="line">root@localhost:student &gt; <span class="keyword">select</span> * from jiaoyi;</span><br><span class="line">+-------+--------+</span><br><span class="line">| money | name   |</span><br><span class="line">+-------+--------+</span><br><span class="line">|   500 | zhang3 |</span><br><span class="line">|   500 | lisi   |</span><br><span class="line">+-------+--------+</span><br><span class="line"></span><br><span class="line">2、#开启事物</span><br><span class="line">root@localhost:student &gt; start transaction;  <span class="comment">#或者begin：都可以显示开启一个新事物</span></span><br><span class="line"></span><br><span class="line">3、#进行交易，zhang3给lisi转账300</span><br><span class="line">root@localhost:student &gt; update jiaoyi <span class="built_in">set</span> money=800 <span class="built_in">where</span> name=<span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line">root@localhost:student &gt; update jiaoyi <span class="built_in">set</span> money=200 <span class="built_in">where</span> name=<span class="string">&#x27;zhang3&#x27;</span>;</span><br><span class="line">root@localhost:student &gt; <span class="keyword">select</span> * from jiaoyi;</span><br><span class="line">+-------+--------+</span><br><span class="line">| money | name   |</span><br><span class="line">+-------+--------+</span><br><span class="line">|   200 | zhang3 |</span><br><span class="line">|   800 | lisi   |</span><br><span class="line">+-------+--------+</span><br><span class="line"></span><br><span class="line">4、#开启一个新终端B，查看数据，没有变化，因为事物还没有结束</span><br><span class="line">root@localhost:student &gt; <span class="keyword">select</span> * from jiaoyi;</span><br><span class="line">+-------+--------+</span><br><span class="line">| money | name   |</span><br><span class="line">+-------+--------+</span><br><span class="line">|   500 | zhang3 |</span><br><span class="line">|   500 | lisi   |</span><br><span class="line">+-------+--------+</span><br><span class="line"></span><br><span class="line">5、#结束事物</span><br><span class="line">A终端结束事物</span><br><span class="line">root@localhost:student &gt; commit;</span><br><span class="line"></span><br><span class="line">B终端查看数据</span><br><span class="line">root@localhost:student &gt; <span class="keyword">select</span> * from jiaoyi;</span><br><span class="line">+-------+--------+</span><br><span class="line">| money | name   |</span><br><span class="line">+-------+--------+</span><br><span class="line">|   200 | zhang3 |</span><br><span class="line">|   800 | lisi   |</span><br><span class="line">+-------+--------+</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">现在的这个表对于mysql来说，就是一行，现在看到的格式化的表，是存储引擎做的格式化，如果想让mysql认为是两行数据，表里面必须要加主键</span><br><span class="line">1、#给表增加主键，初始化余额</span><br><span class="line">root@localhost:student &gt; alter table jiaoyi add <span class="built_in">id</span> int primary key auto_increment first;</span><br><span class="line">root@localhost:student &gt; update jiaoyi <span class="built_in">set</span> money=500 <span class="built_in">where</span> <span class="built_in">id</span>=2;</span><br><span class="line"></span><br><span class="line">root@localhost:student &gt; <span class="keyword">select</span> * from jiaoyi;</span><br><span class="line">+----+-------+--------+</span><br><span class="line">| <span class="built_in">id</span> | money | name   |</span><br><span class="line">+----+-------+--------+</span><br><span class="line">|  1 |   500 | zhang3 |</span><br><span class="line">|  2 |   500 | lisi   |</span><br><span class="line">+----+-------+--------+</span><br><span class="line"></span><br><span class="line">2、#A终端开启一个事物，进行交易，zhang3给lisi转账300</span><br><span class="line">root@localhost:student &gt; begin;</span><br><span class="line">root@localhost:student &gt; update jiaoyi <span class="built_in">set</span> money=800 <span class="built_in">where</span> <span class="built_in">id</span>=2;#这个时候条件必须用<span class="built_in">id</span>,如果用name,对于MySQL来说，不能识别为一行</span><br><span class="line">root@localhost:student &gt; update jiaoyi <span class="built_in">set</span> money=200 <span class="built_in">where</span> <span class="built_in">id</span>=1;</span><br><span class="line">root@localhost:student &gt; <span class="keyword">select</span> * from jiaoyi;</span><br><span class="line">+----+-------+--------+</span><br><span class="line">| <span class="built_in">id</span> | money | name   |</span><br><span class="line">+----+-------+--------+</span><br><span class="line">|  1 |   200 | zhang3 |</span><br><span class="line">|  2 |   800 | lisi   |</span><br><span class="line">+----+-------+--------+</span><br><span class="line"></span><br><span class="line">3、#B终端开启一个事物，有人往zhang3的账号转1000元</span><br><span class="line">root@localhost:student &gt; begin;</span><br><span class="line">root@localhost:student &gt; update jiaoyi <span class="built_in">set</span> money=1000 <span class="built_in">where</span> <span class="built_in">id</span>=1;</span><br><span class="line">不同的行，事物与事物之间不影响</span><br><span class="line">如果是同一行，都在操作事物，就要等先开启的事物完成操作之后，后开启的事物才进行操作</span><br><span class="line"></span><br><span class="line">4、AB终端结束事物</span><br><span class="line">root@localhost:student &gt; commit;</span><br><span class="line">root@localhost:student &gt; <span class="keyword">select</span> * from jiaoyi;</span><br><span class="line">+----+-------+--------+</span><br><span class="line">| <span class="built_in">id</span> | money | name   |</span><br><span class="line">+----+-------+--------+</span><br><span class="line">|  1 |  1200 | zhang3 |</span><br><span class="line">|  2 |   800 | lisi   |</span><br><span class="line">+----+-------+--------+</span><br></pre></td></tr></table></figure><p><strong>事物的自动提交</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">mysql不是执行begin的时候开启事物，是执行DML语句后，会自动开启事物，因为mysql里面默认有一个配置：</span><br><span class="line">root@localhost:student &gt; show variables like <span class="string">&#x27;%auto%&#x27;</span>;</span><br><span class="line">+-----------------------------+-------+</span><br><span class="line">| Variable_name               | Value |</span><br><span class="line">+-----------------------------+-------+</span><br><span class="line">| auto_increment_increment    | 1     |</span><br><span class="line">| auto_increment_offset       | 1     |</span><br><span class="line">| autocommit                  | ON    |#默认mysql开启自动提交</span><br><span class="line">| automatic_sp_privileges     | ON    |</span><br><span class="line">| innodb_autoextend_increment | 64    |</span><br><span class="line">| innodb_autoinc_lock_mode    | 1     |</span><br><span class="line">| innodb_stats_auto_recalc    | ON    |</span><br><span class="line">| sql_auto_is_null            | OFF   |</span><br><span class="line">+-----------------------------+-------+</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看bin_log日志</span></span><br><span class="line">[root@db01 ~]# mysqlbinlog --base64-output=decode rows -vvv /app/mysql-5.6.50/data/mysql-bin.000010</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、#在事物执行期间，如果执行DDL、DCL语句，都会导致事物自动提交</span><br><span class="line"></span><br><span class="line">2、#在事物执行期间，如果执行begin，会自动提交上一次事物，开启一个新事物</span><br><span class="line"></span><br><span class="line">3、#在事物执行期间，如果执行锁定语句(lock tables、unlock tables),会自动提交事物</span><br><span class="line"></span><br><span class="line">4、#在事物执行期间，执行导出数据(load data infile)</span><br><span class="line"></span><br><span class="line">5、#在事物执行期间，执行(<span class="keyword">select</span> <span class="keyword">for</span> update)</span><br><span class="line"></span><br><span class="line">6、#在执行autocommit=1的时候</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 关于事务的语句</span></span><br><span class="line">START TRANSACTION（或 BEGIN）：显式开始一个新事务</span><br><span class="line"><span class="comment"># SAVEPOINT：分配事务过程中的一个位置，以供将来引用</span></span><br><span class="line">root@localhost:(none):47: &gt;savepoint lzd_1000;</span><br><span class="line"><span class="comment"># COMMIT：永久记录当前事务所做的更改</span></span><br><span class="line"><span class="comment"># ROLLBACK：取消当前事务所做的更改</span></span><br><span class="line"><span class="comment"># ROLLBACK TO SAVEPOINT：取消在 savepoint 之后执行的更改</span></span><br><span class="line">root@localhost:(none):48: &gt;rollback to savepoint lzd_1000;</span><br><span class="line"><span class="comment"># RELEASE SAVEPOINT：删除 savepoint 标识符</span></span><br><span class="line">root@localhost:(none):49: &gt;release savepoint lzd_1000;</span><br><span class="line"><span class="comment"># 临时设置自动提交</span></span><br><span class="line">SET AUTOCOMMIT：为当前连接禁用或启用默认 autocommit 模式</span><br><span class="line">root@localhost:(none):50: &gt;<span class="built_in">set</span> autocommit=1;</span><br><span class="line">root@localhost:(none):50: &gt;<span class="built_in">set</span> autocommit=0;</span><br></pre></td></tr></table></figure><h3 id="事物日志redo"><strong>事物日志redo</strong></h3><p>MySQL特性：WAL特性  Write Ahead Log 日志优先写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看mysql的redo   在磁盘上面存着</span></span><br><span class="line">[root@db01 ~]# ll /app/mysql-5.6.50/data/</span><br><span class="line">-rw-rw---- 1 mysql mysql 50331648 Aug 18 00:20 ib_logfile0</span><br><span class="line">-rw-rw---- 1 mysql mysql 50331648 Aug  7 23:30 ib_logfile1</span><br><span class="line"></span><br><span class="line">redo的意思：重做</span><br></pre></td></tr></table></figure><p>redolog的工作流程</p><p><img src="../image/study_img/image-20240819151513794.png" alt="image-20240819151513794"></p><p><strong>自动故障恢复CSR  把数据该模拟的模拟，该变化的变化，写入到表空间</strong></p><p>断电：</p><p>1、数据commit,数据写入ib_logfile(redolog)时，突然断电</p><p>2、没有commit,数据写入ib_logfile(redo log)时</p><p>3、数据没有commit,没有记录在redo log中</p><p>这3种情况的数据如何处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#情况1:数据commit,数据写入ib_logfile(redolog)时，突然断电，表空间的数据怎么恢复，如果不恢复，用户看到数据还是500，是不对的</span></span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240819154720922.png" alt="image-20240819154720922"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#情况2：没有commit,数据写入ib_logfile(redo log)时，突然断电</span></span><br><span class="line"></span><br><span class="line">这种情况会出现问题，数据不能恢复，只能将变化过程记录到redo <span class="built_in">log</span>，不能把模拟出来的800写入独立表空间,所以需要配合undo</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240819155546706.png" alt="image-20240819155546706"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#情况3：没有commit,也没有写入ib_logfile(redo log)时，突然断电</span></span><br><span class="line"></span><br><span class="line">没有commit,也没有写入ib_logfile(redo <span class="built_in">log</span>)时，就不会有变化过程，原数据还是原数据，没什么变化</span><br></pre></td></tr></table></figure><p><strong>事物日志undo</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看mysql的undo</span></span><br><span class="line">[root@db01 ~]# ll /app/mysql-5.6.50/data/</span><br><span class="line">-rw-rw---- 1 mysql mysql 79691776 Aug 18 00:20 ibdata1</span><br><span class="line">-rw-rw---- 1 mysql mysql 52428800 Aug 18 00:20 ibdata2</span><br><span class="line"></span><br><span class="line">undo：不做   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">事务日志undo</span><br><span class="line">1）undo是什么？</span><br><span class="line">undo,顾名思义“回滚日志”，是事务日志的一种。</span><br><span class="line"></span><br><span class="line">_2）作用是什么？</span><br><span class="line">在事务ACID过程中，实现的是“A”原子性的作用。当然CI的特性也和undo有关</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">面试问题：</span><br><span class="line"><span class="comment">#mysql CSR的过程和什么有关</span></span><br><span class="line">CSR和2个日志文件有关，事物日志redo、undo，redo重做数据，undo不做数据，他们分别在MySQL的data目录下</span><br><span class="line">redo就在数据目录下</span><br><span class="line">undo:在MySQL5.6版本中undo是在ibdata(共享表空间)文件中，在MySQL5.7版本会独立出来。</span><br></pre></td></tr></table></figure><p><strong>MYSQL CSR的过程   断电之后，undo结合redo，恢复数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#情况1:数据commit,数据写入ib_logfile(redolog)时，突然断电，表空间的数据怎么恢复，</span></span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240819170447907.png" alt="image-20240819170447907"></p><p>突然断电，内存里面的数据没了</p><p><img src="../image/study_img/image-20240819172903983.png" alt="image-20240819172903983"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#情况2：没有commit,数据写入ib_logfile(redo log)时，突然断电</span></span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240819174134262.png" alt="image-20240819174134262"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">断电时，redo配合undo恢复数据</span><br><span class="line"><span class="comment">#情况3:没有commit,没有写入ib_logfile(redolog)时，突然断电,表空间的数据怎么恢复</span></span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240819175306313.png" alt="image-20240819175306313"></p><p><strong>事物中的锁</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1）什么是“锁”？</span><br><span class="line">“锁”顾名思义就是锁定的意思。</span><br><span class="line"></span><br><span class="line">2）“锁”的作用是什么？</span><br><span class="line">在事务ACID特性过程中，“锁”和“隔离级别”一起来实现“I”隔离性的作用。</span><br></pre></td></tr></table></figure><p><img src="../image/study_img/image-20240819111236391.png" alt="image-20240819111236391"></p><p>最后的数据A=2   因为谁先提交，以谁为准，条件后面的A=1没有了，被第二个事务改掉了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">排他锁：所谓的行及锁就是排他锁造成的，在事物执行期间,不允许其他事物执行修改操作</span><br><span class="line">共享锁：在事物执行期间，允许所有事物执行查询操作</span><br><span class="line"></span><br><span class="line">他两结合就是：阻塞修改删除操作，不阻塞查询操作</span><br><span class="line"></span><br><span class="line">乐观锁：谁先提交以谁为准</span><br><span class="line">悲观锁：在事物执行期间，阻塞其他事物的查询操作。剩1张票，我抢了，不管是否付款，你看不到这个票</span><br></pre></td></tr></table></figure><p><strong>多版本并发控制(MVCC)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1）只阻塞修改类操作，不阻塞查询类操作</span><br><span class="line">2）乐观锁的机制（谁先提交谁为准），mysql不能演示，因为隔离级别存在</span><br><span class="line"></span><br><span class="line"><span class="comment">#锁的粒度</span></span><br><span class="line">MyIsam：低并发锁（表级锁）</span><br><span class="line">Innodb：高并发锁（行级锁）</span><br></pre></td></tr></table></figure><p><strong>事务的隔离级别</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看隔离级别</span></span><br><span class="line">root@localhost:(none) &gt; show variables like <span class="string">&#x27;%iso%&#x27;</span>;</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| Variable_name | Value           |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| tx_isolation  | REPEATABLE-READ |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line"></span><br><span class="line">四种隔离级别：</span><br><span class="line">1、#READ UNCOMMITTED（未提交读） <span class="comment">#RU级别</span></span><br><span class="line">允许事务查看其他事务所进行的未提交更改</span><br><span class="line"></span><br><span class="line">2、#READ COMMITTED(已提交读)  <span class="comment">#RC级别</span></span><br><span class="line">允许事务查看其他事务所进行的已提交更改</span><br><span class="line"></span><br><span class="line">3、#REPEATABLE READ（重复读） <span class="comment">#RR级别</span></span><br><span class="line">确保每个事务的 SELECT 输出一致，比如说，你冲钱了，要刷新或者退出，才可以看到更新后的钱</span><br><span class="line">InnoDB 的默认级别</span><br><span class="line"></span><br><span class="line">4、#SERIALIZABLE (串行化)  <span class="comment">#不用这个级别</span></span><br><span class="line">将一个事务的结果与其他事务完全隔离</span><br><span class="line">在事物执行期间，查询到的数据是undo里面=的数据，</span><br><span class="line">查询的时候，阻塞修改</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看隔离级别</span></span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;%iso%&#x27;</span>;</span><br><span class="line"><span class="comment">#修改隔离级别为RU</span></span><br><span class="line">[mysqld]</span><br><span class="line">transaction_isolation=read-uncommit</span><br><span class="line">mysql&gt; use oldboy</span><br><span class="line">mysql&gt; <span class="keyword">select</span> * from stu;</span><br><span class="line">mysql&gt; insert into stu(<span class="built_in">id</span>,name,sex,money) values(2,<span class="string">&#x27;li4&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,123);</span><br><span class="line"><span class="comment">#修改隔离级别为RC  不需要修改，知道修改方法</span></span><br><span class="line">[mysqld]</span><br><span class="line">transaction_isolation=read-commit</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysql以前版本存在的问题：分别是怎么产生的，简单了解解决方案</span></span><br><span class="line">1、脏读:隔离级别是RU级别就产生脏读，脏读读取到的是其他事务中未提交的数据。比如说有一个事务，A给B转钱，一开始两个人都是500，A给B转300，B就有800并去查，查看到800，但是A没有提交，B看到的就是脏数据，因为A的余额可能不足，回滚转钱     </span><br><span class="line"></span><br><span class="line">解决办法：提高隔离基本RC级别，可以解决脏读的问题</span><br><span class="line"></span><br><span class="line">2、幻读：已提交读开2个事务，去查看同一行数据</span><br><span class="line">在一个主键中明明没有查到主键为X的数据，但主键为X的数据就是插不进去，就像某种幻觉一样</span><br><span class="line">解决方案：使用RR级别解决，使用事务的隔离级别来避免幻读。与脏读类似，通过设置合适的隔离级别可以解决幻读问题。此外，还可以使用行级锁或表级锁来限制查询的范围，从而避免幻读的发生。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、不可重复读：一个事务先后执行同一条SQL,但2次读取到的数据不同，就是不可重复读</span><br><span class="line"></span><br><span class="line">解决方案：同样可以使用事务的隔离级别和行级锁来避免不可重复读。另外，MySQL还提供了一个特殊的锁——可重复读锁（Repeatable Read），它可以避免不可重复读的问题。要使用可重复读锁，可以在查询语句前加上FOR REPLICATE READ关键字：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#脏读是读到了其他事务未提交的数据，而不可重复读是读到了其他事务已经提交的数据，但前后查询的结果不同，而幻读则是明明查询不到，但就是插入不了。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#redis存在的问题</span></span><br><span class="line">缓存击穿：当有1个key，设置有生命周期，当一个请求过来后，查询这个可以时，刚好这个key到期了，直接穿过缓存，打到数据库上。当有大量的并发请求打到数据库上，会导致数据库被打垮</span><br><span class="line"></span><br><span class="line">缓存穿透：意味着这个数据，数据库里面没有，所以不会把数据放到redis缓存里，只要有人来查询，就一定缓存中查不到，所以一定要走数据库</span><br><span class="line">那么，假设很多人，故意去查那些数据库里也没有的记录，我们的 redis 就起不到屏障的作用，因为 redis 里不可能有数据，所以并发查询就一定会打到数据库的身上。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">击穿：数据库里<span class="string">&#x27;有&#x27;</span>数据</span><br><span class="line">穿透：数据库里<span class="string">&#x27;没有&#x27;</span>数据</span><br><span class="line"></span><br><span class="line">缓存雪崩：大面积的key同时过期，大量的并发打到数据库</span><br><span class="line">不像缓冲击穿，只是因为一个key的过期，所以，对于雪崩来说，一般少量的key失效，所带来的数据库并发压力不是很大，而大量的key同时失效，导致key的并发加起来，会影响到我们的数据库。那就算一个key失效，也会对数据库造成很大的影响，那么把雪崩的所有key拆除一个一个过期的key来看，也就是雪崩可以拆分成一个一个缓存击穿的集合，把数据库打崩</span><br><span class="line"></span><br><span class="line">解决这些问题都是开发写代码去解决</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">MYSQL CSR的数据恢复过程</summary>
    
    
    
    
  </entry>
  
</feed>
